{
  "consumes" : [ "application/json" ],
  "definitions" : {
    "AccessKey" : {
      "description" : "Access key for the cloud provider. This helps to authenticate the user and get access to the provider.",
      "properties" : {
        "idKey" : {
          "$ref" : "#/definitions/AccessKeyId"
        },
        "keyInfo" : {
          "$ref" : "#/definitions/KeyInfo",
          "description" : "Cloud provider key information"
        }
      },
      "required" : [ "idKey", "keyInfo" ],
      "type" : "object"
    },
    "AccessKeyId" : {
      "properties" : {
        "keyCode" : {
          "type" : "string"
        },
        "providerUUID" : {
          "format" : "uuid",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "Alert" : {
      "description" : "Alert definition. Used to send an alert notification.",
      "properties" : {
        "acknowledgedTime" : {
          "description" : "Timestamp at which the alert was acknowledged",
          "format" : "date-time",
          "readOnly" : true,
          "type" : "string"
        },
        "configurationType" : {
          "description" : "Alert configuration type",
          "enum" : [ "PLATFORM", "UNIVERSE" ],
          "readOnly" : true,
          "type" : "string"
        },
        "configurationUuid" : {
          "description" : "Alert configuration UUID",
          "format" : "uuid",
          "readOnly" : true,
          "type" : "string"
        },
        "createTime" : {
          "description" : "Alert creation timestamp",
          "format" : "date-time",
          "readOnly" : true,
          "type" : "string"
        },
        "customerUUID" : {
          "description" : "Customer UUID",
          "format" : "uuid",
          "readOnly" : true,
          "type" : "string"
        },
        "definitionUuid" : {
          "description" : "Alert definition UUID",
          "format" : "uuid",
          "readOnly" : true,
          "type" : "string"
        },
        "labels" : {
          "items" : {
            "$ref" : "#/definitions/AlertLabel"
          },
          "type" : "array"
        },
        "message" : {
          "description" : "The alert's message text",
          "maxLength" : 2147483647,
          "minLength" : 1,
          "readOnly" : true,
          "type" : "string"
        },
        "name" : {
          "description" : "The alert's name",
          "maxLength" : 1000,
          "minLength" : 1,
          "readOnly" : true,
          "type" : "string"
        },
        "nextNotificationTime" : {
          "description" : "Time of the next notification attempt",
          "format" : "date-time",
          "readOnly" : true,
          "type" : "string"
        },
        "notificationAttemptTime" : {
          "description" : "Time of the last notification attempt",
          "format" : "date-time",
          "readOnly" : true,
          "type" : "string"
        },
        "notificationsFailed" : {
          "description" : "Count of failures to send a notification",
          "format" : "int32",
          "readOnly" : true,
          "type" : "integer"
        },
        "notifiedState" : {
          "description" : "Alert state in the last-sent notification",
          "enum" : [ "ACTIVE", "ACKNOWLEDGED", "SUSPENDED", "RESOLVED" ],
          "readOnly" : true,
          "type" : "string"
        },
        "resolvedTime" : {
          "description" : "Timestamp at which the alert was resolved",
          "format" : "date-time",
          "readOnly" : true,
          "type" : "string"
        },
        "severity" : {
          "description" : "Alert configuration severity",
          "enum" : [ "SEVERE", "WARNING" ],
          "readOnly" : true,
          "type" : "string"
        },
        "severityIndex" : {
          "format" : "int32",
          "type" : "integer"
        },
        "sourceName" : {
          "description" : "The source of the alert",
          "readOnly" : true,
          "type" : "string"
        },
        "sourceUUID" : {
          "description" : "The sourceUUID of the alert",
          "format" : "uuid",
          "readOnly" : true,
          "type" : "string"
        },
        "state" : {
          "description" : "The alert's state",
          "enum" : [ "ACTIVE", "ACKNOWLEDGED", "SUSPENDED", "RESOLVED" ],
          "readOnly" : true,
          "type" : "string"
        },
        "stateIndex" : {
          "format" : "int32",
          "type" : "integer"
        },
        "uuid" : {
          "description" : "Alert UUID",
          "format" : "uuid",
          "readOnly" : true,
          "type" : "string"
        }
      },
      "required" : [ "configurationType", "configurationUuid", "createTime", "customerUUID", "definitionUuid", "labels", "message", "name", "severity", "severityIndex", "sourceName", "sourceUUID", "state", "stateIndex" ],
      "type" : "object"
    },
    "AlertApiFilter" : {
      "properties" : {
        "configurationTypes" : {
          "items" : {
            "enum" : [ "PLATFORM", "UNIVERSE" ],
            "type" : "string"
          },
          "type" : "array",
          "uniqueItems" : true
        },
        "configurationUuid" : {
          "format" : "uuid",
          "type" : "string"
        },
        "severities" : {
          "items" : {
            "enum" : [ "SEVERE", "WARNING" ],
            "type" : "string"
          },
          "type" : "array",
          "uniqueItems" : true
        },
        "sourceName" : {
          "type" : "string"
        },
        "sourceUUIDs" : {
          "items" : {
            "format" : "uuid",
            "type" : "string"
          },
          "type" : "array",
          "uniqueItems" : true
        },
        "states" : {
          "items" : {
            "enum" : [ "ACTIVE", "ACKNOWLEDGED", "SUSPENDED", "RESOLVED" ],
            "type" : "string"
          },
          "type" : "array",
          "uniqueItems" : true
        },
        "uuids" : {
          "items" : {
            "format" : "uuid",
            "type" : "string"
          },
          "type" : "array",
          "uniqueItems" : true
        }
      },
      "required" : [ "configurationTypes", "configurationUuid", "severities", "sourceName", "sourceUUIDs", "states", "uuids" ],
      "type" : "object"
    },
    "AlertChannel" : {
      "properties" : {
        "customer_uuid" : {
          "format" : "uuid",
          "type" : "string"
        },
        "name" : {
          "maxLength" : 63,
          "minLength" : 1,
          "type" : "string"
        },
        "params" : {
          "$ref" : "#/definitions/AlertChannelParams"
        },
        "uuid" : {
          "format" : "uuid",
          "type" : "string"
        }
      },
      "required" : [ "customer_uuid", "name", "params", "uuid" ],
      "type" : "object"
    },
    "AlertChannelEmailParams" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AlertChannelParams"
      }, {
        "properties" : {
          "defaultRecipients" : {
            "type" : "boolean"
          },
          "defaultSmtpSettings" : {
            "type" : "boolean"
          },
          "recipients" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "smtpData" : {
            "$ref" : "#/definitions/SmtpData"
          }
        },
        "required" : [ "defaultRecipients", "defaultSmtpSettings", "recipients", "smtpData" ],
        "type" : "object"
      } ]
    },
    "AlertChannelFormData" : {
      "properties" : {
        "alertChannelUUID" : {
          "format" : "uuid",
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "params" : {
          "$ref" : "#/definitions/AlertChannelParams"
        }
      },
      "required" : [ "alertChannelUUID", "name", "params" ],
      "type" : "object"
    },
    "AlertChannelPagerDutyParams" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AlertChannelParams"
      }, {
        "properties" : {
          "apiKey" : {
            "maxLength" : 2147483647,
            "minLength" : 1,
            "type" : "string"
          },
          "routingKey" : {
            "maxLength" : 2147483647,
            "minLength" : 1,
            "type" : "string"
          }
        },
        "required" : [ "apiKey", "routingKey" ],
        "type" : "object"
      } ]
    },
    "AlertChannelParams" : {
      "discriminator" : "channelType",
      "properties" : {
        "textTemplate" : {
          "type" : "string"
        },
        "titleTemplate" : {
          "type" : "string"
        }
      },
      "required" : [ "textTemplate", "titleTemplate" ],
      "type" : "object"
    },
    "AlertChannelSlackParams" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AlertChannelParams"
      }, {
        "properties" : {
          "iconUrl" : {
            "type" : "string"
          },
          "username" : {
            "maxLength" : 2147483647,
            "minLength" : 1,
            "type" : "string"
          },
          "webhookUrl" : {
            "type" : "string"
          }
        },
        "required" : [ "iconUrl", "username", "webhookUrl" ],
        "type" : "object"
      } ]
    },
    "AlertChannelWebHookParams" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AlertChannelParams"
      }, {
        "properties" : {
          "webhookUrl" : {
            "type" : "string"
          }
        },
        "required" : [ "webhookUrl" ],
        "type" : "object"
      } ]
    },
    "AlertConfiguration" : {
      "description" : "Alert configuration",
      "properties" : {
        "active" : {
          "description" : "Is configured alerts raised or not",
          "type" : "boolean"
        },
        "alertCount" : {
          "format" : "double",
          "type" : "number"
        },
        "createTime" : {
          "description" : "Creation time",
          "format" : "date-time",
          "readOnly" : true,
          "type" : "string"
        },
        "customerUUID" : {
          "description" : "Customer UUID",
          "format" : "uuid",
          "readOnly" : true,
          "type" : "string"
        },
        "defaultDestination" : {
          "description" : "Is default destination used for this config",
          "type" : "boolean"
        },
        "description" : {
          "description" : "Description",
          "type" : "string"
        },
        "destinationUUID" : {
          "description" : "Alert destination UUID",
          "format" : "uuid",
          "type" : "string"
        },
        "durationSec" : {
          "description" : "Duration in seconds, while condition is met to raise an alert",
          "format" : "int32",
          "minimum" : 0,
          "type" : "integer"
        },
        "maintenanceWindowUuids" : {
          "description" : "Maintenance window UUIDs, applied to this alert config",
          "items" : {
            "format" : "uuid",
            "type" : "string"
          },
          "readOnly" : true,
          "type" : "array",
          "uniqueItems" : true
        },
        "name" : {
          "description" : "Name",
          "maxLength" : 1000,
          "minLength" : 1,
          "type" : "string"
        },
        "target" : {
          "$ref" : "#/definitions/AlertConfigurationTarget",
          "description" : "Target"
        },
        "targetType" : {
          "description" : "Target type",
          "enum" : [ "PLATFORM", "UNIVERSE" ],
          "readOnly" : true,
          "type" : "string"
        },
        "template" : {
          "description" : "Template name",
          "enum" : [ "REPLICATION_LAG", "CLOCK_SKEW", "MEMORY_CONSUMPTION", "HEALTH_CHECK_ERROR", "HEALTH_CHECK_NOTIFICATION_ERROR", "BACKUP_FAILURE", "BACKUP_SCHEDULE_FAILURE", "INACTIVE_CRON_NODES", "ALERT_QUERY_FAILED", "ALERT_CONFIG_WRITING_FAILED", "ALERT_NOTIFICATION_ERROR", "ALERT_NOTIFICATION_CHANNEL_ERROR", "NODE_DOWN", "NODE_RESTART", "NODE_CPU_USAGE", "NODE_DISK_USAGE", "NODE_FILE_DESCRIPTORS_USAGE", "NODE_OOM_KILLS", "DB_VERSION_MISMATCH", "DB_INSTANCE_DOWN", "DB_INSTANCE_RESTART", "DB_FATAL_LOGS", "DB_ERROR_LOGS", "DB_CORE_FILES", "DB_YSQL_CONNECTION", "DB_YCQL_CONNECTION", "DB_REDIS_CONNECTION", "DB_MEMORY_OVERLOAD", "DB_COMPACTION_OVERLOAD", "DB_QUEUES_OVERFLOW", "DB_WRITE_READ_TEST_ERROR", "NODE_TO_NODE_CA_CERT_EXPIRY", "NODE_TO_NODE_CERT_EXPIRY", "CLIENT_TO_NODE_CA_CERT_EXPIRY", "CLIENT_TO_NODE_CERT_EXPIRY", "ENCRYPTION_AT_REST_CONFIG_EXPIRY", "YSQL_OP_AVG_LATENCY", "YCQL_OP_AVG_LATENCY", "YSQL_OP_P99_LATENCY", "YCQL_OP_P99_LATENCY", "HIGH_NUM_YSQL_CONNECTIONS", "HIGH_NUM_YCQL_CONNECTIONS", "HIGH_NUM_YEDIS_CONNECTIONS", "YSQL_THROUGHPUT", "YCQL_THROUGHPUT", "MASTER_LEADER_MISSING", "MASTER_UNDER_REPLICATED", "LEADERLESS_TABLETS", "UNDER_REPLICATED_TABLETS" ],
          "readOnly" : true,
          "type" : "string"
        },
        "thresholdUnit" : {
          "description" : "Threshold unit",
          "enum" : [ "STATUS", "COUNT", "PERCENT", "MILLISECOND", "SECOND", "DAY" ],
          "readOnly" : true,
          "type" : "string"
        },
        "thresholds" : {
          "additionalProperties" : {
            "$ref" : "#/definitions/AlertConfigurationThreshold"
          },
          "description" : "Thresholds",
          "type" : "object"
        },
        "uuid" : {
          "description" : "Configuration UUID",
          "format" : "uuid",
          "readOnly" : true,
          "type" : "string"
        }
      },
      "required" : [ "active", "alertCount", "createTime", "customerUUID", "defaultDestination", "description", "durationSec", "name", "target", "targetType", "template", "thresholdUnit", "thresholds" ],
      "type" : "object"
    },
    "AlertConfigurationApiFilter" : {
      "properties" : {
        "active" : {
          "type" : "boolean"
        },
        "destinationType" : {
          "enum" : [ "NO_DESTINATION", "DEFAULT_DESTINATION", "SELECTED_DESTINATION" ],
          "type" : "string"
        },
        "destinationUuid" : {
          "format" : "uuid",
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "severity" : {
          "enum" : [ "SEVERE", "WARNING" ],
          "type" : "string"
        },
        "target" : {
          "$ref" : "#/definitions/AlertConfigurationTarget"
        },
        "targetType" : {
          "enum" : [ "PLATFORM", "UNIVERSE" ],
          "type" : "string"
        },
        "template" : {
          "enum" : [ "REPLICATION_LAG", "CLOCK_SKEW", "MEMORY_CONSUMPTION", "HEALTH_CHECK_ERROR", "HEALTH_CHECK_NOTIFICATION_ERROR", "BACKUP_FAILURE", "BACKUP_SCHEDULE_FAILURE", "INACTIVE_CRON_NODES", "ALERT_QUERY_FAILED", "ALERT_CONFIG_WRITING_FAILED", "ALERT_NOTIFICATION_ERROR", "ALERT_NOTIFICATION_CHANNEL_ERROR", "NODE_DOWN", "NODE_RESTART", "NODE_CPU_USAGE", "NODE_DISK_USAGE", "NODE_FILE_DESCRIPTORS_USAGE", "NODE_OOM_KILLS", "DB_VERSION_MISMATCH", "DB_INSTANCE_DOWN", "DB_INSTANCE_RESTART", "DB_FATAL_LOGS", "DB_ERROR_LOGS", "DB_CORE_FILES", "DB_YSQL_CONNECTION", "DB_YCQL_CONNECTION", "DB_REDIS_CONNECTION", "DB_MEMORY_OVERLOAD", "DB_COMPACTION_OVERLOAD", "DB_QUEUES_OVERFLOW", "DB_WRITE_READ_TEST_ERROR", "NODE_TO_NODE_CA_CERT_EXPIRY", "NODE_TO_NODE_CERT_EXPIRY", "CLIENT_TO_NODE_CA_CERT_EXPIRY", "CLIENT_TO_NODE_CERT_EXPIRY", "ENCRYPTION_AT_REST_CONFIG_EXPIRY", "YSQL_OP_AVG_LATENCY", "YCQL_OP_AVG_LATENCY", "YSQL_OP_P99_LATENCY", "YCQL_OP_P99_LATENCY", "HIGH_NUM_YSQL_CONNECTIONS", "HIGH_NUM_YCQL_CONNECTIONS", "HIGH_NUM_YEDIS_CONNECTIONS", "YSQL_THROUGHPUT", "YCQL_THROUGHPUT", "MASTER_LEADER_MISSING", "MASTER_UNDER_REPLICATED", "LEADERLESS_TABLETS", "UNDER_REPLICATED_TABLETS" ],
          "type" : "string"
        },
        "uuids" : {
          "items" : {
            "format" : "uuid",
            "type" : "string"
          },
          "type" : "array",
          "uniqueItems" : true
        }
      },
      "required" : [ "active", "destinationType", "destinationUuid", "name", "severity", "target", "targetType", "template", "uuids" ],
      "type" : "object"
    },
    "AlertConfigurationPagedApiQuery" : {
      "properties" : {
        "direction" : {
          "enum" : [ "ASC", "DESC" ],
          "type" : "string"
        },
        "filter" : {
          "$ref" : "#/definitions/AlertConfigurationApiFilter"
        },
        "limit" : {
          "format" : "int32",
          "type" : "integer"
        },
        "needTotalCount" : {
          "type" : "boolean"
        },
        "offset" : {
          "format" : "int32",
          "type" : "integer"
        },
        "sortBy" : {
          "enum" : [ "uuid", "name", "active", "targetType", "target", "createTime", "template", "severity", "destination", "alertCount" ],
          "type" : "string"
        }
      },
      "required" : [ "direction", "filter", "limit", "needTotalCount", "offset", "sortBy" ],
      "type" : "object"
    },
    "AlertConfigurationPagedResponse" : {
      "properties" : {
        "entities" : {
          "items" : {
            "$ref" : "#/definitions/AlertConfiguration"
          },
          "type" : "array"
        },
        "hasNext" : {
          "type" : "boolean"
        },
        "hasPrev" : {
          "type" : "boolean"
        },
        "totalCount" : {
          "format" : "int32",
          "type" : "integer"
        }
      },
      "required" : [ "entities", "hasNext", "hasPrev", "totalCount" ],
      "type" : "object"
    },
    "AlertConfigurationTarget" : {
      "description" : "Alert target. Set to `all`, or specify one or more target UUIDs.",
      "properties" : {
        "all" : {
          "description" : "Alert applicable to all targets",
          "type" : "boolean"
        },
        "uuids" : {
          "description" : "Alert target UUIDs",
          "items" : {
            "format" : "uuid",
            "type" : "string"
          },
          "type" : "array",
          "uniqueItems" : true
        }
      },
      "type" : "object"
    },
    "AlertConfigurationTemplate" : {
      "description" : "Alert configuration template",
      "properties" : {
        "active" : {
          "description" : "Is configured alerts raised or not",
          "type" : "boolean"
        },
        "alertCount" : {
          "format" : "double",
          "type" : "number"
        },
        "createTime" : {
          "description" : "Creation time",
          "format" : "date-time",
          "readOnly" : true,
          "type" : "string"
        },
        "customerUUID" : {
          "description" : "Customer UUID",
          "format" : "uuid",
          "readOnly" : true,
          "type" : "string"
        },
        "defaultDestination" : {
          "description" : "Is default destination used for this config",
          "type" : "boolean"
        },
        "description" : {
          "description" : "Description",
          "type" : "string"
        },
        "destinationUUID" : {
          "description" : "Alert destination UUID",
          "format" : "uuid",
          "type" : "string"
        },
        "durationSec" : {
          "description" : "Duration in seconds, while condition is met to raise an alert",
          "format" : "int32",
          "minimum" : 0,
          "type" : "integer"
        },
        "maintenanceWindowUuids" : {
          "description" : "Maintenance window UUIDs, applied to this alert config",
          "items" : {
            "format" : "uuid",
            "type" : "string"
          },
          "readOnly" : true,
          "type" : "array",
          "uniqueItems" : true
        },
        "name" : {
          "description" : "Name",
          "maxLength" : 1000,
          "minLength" : 1,
          "type" : "string"
        },
        "target" : {
          "$ref" : "#/definitions/AlertConfigurationTarget",
          "description" : "Target"
        },
        "targetType" : {
          "description" : "Target type",
          "enum" : [ "PLATFORM", "UNIVERSE" ],
          "readOnly" : true,
          "type" : "string"
        },
        "template" : {
          "description" : "Template name",
          "enum" : [ "REPLICATION_LAG", "CLOCK_SKEW", "MEMORY_CONSUMPTION", "HEALTH_CHECK_ERROR", "HEALTH_CHECK_NOTIFICATION_ERROR", "BACKUP_FAILURE", "BACKUP_SCHEDULE_FAILURE", "INACTIVE_CRON_NODES", "ALERT_QUERY_FAILED", "ALERT_CONFIG_WRITING_FAILED", "ALERT_NOTIFICATION_ERROR", "ALERT_NOTIFICATION_CHANNEL_ERROR", "NODE_DOWN", "NODE_RESTART", "NODE_CPU_USAGE", "NODE_DISK_USAGE", "NODE_FILE_DESCRIPTORS_USAGE", "NODE_OOM_KILLS", "DB_VERSION_MISMATCH", "DB_INSTANCE_DOWN", "DB_INSTANCE_RESTART", "DB_FATAL_LOGS", "DB_ERROR_LOGS", "DB_CORE_FILES", "DB_YSQL_CONNECTION", "DB_YCQL_CONNECTION", "DB_REDIS_CONNECTION", "DB_MEMORY_OVERLOAD", "DB_COMPACTION_OVERLOAD", "DB_QUEUES_OVERFLOW", "DB_WRITE_READ_TEST_ERROR", "NODE_TO_NODE_CA_CERT_EXPIRY", "NODE_TO_NODE_CERT_EXPIRY", "CLIENT_TO_NODE_CA_CERT_EXPIRY", "CLIENT_TO_NODE_CERT_EXPIRY", "ENCRYPTION_AT_REST_CONFIG_EXPIRY", "YSQL_OP_AVG_LATENCY", "YCQL_OP_AVG_LATENCY", "YSQL_OP_P99_LATENCY", "YCQL_OP_P99_LATENCY", "HIGH_NUM_YSQL_CONNECTIONS", "HIGH_NUM_YCQL_CONNECTIONS", "HIGH_NUM_YEDIS_CONNECTIONS", "YSQL_THROUGHPUT", "YCQL_THROUGHPUT", "MASTER_LEADER_MISSING", "MASTER_UNDER_REPLICATED", "LEADERLESS_TABLETS", "UNDER_REPLICATED_TABLETS" ],
          "readOnly" : true,
          "type" : "string"
        },
        "thresholdConditionReadOnly" : {
          "description" : "Is alert threshold condition read-only or configurable",
          "readOnly" : true,
          "type" : "boolean"
        },
        "thresholdInteger" : {
          "description" : "Is alert threshold integer or floating point",
          "readOnly" : true,
          "type" : "boolean"
        },
        "thresholdMaxValue" : {
          "description" : "Alert threshold maximal value",
          "format" : "double",
          "readOnly" : true,
          "type" : "number"
        },
        "thresholdMinValue" : {
          "description" : "Alert threshold minimal value",
          "format" : "double",
          "readOnly" : true,
          "type" : "number"
        },
        "thresholdReadOnly" : {
          "description" : "Is alert threshold read-only or configurable",
          "readOnly" : true,
          "type" : "boolean"
        },
        "thresholdUnit" : {
          "description" : "Threshold unit",
          "enum" : [ "STATUS", "COUNT", "PERCENT", "MILLISECOND", "SECOND", "DAY" ],
          "readOnly" : true,
          "type" : "string"
        },
        "thresholdUnitName" : {
          "description" : "Threshold unit name",
          "readOnly" : true,
          "type" : "string"
        },
        "thresholds" : {
          "additionalProperties" : {
            "$ref" : "#/definitions/AlertConfigurationThreshold"
          },
          "description" : "Thresholds",
          "type" : "object"
        },
        "uuid" : {
          "description" : "Configuration UUID",
          "format" : "uuid",
          "readOnly" : true,
          "type" : "string"
        }
      },
      "required" : [ "active", "alertCount", "createTime", "customerUUID", "defaultDestination", "description", "durationSec", "name", "target", "targetType", "template", "thresholdUnit", "thresholds" ],
      "type" : "object"
    },
    "AlertConfigurationThreshold" : {
      "description" : "Alert configuration threshold. Conditions can be either greater than a specified value, or less than a specified value.",
      "properties" : {
        "condition" : {
          "description" : "Threshold condition (greater than, or less than)",
          "enum" : [ "GREATER_THAN", "LESS_THAN" ],
          "type" : "string"
        },
        "threshold" : {
          "description" : "Threshold value",
          "format" : "double",
          "type" : "number"
        }
      },
      "required" : [ "condition", "threshold" ],
      "type" : "object"
    },
    "AlertDefinition" : {
      "properties" : {
        "configurationUUID" : {
          "format" : "uuid",
          "type" : "string"
        },
        "customerUUID" : {
          "format" : "uuid",
          "type" : "string"
        },
        "labels" : {
          "items" : {
            "$ref" : "#/definitions/AlertDefinitionLabel"
          },
          "type" : "array"
        },
        "query" : {
          "type" : "string"
        },
        "universeUUID" : {
          "format" : "uuid",
          "type" : "string"
        },
        "uuid" : {
          "format" : "uuid",
          "type" : "string"
        },
        "version" : {
          "format" : "int32",
          "type" : "integer"
        }
      },
      "required" : [ "configurationUUID", "customerUUID", "labels", "query", "universeUUID", "uuid", "version" ],
      "type" : "object"
    },
    "AlertDefinitionLabel" : {
      "properties" : {
        "key" : {
          "$ref" : "#/definitions/AlertDefinitionLabelKey"
        },
        "name" : {
          "type" : "string"
        },
        "value" : {
          "type" : "string"
        }
      },
      "required" : [ "key", "name", "value" ],
      "type" : "object"
    },
    "AlertDefinitionLabelKey" : {
      "properties" : {
        "name" : {
          "type" : "string"
        }
      },
      "required" : [ "name" ],
      "type" : "object"
    },
    "AlertDestination" : {
      "properties" : {
        "channels" : {
          "items" : {
            "format" : "uuid",
            "type" : "string"
          },
          "maxItems" : 2147483647,
          "minItems" : 1,
          "readOnly" : true,
          "type" : "array"
        },
        "customerUUID" : {
          "format" : "uuid",
          "type" : "string"
        },
        "defaultDestination" : {
          "type" : "boolean"
        },
        "name" : {
          "maxLength" : 63,
          "minLength" : 1,
          "type" : "string"
        },
        "uuid" : {
          "format" : "uuid",
          "type" : "string"
        }
      },
      "required" : [ "channels", "customerUUID", "defaultDestination", "name", "uuid" ],
      "type" : "object"
    },
    "AlertDestinationFormData" : {
      "properties" : {
        "channels" : {
          "items" : {
            "format" : "uuid",
            "type" : "string"
          },
          "type" : "array"
        },
        "defaultDestination" : {
          "type" : "boolean"
        },
        "name" : {
          "type" : "string"
        }
      },
      "required" : [ "channels", "defaultDestination", "name" ],
      "type" : "object"
    },
    "AlertLabel" : {
      "properties" : {
        "key" : {
          "$ref" : "#/definitions/AlertLabelKey"
        },
        "name" : {
          "type" : "string"
        },
        "value" : {
          "type" : "string"
        }
      },
      "required" : [ "key", "name", "value" ],
      "type" : "object"
    },
    "AlertLabelKey" : {
      "properties" : {
        "name" : {
          "type" : "string"
        }
      },
      "required" : [ "name" ],
      "type" : "object"
    },
    "AlertPagedApiQuery" : {
      "properties" : {
        "direction" : {
          "enum" : [ "ASC", "DESC" ],
          "type" : "string"
        },
        "filter" : {
          "$ref" : "#/definitions/AlertApiFilter"
        },
        "limit" : {
          "format" : "int32",
          "type" : "integer"
        },
        "needTotalCount" : {
          "type" : "boolean"
        },
        "offset" : {
          "format" : "int32",
          "type" : "integer"
        },
        "sortBy" : {
          "enum" : [ "uuid", "createTime", "severity", "name", "sourceName", "state" ],
          "type" : "string"
        }
      },
      "required" : [ "direction", "filter", "limit", "needTotalCount", "offset", "sortBy" ],
      "type" : "object"
    },
    "AlertPagedResponse" : {
      "properties" : {
        "entities" : {
          "items" : {
            "$ref" : "#/definitions/Alert"
          },
          "type" : "array"
        },
        "hasNext" : {
          "type" : "boolean"
        },
        "hasPrev" : {
          "type" : "boolean"
        },
        "totalCount" : {
          "format" : "int32",
          "type" : "integer"
        }
      },
      "required" : [ "entities", "hasNext", "hasPrev", "totalCount" ],
      "type" : "object"
    },
    "AlertTemplateApiFilter" : {
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "targetType" : {
          "enum" : [ "PLATFORM", "UNIVERSE" ],
          "type" : "string"
        }
      },
      "required" : [ "name", "targetType" ],
      "type" : "object"
    },
    "AlertingData" : {
      "description" : "Alerting configuration",
      "properties" : {
        "activeAlertNotificationIntervalMs" : {
          "description" : "Period, which is used to send active alert notifications",
          "format" : "int64",
          "type" : "integer"
        },
        "alertingEmail" : {
          "description" : "Alert email address",
          "example" : "test@example.com",
          "type" : "string"
        },
        "checkIntervalMs" : {
          "description" : "Alert interval, in milliseconds",
          "format" : "int64",
          "type" : "integer"
        },
        "reportOnlyErrors" : {
          "description" : "Trigger an alert only for errors",
          "type" : "boolean"
        },
        "sendAlertsToYb" : {
          "description" : "Send alerts to YB as well as to customer",
          "type" : "boolean"
        },
        "statusUpdateIntervalMs" : {
          "description" : "Status update of alert interval, in milliseconds",
          "format" : "int64",
          "type" : "integer"
        }
      },
      "type" : "object"
    },
    "Audit" : {
      "description" : "Audit logging for requests and responses",
      "properties" : {
        "action" : {
          "description" : "Action",
          "enum" : [ "Set", "Create", "Edit", "Update", "Delete", "Register", "Refresh", "Upload", "Upgrade", "Import", "Pause", "Resume", "Restart", "Abort", "Retry", "Restore", "Alter", "Drop", "Stop", "Validate", "Acknowledge", "SyncXClusterConfig", "Login", "Promote", "Bootstrap", "Configure", "RefreshPricing", "UpgradeSoftware", "UpgradeGFlags", "UpgradeCerts", "UpgradeTLS", "UpgradeVmImage", "UpgradeSystemd", "ResizeNode", "AddMetrics", "CreateKubernetes", "SetupDocker", "RetrieveKmsKey", "RemoveKmsKeyReferenceHistory", "UpsertCustomerFeatures", "CreateSelfSignedCert", "UpdateEmptyCustomerCertificate", "GetRootCertificate", "AddClientCertificate", "SetDBCredentials", "CreateUserInDB", "SetHelm3Compatible", "SetBackupFlag", "SetUniverseKey", "ResetUniverseVersion", "ConfigUniverseAlert", "ToggleTls", "TlsConfigUpdate", "UpdateDiskSize", "CreateCluster", "DeleteCluster", "CreateAllClusters", "UpdatePrimaryCluster", "UpdateReadOnlyCluster", "CreateReadOnlyCluster", "DeleteReadOnlyCluster", "RunYsqlQuery", "BulkImport", "CreateBackup", "RestoreBackup", "CreateSingleTableBackup", "CreateMultiTableBackup", "CreateBackupSchedule", "EditBackupSchedule", "StartPeriodicBackup", "StopPeriodicBackup", "DetachedNodeInstanceAction", "NodeInstanceAction", "DeleteBackupSchedule", "ChangeUserRole", "ChangeUserPassword", "SetSecurity", "GenerateApiToken", "ResetSlowQueries", "ExternalScriptSchedule", "StopScheduledScript", "UpdateScheduledScript", "CreateInstanceType", "DeleteInstanceType", "GetUniverseResources", "ThirdpartySoftwareUpgrade", "CreateTableSpaces" ],
          "example" : "Create User",
          "readOnly" : true,
          "type" : "string"
        },
        "apiCall" : {
          "description" : "API call",
          "example" : "/api/v1/customers/<496fdea8-df25-11eb-ba80-0242ac130004>/providers",
          "readOnly" : true,
          "type" : "string"
        },
        "apiMethod" : {
          "description" : "API method",
          "example" : "GET",
          "readOnly" : true,
          "type" : "string"
        },
        "auditID" : {
          "format" : "int64",
          "type" : "integer"
        },
        "customerUUID" : {
          "description" : "Customer UUID",
          "format" : "uuid",
          "readOnly" : true,
          "type" : "string"
        },
        "payload" : {
          "description" : "Audit UUID",
          "readOnly" : true,
          "type" : "object"
        },
        "target" : {
          "description" : "Target",
          "enum" : [ "Session", "CloudProvider", "Region", "AvailabilityZone", "CustomerConfig", "KMSConfig", "Customer", "Release", "Certificate", "Alert", "AlertChannel", "AlertDestination", "MaintenanceWindow", "AccessKey", "Universe", "XClusterConfig", "Table", "Backup", "CustomerTask", "NodeInstance", "PlatformInstance", "Schedule", "User", "LoggingConfig", "RuntimeConfigKey", "HAConfig", "HABackup", "ScheduledScript", "SupportBundle", "GFlags" ],
          "example" : "User",
          "readOnly" : true,
          "type" : "string"
        },
        "targetID" : {
          "description" : "Target ID",
          "readOnly" : true,
          "type" : "string"
        },
        "taskUUID" : {
          "description" : "Task UUID",
          "format" : "uuid",
          "readOnly" : true,
          "type" : "string"
        },
        "timestamp" : {
          "format" : "date-time",
          "type" : "string"
        },
        "userEmail" : {
          "description" : "User Email",
          "readOnly" : true,
          "type" : "string"
        },
        "userUUID" : {
          "description" : "User UUID",
          "format" : "uuid",
          "readOnly" : true,
          "type" : "string"
        }
      },
      "required" : [ "auditID", "timestamp" ],
      "type" : "object"
    },
    "AuditLoggingConfig" : {
      "description" : "Audit Logging Configuration",
      "properties" : {
        "maxHistory" : {
          "description" : "Max number of days up till which logs are kept",
          "example" : 30,
          "format" : "int32",
          "minimum" : 0,
          "type" : "integer"
        },
        "outputToFile" : {
          "description" : "Flag to enable/disable audit logs output to file",
          "type" : "boolean"
        },
        "outputToStdout" : {
          "description" : "Flag to enable/disable audit logs output to stdout",
          "type" : "boolean"
        },
        "rolloverPattern" : {
          "description" : "Rollover Pattern",
          "example" : "yyyy-MM-dd",
          "type" : "string"
        }
      },
      "required" : [ "outputToFile", "outputToStdout" ],
      "type" : "object"
    },
    "AvailabilityZone" : {
      "description" : "Availability zone (AZ) for a region",
      "properties" : {
        "active" : {
          "description" : "AZ status. This value is `true` for an active AZ.",
          "readOnly" : true,
          "type" : "boolean"
        },
        "code" : {
          "description" : "AZ code",
          "example" : "us-west1-a",
          "type" : "string"
        },
        "config" : {
          "additionalProperties" : {
            "type" : "string"
          },
          "description" : "AZ configuration values",
          "type" : "object"
        },
        "kubeconfigPath" : {
          "description" : "Path to Kubernetes configuration file",
          "readOnly" : true,
          "type" : "string"
        },
        "name" : {
          "description" : "AZ name",
          "example" : "us-west1-a",
          "type" : "string"
        },
        "secondarySubnet" : {
          "description" : "AZ secondary subnet",
          "example" : "secondary subnet id",
          "type" : "string"
        },
        "subnet" : {
          "description" : "AZ subnet",
          "example" : "subnet id",
          "type" : "string"
        },
        "uuid" : {
          "description" : "AZ UUID",
          "format" : "uuid",
          "readOnly" : true,
          "type" : "string"
        }
      },
      "required" : [ "name" ],
      "type" : "object"
    },
    "AvailabilityZoneData" : {
      "description" : "Details of an availability zone, used by the API and UI to validate data against input constraints",
      "properties" : {
        "code" : {
          "description" : "AZ code",
          "type" : "string"
        },
        "name" : {
          "description" : "AZ name",
          "type" : "string"
        },
        "subnet" : {
          "description" : "AZ subnet",
          "type" : "string"
        }
      },
      "required" : [ "code", "name" ],
      "type" : "object"
    },
    "AvailabilityZoneFormData" : {
      "properties" : {
        "availabilityZones" : {
          "description" : "List of availability zones",
          "items" : {
            "$ref" : "#/definitions/AvailabilityZoneData"
          },
          "type" : "array"
        }
      },
      "required" : [ "availabilityZones" ],
      "type" : "object"
    },
    "Backup" : {
      "description" : "A single backup. Includes the backup's status, expiration time, and configuration.",
      "properties" : {
        "backupInfo" : {
          "$ref" : "#/definitions/BackupTableParams",
          "description" : "Details of the backup"
        },
        "backupUUID" : {
          "description" : "Backup UUID",
          "format" : "uuid",
          "readOnly" : true,
          "type" : "string"
        },
        "category" : {
          "description" : "Category of the backup",
          "enum" : [ "YB_BACKUP_SCRIPT", "YB_CONTROLLER" ],
          "type" : "string"
        },
        "completionTime" : {
          "description" : "Backup completion time",
          "format" : "date-time",
          "type" : "string"
        },
        "createTime" : {
          "format" : "date-time",
          "type" : "string"
        },
        "customerUUID" : {
          "description" : "Customer UUID that owns this backup",
          "format" : "uuid",
          "type" : "string"
        },
        "expiry" : {
          "description" : "Expiry time (unix timestamp) of the backup",
          "format" : "date-time",
          "type" : "string"
        },
        "expiryTimeUnit" : {
          "description" : "Time unit for backup expiry time",
          "enum" : [ "NANOSECONDS", "MICROSECONDS", "MILLISECONDS", "SECONDS", "MINUTES", "HOURS", "DAYS", "MONTHS", "YEARS" ],
          "type" : "string"
        },
        "scheduleUUID" : {
          "description" : "Schedule UUID, if this backup is part of a schedule",
          "format" : "uuid",
          "type" : "string"
        },
        "state" : {
          "description" : "State of the backup",
          "enum" : [ "InProgress", "Completed", "Failed", "Deleted", "Skipped", "FailedToDelete", "Stopped", "DeleteInProgress", "QueuedForDeletion" ],
          "example" : "DELETED",
          "readOnly" : true,
          "type" : "string"
        },
        "storageConfigUUID" : {
          "description" : "Storage Config UUID that created this backup",
          "format" : "uuid",
          "type" : "string"
        },
        "taskUUID" : {
          "description" : "Backup UUID",
          "format" : "uuid",
          "readOnly" : true,
          "type" : "string"
        },
        "universeName" : {
          "description" : "Universe name that created this backup",
          "type" : "string"
        },
        "universeUUID" : {
          "description" : "Universe UUID that created this backup",
          "format" : "uuid",
          "type" : "string"
        },
        "updateTime" : {
          "format" : "date-time",
          "type" : "string"
        },
        "version" : {
          "description" : "Version of the backup in a category",
          "enum" : [ "V1", "V2" ],
          "type" : "string"
        }
      },
      "required" : [ "createTime", "updateTime" ],
      "type" : "object"
    },
    "BackupApiFilter" : {
      "properties" : {
        "dateRangeEnd" : {
          "format" : "date-time",
          "type" : "string"
        },
        "dateRangeStart" : {
          "format" : "date-time",
          "type" : "string"
        },
        "keyspaceList" : {
          "items" : {
            "type" : "string"
          },
          "type" : "array",
          "uniqueItems" : true
        },
        "onlyShowDeletedConfigs" : {
          "type" : "boolean"
        },
        "onlyShowDeletedUniverses" : {
          "type" : "boolean"
        },
        "scheduleUUIDList" : {
          "items" : {
            "format" : "uuid",
            "type" : "string"
          },
          "type" : "array",
          "uniqueItems" : true
        },
        "states" : {
          "items" : {
            "enum" : [ "InProgress", "Completed", "Failed", "Deleted", "Skipped", "FailedToDelete", "Stopped", "DeleteInProgress", "QueuedForDeletion" ],
            "type" : "string"
          },
          "type" : "array",
          "uniqueItems" : true
        },
        "storageConfigUUIDList" : {
          "items" : {
            "format" : "uuid",
            "type" : "string"
          },
          "type" : "array",
          "uniqueItems" : true
        },
        "universeNameList" : {
          "items" : {
            "type" : "string"
          },
          "type" : "array",
          "uniqueItems" : true
        },
        "universeUUIDList" : {
          "items" : {
            "format" : "uuid",
            "type" : "string"
          },
          "type" : "array",
          "uniqueItems" : true
        }
      },
      "required" : [ "dateRangeEnd", "dateRangeStart", "keyspaceList", "onlyShowDeletedConfigs", "onlyShowDeletedUniverses", "scheduleUUIDList", "states", "storageConfigUUIDList", "universeNameList", "universeUUIDList" ],
      "type" : "object"
    },
    "BackupPagedApiQuery" : {
      "properties" : {
        "direction" : {
          "enum" : [ "ASC", "DESC" ],
          "type" : "string"
        },
        "filter" : {
          "$ref" : "#/definitions/BackupApiFilter"
        },
        "limit" : {
          "format" : "int32",
          "type" : "integer"
        },
        "needTotalCount" : {
          "type" : "boolean"
        },
        "offset" : {
          "format" : "int32",
          "type" : "integer"
        },
        "sortBy" : {
          "enum" : [ "createTime" ],
          "type" : "string"
        }
      },
      "required" : [ "direction", "filter", "limit", "needTotalCount", "offset", "sortBy" ],
      "type" : "object"
    },
    "BackupPagedApiResponse" : {
      "properties" : {
        "entities" : {
          "items" : {
            "$ref" : "#/definitions/BackupResp"
          },
          "type" : "array"
        },
        "hasNext" : {
          "type" : "boolean"
        },
        "hasPrev" : {
          "type" : "boolean"
        },
        "totalCount" : {
          "format" : "int32",
          "type" : "integer"
        }
      },
      "required" : [ "entities", "hasNext", "hasPrev", "totalCount" ],
      "type" : "object"
    },
    "BackupRequestParams" : {
      "description" : "Backup table parameters",
      "properties" : {
        "alterLoadBalancer" : {
          "description" : "Alter load balancer state",
          "type" : "boolean"
        },
        "backupType" : {
          "description" : "Backup type",
          "enum" : [ "YQL_TABLE_TYPE", "REDIS_TABLE_TYPE", "PGSQL_TABLE_TYPE", "TRANSACTION_STATUS_TABLE_TYPE" ],
          "type" : "string"
        },
        "cmkArn" : {
          "description" : "Amazon Resource Name (ARN) of the CMK",
          "type" : "string"
        },
        "communicationPorts" : {
          "$ref" : "#/definitions/CommunicationPorts",
          "description" : "Communication ports"
        },
        "cronExpression" : {
          "description" : "Cron expression for a recurring backup",
          "type" : "string"
        },
        "customerUUID" : {
          "description" : "Customer UUID",
          "format" : "uuid",
          "type" : "string"
        },
        "deviceInfo" : {
          "$ref" : "#/definitions/DeviceInfo",
          "description" : "Device information"
        },
        "disableChecksum" : {
          "description" : "Disable checksum",
          "type" : "boolean"
        },
        "disableParallelism" : {
          "description" : "Don't add -m flag during gsutil upload dir command",
          "type" : "boolean"
        },
        "enableVerboseLogs" : {
          "description" : "Is verbose logging enabled",
          "type" : "boolean"
        },
        "encryptionAtRestConfig" : {
          "$ref" : "#/definitions/EncryptionAtRestConfig",
          "description" : "Encryption at rest configation"
        },
        "errorString" : {
          "description" : "Error message",
          "type" : "string"
        },
        "expectedUniverseVersion" : {
          "description" : "Expected universe version",
          "format" : "int32",
          "type" : "integer"
        },
        "expiryTimeUnit" : {
          "description" : "Time unit for backup expiry time",
          "enum" : [ "NANOSECONDS", "MICROSECONDS", "MILLISECONDS", "SECONDS", "MINUTES", "HOURS", "DAYS", "MONTHS", "YEARS" ],
          "type" : "string"
        },
        "extraDependencies" : {
          "$ref" : "#/definitions/ExtraDependencies",
          "description" : "Extra dependencies"
        },
        "firstTry" : {
          "description" : "Whether this task has been tried before",
          "type" : "boolean"
        },
        "frequencyTimeUnit" : {
          "description" : "Time unit for user input schedule frequency",
          "enum" : [ "NANOSECONDS", "MICROSECONDS", "MILLISECONDS", "SECONDS", "MINUTES", "HOURS", "DAYS", "MONTHS", "YEARS" ],
          "type" : "string"
        },
        "ignoreErrors" : {
          "description" : "Should table backup errors be ignored",
          "type" : "boolean"
        },
        "keyspaceTableList" : {
          "description" : "Backup info",
          "items" : {
            "$ref" : "#/definitions/KeyspaceTable"
          },
          "type" : "array"
        },
        "kmsConfigUUID" : {
          "description" : "KMS configuration UUID",
          "format" : "uuid",
          "type" : "string"
        },
        "minNumBackupsToRetain" : {
          "description" : "Minimum number of backups to retain for a particular backup schedule",
          "format" : "int32",
          "type" : "integer"
        },
        "nodeDetailsSet" : {
          "description" : "Node details",
          "items" : {
            "$ref" : "#/definitions/NodeDetails"
          },
          "type" : "array",
          "uniqueItems" : true
        },
        "nodeExporterUser" : {
          "description" : "Node exporter user",
          "type" : "string"
        },
        "parallelism" : {
          "description" : "Number of concurrent commands to run on nodes over SSH",
          "format" : "int32",
          "type" : "integer"
        },
        "previousTaskUUID" : {
          "description" : "Previous task UUID only if this task is a retry",
          "format" : "uuid",
          "type" : "string"
        },
        "scheduleName" : {
          "description" : "Schedule Name",
          "type" : "string"
        },
        "scheduleUUID" : {
          "description" : "Schedule UUID",
          "format" : "uuid",
          "type" : "string"
        },
        "schedulingFrequency" : {
          "description" : "Frequency to run the backup, in milliseconds",
          "format" : "int64",
          "type" : "integer"
        },
        "sourceXClusterConfigs" : {
          "description" : "The source universe's xcluster replication relationships",
          "items" : {
            "format" : "uuid",
            "type" : "string"
          },
          "readOnly" : true,
          "type" : "array"
        },
        "sse" : {
          "description" : "Is SSE",
          "type" : "boolean"
        },
        "storageConfigUUID" : {
          "description" : "Storage configuration UUID",
          "format" : "uuid",
          "type" : "string"
        },
        "targetXClusterConfigs" : {
          "description" : "The target universe's xcluster replication relationships",
          "items" : {
            "format" : "uuid",
            "type" : "string"
          },
          "readOnly" : true,
          "type" : "array"
        },
        "timeBeforeDelete" : {
          "description" : "Time before deleting the backup from storage, in milliseconds",
          "format" : "int64",
          "type" : "integer"
        },
        "universeUUID" : {
          "description" : "Universe UUID",
          "format" : "uuid",
          "type" : "string"
        },
        "useTablespaces" : {
          "description" : "Is tablespaces information included",
          "type" : "boolean"
        },
        "ybPrevSoftwareVersion" : {
          "description" : "Previous software version",
          "type" : "string"
        }
      },
      "required" : [ "storageConfigUUID", "universeUUID" ],
      "type" : "object"
    },
    "BackupResp" : {
      "properties" : {
        "backupType" : {
          "enum" : [ "YQL_TABLE_TYPE", "REDIS_TABLE_TYPE", "PGSQL_TABLE_TYPE", "TRANSACTION_STATUS_TABLE_TYPE" ],
          "type" : "string"
        },
        "backupUUID" : {
          "format" : "uuid",
          "type" : "string"
        },
        "completionTime" : {
          "format" : "date-time",
          "type" : "string"
        },
        "createTime" : {
          "format" : "date-time",
          "type" : "string"
        },
        "customerUUID" : {
          "format" : "uuid",
          "type" : "string"
        },
        "expiryTime" : {
          "format" : "date-time",
          "type" : "string"
        },
        "isFullBackup" : {
          "type" : "boolean"
        },
        "isStorageConfigPresent" : {
          "type" : "boolean"
        },
        "isUniversePresent" : {
          "type" : "boolean"
        },
        "kmsConfigUUID" : {
          "format" : "uuid",
          "type" : "string"
        },
        "onDemand" : {
          "type" : "boolean"
        },
        "responseList" : {
          "items" : {
            "$ref" : "#/definitions/KeyspaceTablesList"
          },
          "type" : "array",
          "uniqueItems" : true
        },
        "scheduleUUID" : {
          "format" : "uuid",
          "type" : "string"
        },
        "sse" : {
          "type" : "boolean"
        },
        "state" : {
          "enum" : [ "InProgress", "Completed", "Failed", "Deleted", "Skipped", "FailedToDelete", "Stopped", "DeleteInProgress", "QueuedForDeletion" ],
          "type" : "string"
        },
        "storageConfigType" : {
          "enum" : [ "S3", "NFS", "AZ", "GCS", "FILE" ],
          "type" : "string"
        },
        "storageConfigUUID" : {
          "format" : "uuid",
          "type" : "string"
        },
        "taskUUID" : {
          "format" : "uuid",
          "type" : "string"
        },
        "totalBackupSizeInBytes" : {
          "format" : "int64",
          "type" : "integer"
        },
        "universeName" : {
          "type" : "string"
        },
        "universeUUID" : {
          "format" : "uuid",
          "type" : "string"
        },
        "updateTime" : {
          "format" : "date-time",
          "type" : "string"
        }
      },
      "required" : [ "backupType", "backupUUID", "completionTime", "createTime", "customerUUID", "expiryTime", "isFullBackup", "isStorageConfigPresent", "isUniversePresent", "kmsConfigUUID", "onDemand", "responseList", "scheduleUUID", "sse", "state", "storageConfigType", "storageConfigUUID", "taskUUID", "totalBackupSizeInBytes", "universeName", "universeUUID", "updateTime" ],
      "type" : "object"
    },
    "BackupStorageInfo" : {
      "description" : "Backup Storage Info for doing restore operation",
      "properties" : {
        "backupType" : {
          "description" : "Backup type",
          "enum" : [ "YQL_TABLE_TYPE", "REDIS_TABLE_TYPE", "PGSQL_TABLE_TYPE", "TRANSACTION_STATUS_TABLE_TYPE" ],
          "type" : "string"
        },
        "keyspace" : {
          "description" : "Keyspace name",
          "type" : "string"
        },
        "sse" : {
          "description" : "Is SSE",
          "type" : "boolean"
        },
        "storageLocation" : {
          "description" : "Storage location",
          "type" : "string"
        },
        "tableNameList" : {
          "description" : "Tables",
          "items" : {
            "type" : "string"
          },
          "type" : "array"
        }
      },
      "type" : "object"
    },
    "BackupTableParams" : {
      "description" : "Backup table parameters",
      "properties" : {
        "actionType" : {
          "description" : "Action type",
          "enum" : [ "CREATE", "RESTORE", "RESTORE_KEYS", "DELETE" ],
          "type" : "string"
        },
        "alterLoadBalancer" : {
          "description" : "Alter load balancer state",
          "type" : "boolean"
        },
        "backupList" : {
          "description" : "Backups",
          "items" : {
            "$ref" : "#/definitions/BackupTableParams"
          },
          "type" : "array"
        },
        "backupSizeInBytes" : {
          "description" : "Backup size in bytes",
          "format" : "int64",
          "type" : "integer"
        },
        "backupType" : {
          "description" : "Backup type",
          "enum" : [ "YQL_TABLE_TYPE", "REDIS_TABLE_TYPE", "PGSQL_TABLE_TYPE", "TRANSACTION_STATUS_TABLE_TYPE" ],
          "type" : "string"
        },
        "backupUuid" : {
          "description" : "Backup UUID",
          "format" : "uuid",
          "type" : "string"
        },
        "cmkArn" : {
          "description" : "Amazon Resource Name (ARN) of the CMK",
          "type" : "string"
        },
        "communicationPorts" : {
          "$ref" : "#/definitions/CommunicationPorts",
          "description" : "Communication ports"
        },
        "cronExpression" : {
          "description" : "Cron expression for a recurring backup",
          "type" : "string"
        },
        "customerUuid" : {
          "description" : "Customer UUID",
          "format" : "uuid",
          "type" : "string"
        },
        "deviceInfo" : {
          "$ref" : "#/definitions/DeviceInfo",
          "description" : "Device information"
        },
        "disableChecksum" : {
          "description" : "Disable checksum",
          "type" : "boolean"
        },
        "disableParallelism" : {
          "description" : "Don't add -m flag during gsutil upload dir command",
          "type" : "boolean"
        },
        "enableVerboseLogs" : {
          "description" : "Is verbose logging enabled",
          "type" : "boolean"
        },
        "encryptionAtRestConfig" : {
          "$ref" : "#/definitions/EncryptionAtRestConfig",
          "description" : "Encryption at rest configation"
        },
        "errorString" : {
          "description" : "Error message",
          "type" : "string"
        },
        "expectedUniverseVersion" : {
          "description" : "Expected universe version",
          "format" : "int32",
          "type" : "integer"
        },
        "expiryTimeUnit" : {
          "description" : "Time unit for backup expiry time",
          "enum" : [ "NANOSECONDS", "MICROSECONDS", "MILLISECONDS", "SECONDS", "MINUTES", "HOURS", "DAYS", "MONTHS", "YEARS" ],
          "type" : "string"
        },
        "extraDependencies" : {
          "$ref" : "#/definitions/ExtraDependencies",
          "description" : "Extra dependencies"
        },
        "firstTry" : {
          "description" : "Whether this task has been tried before",
          "type" : "boolean"
        },
        "ignoreErrors" : {
          "description" : "Should table backup errors be ignored",
          "type" : "boolean"
        },
        "isFullBackup" : {
          "description" : "Full Table type backup",
          "type" : "boolean"
        },
        "keyspace" : {
          "description" : "Key space",
          "type" : "string"
        },
        "kmsConfigUUID" : {
          "description" : "KMS configuration UUID",
          "format" : "uuid",
          "type" : "string"
        },
        "minNumBackupsToRetain" : {
          "description" : "Minimum number of backups to retain for a particular backup schedule",
          "format" : "int32",
          "type" : "integer"
        },
        "newOwner" : {
          "description" : "User name of the new tables owner",
          "type" : "string"
        },
        "nodeDetailsSet" : {
          "description" : "Node details",
          "items" : {
            "$ref" : "#/definitions/NodeDetails"
          },
          "type" : "array",
          "uniqueItems" : true
        },
        "nodeExporterUser" : {
          "description" : "Node exporter user",
          "type" : "string"
        },
        "oldOwner" : {
          "description" : "User name of the current tables owner",
          "type" : "string"
        },
        "parallelism" : {
          "description" : "Number of concurrent commands to run on nodes over SSH",
          "format" : "int32",
          "type" : "integer"
        },
        "previousTaskUUID" : {
          "description" : "Previous task UUID only if this task is a retry",
          "format" : "uuid",
          "type" : "string"
        },
        "regionLocations" : {
          "description" : "Per region locations",
          "items" : {
            "$ref" : "#/definitions/RegionLocations"
          },
          "type" : "array"
        },
        "restoreTimeStamp" : {
          "description" : "Restore TimeStamp",
          "type" : "string"
        },
        "scheduleUUID" : {
          "description" : "Schedule UUID",
          "format" : "uuid",
          "type" : "string"
        },
        "schedulingFrequency" : {
          "description" : "Frequency to run the backup, in milliseconds",
          "format" : "int64",
          "type" : "integer"
        },
        "sourceXClusterConfigs" : {
          "description" : "The source universe's xcluster replication relationships",
          "items" : {
            "format" : "uuid",
            "type" : "string"
          },
          "readOnly" : true,
          "type" : "array"
        },
        "sse" : {
          "description" : "Is SSE",
          "type" : "boolean"
        },
        "storageConfigType" : {
          "description" : "Type of backup storage config",
          "enum" : [ "S3", "NFS", "AZ", "GCS", "FILE" ],
          "type" : "string"
        },
        "storageConfigUUID" : {
          "description" : "Storage configuration UUID",
          "format" : "uuid",
          "type" : "string"
        },
        "storageLocation" : {
          "description" : "Storage location",
          "type" : "string"
        },
        "tableName" : {
          "description" : "Table name",
          "type" : "string"
        },
        "tableNameList" : {
          "description" : "Tables",
          "items" : {
            "type" : "string"
          },
          "type" : "array"
        },
        "tableUUID" : {
          "description" : "Table UUID",
          "format" : "uuid",
          "type" : "string"
        },
        "tableUUIDList" : {
          "description" : "Table UUIDs",
          "items" : {
            "format" : "uuid",
            "type" : "string"
          },
          "type" : "array"
        },
        "targetXClusterConfigs" : {
          "description" : "The target universe's xcluster replication relationships",
          "items" : {
            "format" : "uuid",
            "type" : "string"
          },
          "readOnly" : true,
          "type" : "array"
        },
        "timeBeforeDelete" : {
          "description" : "Time before deleting the backup from storage, in milliseconds",
          "format" : "int64",
          "type" : "integer"
        },
        "transactionalBackup" : {
          "description" : "Is backup transactional across tables",
          "type" : "boolean"
        },
        "universeUUID" : {
          "description" : "Associated universe UUID",
          "format" : "uuid",
          "type" : "string"
        },
        "useTablespaces" : {
          "description" : "Is tablespaces information included",
          "type" : "boolean"
        },
        "ybPrevSoftwareVersion" : {
          "description" : "Previous software version",
          "type" : "string"
        }
      },
      "required" : [ "storageConfigUUID" ],
      "type" : "object"
    },
    "BulkImportParams" : {
      "description" : "Bulk import parameters",
      "properties" : {
        "cmkArn" : {
          "description" : "Amazon Resource Name (ARN) of the CMK",
          "type" : "string"
        },
        "communicationPorts" : {
          "$ref" : "#/definitions/CommunicationPorts",
          "description" : "Communication ports"
        },
        "deviceInfo" : {
          "$ref" : "#/definitions/DeviceInfo",
          "description" : "Device information"
        },
        "encryptionAtRestConfig" : {
          "$ref" : "#/definitions/EncryptionAtRestConfig",
          "description" : "Encryption at rest configation"
        },
        "errorString" : {
          "description" : "Error message",
          "type" : "string"
        },
        "expectedUniverseVersion" : {
          "description" : "Expected universe version",
          "format" : "int32",
          "type" : "integer"
        },
        "extraDependencies" : {
          "$ref" : "#/definitions/ExtraDependencies",
          "description" : "Extra dependencies"
        },
        "firstTry" : {
          "description" : "Whether this task has been tried before",
          "type" : "boolean"
        },
        "instanceCount" : {
          "description" : "Instance count",
          "format" : "int32",
          "type" : "integer"
        },
        "keyspace" : {
          "description" : "Key space",
          "type" : "string"
        },
        "nodeDetailsSet" : {
          "description" : "Node details",
          "items" : {
            "$ref" : "#/definitions/NodeDetails"
          },
          "type" : "array",
          "uniqueItems" : true
        },
        "nodeExporterUser" : {
          "description" : "Node exporter user",
          "type" : "string"
        },
        "previousTaskUUID" : {
          "description" : "Previous task UUID only if this task is a retry",
          "format" : "uuid",
          "type" : "string"
        },
        "s3Bucket" : {
          "description" : "S3 bucket URL",
          "type" : "string"
        },
        "sourceXClusterConfigs" : {
          "description" : "The source universe's xcluster replication relationships",
          "items" : {
            "format" : "uuid",
            "type" : "string"
          },
          "readOnly" : true,
          "type" : "array"
        },
        "sse" : {
          "description" : "Is SSE",
          "type" : "boolean"
        },
        "tableName" : {
          "description" : "Table name",
          "type" : "string"
        },
        "tableUUID" : {
          "description" : "Table UUID",
          "format" : "uuid",
          "type" : "string"
        },
        "targetXClusterConfigs" : {
          "description" : "The target universe's xcluster replication relationships",
          "items" : {
            "format" : "uuid",
            "type" : "string"
          },
          "readOnly" : true,
          "type" : "array"
        },
        "universeUUID" : {
          "description" : "Associated universe UUID",
          "format" : "uuid",
          "type" : "string"
        },
        "ybPrevSoftwareVersion" : {
          "description" : "Previous software version",
          "type" : "string"
        }
      },
      "required" : [ "s3Bucket" ],
      "type" : "object"
    },
    "BundleDetails" : {
      "properties" : {
        "components" : {
          "items" : {
            "enum" : [ "UniverseLogs", "ApplicationLogs", "OutputFiles", "ErrorFiles", "GFlags", "Instance", "ConsensusMeta", "TabletMeta" ],
            "type" : "string"
          },
          "type" : "array"
        }
      },
      "required" : [ "components" ],
      "type" : "object"
    },
    "CertificateDetails" : {
      "properties" : {
        "yugabytedb.crt" : {
          "type" : "string"
        },
        "yugabytedb.key" : {
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "CertificateInfo" : {
      "description" : "SSL certificate used by the universe",
      "properties" : {
        "certType" : {
          "description" : "Type of the certificate",
          "enum" : [ "SelfSigned", "CustomCertHostPath", "CustomServerCert", "HashicorpVault" ],
          "example" : "SelfSigned",
          "type" : "string"
        },
        "certificate" : {
          "description" : "Certificate path",
          "example" : "/opt/yugaware/certs/.../ca.root.cert",
          "type" : "string"
        },
        "checksum" : {
          "description" : "The certificate file's checksum",
          "readOnly" : true,
          "type" : "string"
        },
        "customCertPathParams" : {
          "$ref" : "#/definitions/CustomCertInfo"
        },
        "customHCPKICertInfo" : {
          "$ref" : "#/definitions/HashicorpVaultConfigParams"
        },
        "customServerCertInfo" : {
          "$ref" : "#/definitions/CustomServerCertInfo"
        },
        "customerUUID" : {
          "description" : "Customer UUID of the backup which it belongs to",
          "format" : "uuid",
          "type" : "string"
        },
        "expiryDate" : {
          "description" : "The certificate's expiry date",
          "format" : "date-time",
          "type" : "string"
        },
        "inUse" : {
          "description" : "Indicates whether the certificate is in use. This value is `true` if the universe contains a reference to the certificate.",
          "readOnly" : true,
          "type" : "boolean"
        },
        "label" : {
          "description" : "Certificate label",
          "example" : "yb-admin-example",
          "type" : "string"
        },
        "privateKey" : {
          "description" : "Private key path",
          "example" : "/opt/yugaware/.../example.key.pem",
          "type" : "string"
        },
        "startDate" : {
          "description" : "The certificate's creation date",
          "format" : "date-time",
          "type" : "string"
        },
        "universeDetails" : {
          "description" : "Associated universe details for the certificate",
          "items" : {
            "$ref" : "#/definitions/UniverseDetailSubset"
          },
          "readOnly" : true,
          "type" : "array"
        },
        "uuid" : {
          "description" : "Certificate UUID",
          "format" : "uuid",
          "readOnly" : true,
          "type" : "string"
        }
      },
      "required" : [ "customCertPathParams", "customHCPKICertInfo", "customServerCertInfo" ],
      "type" : "object"
    },
    "CertificateParams" : {
      "properties" : {
        "certContent" : {
          "type" : "string"
        },
        "certExpiry" : {
          "format" : "int64",
          "type" : "integer"
        },
        "certStart" : {
          "format" : "int64",
          "type" : "integer"
        },
        "certType" : {
          "enum" : [ "SelfSigned", "CustomCertHostPath", "CustomServerCert", "HashicorpVault" ],
          "type" : "string"
        },
        "customCertInfo" : {
          "$ref" : "#/definitions/CustomCertInfo"
        },
        "customServerCertData" : {
          "$ref" : "#/definitions/CustomServerCertData"
        },
        "hcVaultCertParams" : {
          "$ref" : "#/definitions/HashicorpVaultConfigParams"
        },
        "keyContent" : {
          "type" : "string"
        },
        "label" : {
          "type" : "string"
        }
      },
      "required" : [ "certContent", "certExpiry", "certStart", "certType", "customCertInfo", "customServerCertData", "hcVaultCertParams", "keyContent", "label" ],
      "type" : "object"
    },
    "CertsRotateParams" : {
      "properties" : {
        "allowInsecure" : {
          "type" : "boolean"
        },
        "backupInProgress" : {
          "type" : "boolean"
        },
        "capability" : {
          "enum" : [ "READ_ONLY", "EDITS_ALLOWED" ],
          "type" : "string"
        },
        "clientRootCA" : {
          "format" : "uuid",
          "type" : "string"
        },
        "clusters" : {
          "items" : {
            "$ref" : "#/definitions/Cluster"
          },
          "type" : "array"
        },
        "cmkArn" : {
          "description" : "Amazon Resource Name (ARN) of the CMK",
          "type" : "string"
        },
        "communicationPorts" : {
          "$ref" : "#/definitions/CommunicationPorts",
          "description" : "Communication ports"
        },
        "currentClusterType" : {
          "enum" : [ "PRIMARY", "ASYNC" ],
          "type" : "string"
        },
        "deviceInfo" : {
          "$ref" : "#/definitions/DeviceInfo",
          "description" : "Device information"
        },
        "encryptionAtRestConfig" : {
          "$ref" : "#/definitions/EncryptionAtRestConfig",
          "description" : "Encryption at rest configation"
        },
        "errorString" : {
          "description" : "Error message",
          "type" : "string"
        },
        "expectedUniverseVersion" : {
          "description" : "Expected universe version",
          "format" : "int32",
          "type" : "integer"
        },
        "extraDependencies" : {
          "$ref" : "#/definitions/ExtraDependencies",
          "description" : "Extra dependencies"
        },
        "firstTry" : {
          "description" : "Whether this task has been tried before",
          "type" : "boolean"
        },
        "importedState" : {
          "enum" : [ "NONE", "STARTED", "MASTERS_ADDED", "TSERVERS_ADDED", "IMPORTED" ],
          "type" : "string"
        },
        "itestS3PackagePath" : {
          "type" : "string"
        },
        "kubernetesUpgradeSupported" : {
          "type" : "boolean"
        },
        "nextClusterIndex" : {
          "format" : "int32",
          "type" : "integer"
        },
        "nodeDetailsSet" : {
          "description" : "Node details",
          "items" : {
            "$ref" : "#/definitions/NodeDetails"
          },
          "type" : "array",
          "uniqueItems" : true
        },
        "nodeExporterUser" : {
          "description" : "Node exporter user",
          "type" : "string"
        },
        "nodePrefix" : {
          "type" : "string"
        },
        "nodesResizeAvailable" : {
          "type" : "boolean"
        },
        "previousTaskUUID" : {
          "description" : "Previous task UUID only if this task is a retry",
          "format" : "uuid",
          "type" : "string"
        },
        "remotePackagePath" : {
          "type" : "string"
        },
        "resetAZConfig" : {
          "type" : "boolean"
        },
        "rootAndClientRootCASame" : {
          "type" : "boolean"
        },
        "rootCA" : {
          "format" : "uuid",
          "type" : "string"
        },
        "selfSignedClientCertRotate" : {
          "type" : "boolean"
        },
        "selfSignedServerCertRotate" : {
          "type" : "boolean"
        },
        "setTxnTableWaitCountFlag" : {
          "type" : "boolean"
        },
        "sleepAfterMasterRestartMillis" : {
          "format" : "int32",
          "type" : "integer"
        },
        "sleepAfterTServerRestartMillis" : {
          "format" : "int32",
          "type" : "integer"
        },
        "sourceXClusterConfigs" : {
          "description" : "The source universe's xcluster replication relationships",
          "items" : {
            "format" : "uuid",
            "type" : "string"
          },
          "readOnly" : true,
          "type" : "array"
        },
        "targetXClusterConfigs" : {
          "description" : "The target universe's xcluster replication relationships",
          "items" : {
            "format" : "uuid",
            "type" : "string"
          },
          "readOnly" : true,
          "type" : "array"
        },
        "universePaused" : {
          "type" : "boolean"
        },
        "universeUUID" : {
          "description" : "Associated universe UUID",
          "format" : "uuid",
          "type" : "string"
        },
        "updateInProgress" : {
          "type" : "boolean"
        },
        "updateSucceeded" : {
          "type" : "boolean"
        },
        "updatingTask" : {
          "enum" : [ "CloudBootstrap", "CloudCleanup", "CreateCassandraTable", "CreateUniverse", "ReadOnlyClusterCreate", "ReadOnlyKubernetesClusterCreate", "ReadOnlyClusterDelete", "CreateKubernetesUniverse", "DestroyUniverse", "PauseUniverse", "ResumeUniverse", "DestroyKubernetesUniverse", "DeleteTable", "BackupUniverse", "RestoreBackup", "MultiTableBackup", "CreateBackup", "EditUniverse", "EditKubernetesUniverse", "ExternalScript", "KubernetesProvision", "ImportIntoTable", "UpgradeUniverse", "RestartUniverse", "SoftwareUpgrade", "SoftwareKubernetesUpgrade", "GFlagsUpgrade", "GFlagsKubernetesUpgrade", "CertsRotate", "CertsRotateKubernetesUpgrade", "TlsToggle", "VMImageUpgrade", "SystemdUpgrade", "CreateRootVolumes", "ReplaceRootVolume", "ChangeInstanceType", "PersistResizeNode", "PersistSystemdUpgrade", "UpdateNodeDetails", "UpgradeKubernetesUniverse", "DeleteNodeFromUniverse", "StopNodeInUniverse", "StartNodeInUniverse", "AddNodeToUniverse", "RemoveNodeFromUniverse", "ReleaseInstanceFromUniverse", "SetUniverseKey", "SetKubernetesUniverseKey", "CreateKMSConfig", "EditKMSConfig", "DeleteKMSConfig", "UpdateDiskSize", "StartMasterOnNode", "CreateXClusterConfig", "EditXClusterConfig", "DeleteXClusterConfig", "SyncXClusterConfig", "CreateSupportBundle", "AnsibleClusterServerCtl", "AnsibleConfigureServers", "AnsibleDestroyServer", "PauseServer", "ResumeServer", "AnsibleSetupServer", "AnsibleCreateServer", "PrecheckNode", "PrecheckNodeDetached", "AnsibleUpdateNodeInfo", "BulkImport", "ChangeMasterConfig", "ChangeAdminPassword", "CreateTable", "DeleteNode", "DeleteBackup", "DeleteBackupYb", "DeleteCustomerConfig", "DeleteCustomerStorageConfig", "UpdateNodeProcess", "DeleteTableFromUniverse", "LoadBalancerStateChange", "ModifyBlackList", "ManipulateDnsRecordTask", "RemoveUniverseEntry", "SetFlagInMemory", "SetNodeState", "SwamperTargetsFileUpdate", "UniverseUpdateSucceeded", "UpdateAndPersistGFlags", "UpdatePlacementInfo", "UpdateSoftwareVersion", "WaitForDataMove", "WaitForLeaderBlacklistCompletion", "WaitForFollowerLag", "WaitForLoadBalance", "WaitForMasterLeader", "WaitForServer", "WaitForTServerHeartBeats", "DeleteClusterFromUniverse", "InstanceActions", "WaitForServerReady", "RunExternalScript", "XClusterConfigSetup", "XClusterConfigSetStatus", "XClusterConfigModifyTables", "XClusterConfigRename", "XClusterConfigDelete", "XClusterConfigSync", "XClusterConfigUpdateMasterAddresses", "CloudAccessKeyCleanup", "CloudAccessKeySetup", "CloudInitializer", "CloudProviderCleanup", "CloudRegionCleanup", "CloudRegionSetup", "CloudSetup", "BackupTable", "BackupTableYb", "BackupUniverseKeys", "RestoreBackupYb", "RestoreUniverseKeys", "RestoreUniverseKeysYb", "WaitForLeadersOnPreferredOnly", "EnableEncryptionAtRest", "DisableEncryptionAtRest", "DestroyEncryptionAtRest", "KubernetesCommandExecutor", "KubernetesWaitForPod", "KubernetesCheckNumPod", "SetActiveUniverseKeys", "CopyEncryptionKeyFile", "WaitForEncryptionKeyInMemory", "UnivSetCertificate", "CreateAlertDefinitions", "ManageAlertDefinitions", "UniverseSetTlsParams", "UniverseUpdateRootCert", "ResetUniverseVersion", "DeleteCertificate", "SetNodeStatus", "CheckMasterLeader", "CheckMasters", "CheckTServers", "WaitForTServerHBs", "CreatePrometheusSwamperConfig", "PreflightNodeCheck", "RunYsqlUpgrade", "ResizeNode", "CheckMemory", "UpdateMountedDisks", "TransferXClusterCerts", "CreateTableSpacesInUniverse", "CreateTableSpaces", "ThirdpartySoftwareUpgrade" ],
          "type" : "string"
        },
        "updatingTaskUUID" : {
          "format" : "uuid",
          "type" : "string"
        },
        "upgradeOption" : {
          "enum" : [ "Rolling", "Non-Rolling", "Non-Restart" ],
          "type" : "string"
        },
        "useNewHelmNamingStyle" : {
          "type" : "boolean"
        },
        "userAZSelected" : {
          "type" : "boolean"
        },
        "ybPrevSoftwareVersion" : {
          "description" : "Previous software version",
          "type" : "string"
        }
      },
      "required" : [ "clientRootCA", "clusters", "kubernetesUpgradeSupported", "rootAndClientRootCASame", "rootCA", "selfSignedClientCertRotate", "selfSignedServerCertRotate", "sleepAfterMasterRestartMillis", "sleepAfterTServerRestartMillis", "upgradeOption" ],
      "type" : "object"
    },
    "ClientCertParams" : {
      "properties" : {
        "certExpiry" : {
          "format" : "int64",
          "type" : "integer"
        },
        "certStart" : {
          "format" : "int64",
          "type" : "integer"
        },
        "username" : {
          "type" : "string"
        }
      },
      "required" : [ "certExpiry", "certStart", "username" ],
      "type" : "object"
    },
    "CloudSpecificInfo" : {
      "description" : "Node information reported by the cloud provider",
      "properties" : {
        "assignPublicIP" : {
          "description" : "True if the node has a public IP address assigned",
          "type" : "boolean"
        },
        "az" : {
          "description" : "The node's availability zone",
          "type" : "string"
        },
        "cloud" : {
          "description" : "The node's cloud provider",
          "type" : "string"
        },
        "instance_type" : {
          "description" : "The node's instance type",
          "type" : "string"
        },
        "mount_roots" : {
          "description" : "Mount roots",
          "type" : "string"
        },
        "private_dns" : {
          "description" : "The node's private DNS",
          "type" : "string"
        },
        "private_ip" : {
          "description" : "The node's private IP address",
          "type" : "string"
        },
        "public_dns" : {
          "description" : "The node's public DNS name",
          "type" : "string"
        },
        "public_ip" : {
          "description" : "The node's public IP address",
          "type" : "string"
        },
        "region" : {
          "description" : "The node's region",
          "type" : "string"
        },
        "secondary_private_ip" : {
          "description" : "Secondary Private IP",
          "type" : "string"
        },
        "secondary_subnet_id" : {
          "description" : "Secondary Subnet IP",
          "type" : "string"
        },
        "subnet_id" : {
          "description" : "ID of the subnet on which this node is deployed",
          "type" : "string"
        },
        "useTimeSync" : {
          "description" : "True if `use time sync` is enabled",
          "type" : "boolean"
        }
      },
      "type" : "object"
    },
    "Cluster" : {
      "properties" : {
        "clusterType" : {
          "enum" : [ "PRIMARY", "ASYNC" ],
          "type" : "string"
        },
        "index" : {
          "format" : "int32",
          "type" : "integer"
        },
        "placementInfo" : {
          "$ref" : "#/definitions/PlacementInfo"
        },
        "regions" : {
          "items" : {
            "$ref" : "#/definitions/Region"
          },
          "readOnly" : true,
          "type" : "array"
        },
        "userIntent" : {
          "$ref" : "#/definitions/UserIntent"
        },
        "uuid" : {
          "format" : "uuid",
          "type" : "string"
        }
      },
      "required" : [ "clusterType", "userIntent" ],
      "type" : "object"
    },
    "ColumnDetails" : {
      "description" : "Details of a CQL database column",
      "properties" : {
        "columnOrder" : {
          "description" : "Relative position (column order) for this column, in the table and in CQL commands",
          "format" : "int32",
          "type" : "integer"
        },
        "isClusteringKey" : {
          "description" : "True if this column is a clustering key",
          "type" : "boolean"
        },
        "isPartitionKey" : {
          "description" : "True if this column is a partition key",
          "type" : "boolean"
        },
        "keyType" : {
          "description" : "Column key type",
          "enum" : [ "TINYINT", "SMALLINT", "INT", "BIGINT", "VARCHAR", "BOOLEAN", "FLOAT", "DOUBLE_PRECISION", "BLOB", "TIMESTAMP", "DECIMAL", "VARINT", "INET", "LIST", "MAP", "SET", "UUID", "TIMEUUID", "FROZEN", "DATE", "TIME", "JSONB", "USER_DEFINED_TYPE" ],
          "type" : "string"
        },
        "name" : {
          "description" : "Column name",
          "type" : "string"
        },
        "sortOrder" : {
          "description" : "Sort order for this column. Valid only for clustering columns.",
          "enum" : [ "NONE", "ASC", "DESC" ],
          "type" : "string"
        },
        "type" : {
          "description" : "The column's data type",
          "enum" : [ "TINYINT", "SMALLINT", "INT", "BIGINT", "VARCHAR", "BOOLEAN", "FLOAT", "DOUBLE_PRECISION", "BLOB", "TIMESTAMP", "DECIMAL", "VARINT", "INET", "LIST", "MAP", "SET", "UUID", "TIMEUUID", "FROZEN", "DATE", "TIME", "JSONB", "USER_DEFINED_TYPE" ],
          "type" : "string"
        },
        "valueType" : {
          "description" : "Column value name",
          "enum" : [ "TINYINT", "SMALLINT", "INT", "BIGINT", "VARCHAR", "BOOLEAN", "FLOAT", "DOUBLE_PRECISION", "BLOB", "TIMESTAMP", "DECIMAL", "VARINT", "INET", "LIST", "MAP", "SET", "UUID", "TIMEUUID", "FROZEN", "DATE", "TIME", "JSONB", "USER_DEFINED_TYPE" ],
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "CommunicationPorts" : {
      "description" : "Communication ports",
      "properties" : {
        "masterHttpPort" : {
          "description" : "Master table HTTP port",
          "format" : "int32",
          "type" : "integer"
        },
        "masterRpcPort" : {
          "description" : "Master table RCP port",
          "format" : "int32",
          "type" : "integer"
        },
        "nodeExporterPort" : {
          "description" : "Node exporter port",
          "format" : "int32",
          "type" : "integer"
        },
        "redisServerHttpPort" : {
          "description" : "Redis HTTP port",
          "format" : "int32",
          "type" : "integer"
        },
        "redisServerRpcPort" : {
          "description" : "Redis RPC port",
          "format" : "int32",
          "type" : "integer"
        },
        "tserverHttpPort" : {
          "description" : "Tablet server HTTP port",
          "format" : "int32",
          "type" : "integer"
        },
        "tserverRpcPort" : {
          "description" : "Tablet server RPC port",
          "format" : "int32",
          "type" : "integer"
        },
        "yqlServerHttpPort" : {
          "description" : "YQL HTTP port",
          "format" : "int32",
          "type" : "integer"
        },
        "yqlServerRpcPort" : {
          "description" : "YQL RPC port",
          "format" : "int32",
          "type" : "integer"
        },
        "ysqlServerHttpPort" : {
          "description" : "YSQL HTTP port",
          "format" : "int32",
          "type" : "integer"
        },
        "ysqlServerRpcPort" : {
          "description" : "YSQL RPC port",
          "format" : "int32",
          "type" : "integer"
        }
      },
      "type" : "object"
    },
    "ConfigEntry" : {
      "description" : "Configuration entry",
      "properties" : {
        "inherited" : {
          "description" : "Is this configuration inherited?",
          "type" : "boolean"
        },
        "key" : {
          "description" : "Configuration key",
          "type" : "string"
        },
        "value" : {
          "description" : "Configuration value",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "CreateTablespaceParams" : {
      "properties" : {
        "tablespaceInfos" : {
          "description" : "Tablespaces to be created",
          "items" : {
            "$ref" : "#/definitions/TableSpaceInfo"
          },
          "maxItems" : 2147483647,
          "minItems" : 1,
          "type" : "array"
        }
      },
      "required" : [ "tablespaceInfos" ],
      "type" : "object"
    },
    "CustomCertInfo" : {
      "properties" : {
        "clientCertPath" : {
          "type" : "string"
        },
        "clientKeyPath" : {
          "type" : "string"
        },
        "nodeCertPath" : {
          "type" : "string"
        },
        "nodeKeyPath" : {
          "type" : "string"
        },
        "rootCertPath" : {
          "type" : "string"
        }
      },
      "required" : [ "clientCertPath", "clientKeyPath", "nodeCertPath", "nodeKeyPath", "rootCertPath" ],
      "type" : "object"
    },
    "CustomServerCertData" : {
      "properties" : {
        "serverCertContent" : {
          "type" : "string"
        },
        "serverKeyContent" : {
          "type" : "string"
        }
      },
      "required" : [ "serverCertContent", "serverKeyContent" ],
      "type" : "object"
    },
    "CustomServerCertInfo" : {
      "properties" : {
        "serverCert" : {
          "type" : "string"
        },
        "serverKey" : {
          "type" : "string"
        }
      },
      "required" : [ "serverCert", "serverKey" ],
      "type" : "object"
    },
    "Customer" : {
      "description" : "Customer information, including associated universes",
      "properties" : {
        "code" : {
          "description" : "Customer code",
          "example" : "admin",
          "type" : "string"
        },
        "creationDate" : {
          "description" : "Creation time",
          "example" : "2021-06-17T15:00:05-0400",
          "format" : "date-time",
          "readOnly" : true,
          "type" : "string"
        },
        "customerId" : {
          "description" : "Customer ID",
          "example" : 1,
          "format" : "int64",
          "readOnly" : true,
          "type" : "integer"
        },
        "name" : {
          "description" : "Name of customer",
          "example" : "sridhar",
          "type" : "string"
        },
        "universeUUIDs" : {
          "description" : "Universe UUIDs",
          "example" : "[c3595ca7-68a3-47f0-b1b2-1725886d5ed5, 9e0bb733-556c-4935-83dd-6b742a2c32e6]",
          "items" : {
            "format" : "uuid",
            "type" : "string"
          },
          "readOnly" : true,
          "type" : "array",
          "uniqueItems" : true
        },
        "uuid" : {
          "description" : "Customer UUID",
          "format" : "uuid",
          "readOnly" : true,
          "type" : "string"
        }
      },
      "required" : [ "code", "name" ],
      "type" : "object"
    },
    "CustomerAlertData" : {
      "description" : "Format of an alert, used by the API and UI to validate data against input constraints",
      "properties" : {
        "alertingData" : {
          "$ref" : "#/definitions/AlertingData"
        },
        "callhomeLevel" : {
          "type" : "string"
        },
        "code" : {
          "description" : "Alert code",
          "type" : "string"
        },
        "confirmPassword" : {
          "description" : "Email password confirmation",
          "example" : "XurenRknsc",
          "type" : "string"
        },
        "email" : {
          "description" : "Alert email address",
          "example" : "test@example.com",
          "type" : "string"
        },
        "features" : {
          "additionalProperties" : {
            "type" : "object"
          },
          "description" : "Features",
          "type" : "object"
        },
        "name" : {
          "description" : "Alert name",
          "example" : "Test alert",
          "type" : "string"
        },
        "password" : {
          "description" : "Email password",
          "example" : "XurenRknsc",
          "type" : "string"
        },
        "smtpData" : {
          "$ref" : "#/definitions/SmtpData"
        }
      },
      "required" : [ "alertingData", "callhomeLevel", "smtpData" ],
      "type" : "object"
    },
    "CustomerConfig" : {
      "description" : "Customer configuration. Includes storage, alerts, password policy, and call-home level.",
      "properties" : {
        "configName" : {
          "description" : "Config name",
          "example" : "backup20-01-2021",
          "maxLength" : 100,
          "minLength" : 1,
          "type" : "string"
        },
        "configUUID" : {
          "description" : "Config UUID",
          "format" : "uuid",
          "readOnly" : true,
          "type" : "string"
        },
        "customerUUID" : {
          "description" : "Customer UUID",
          "format" : "uuid",
          "readOnly" : true,
          "type" : "string"
        },
        "data" : {
          "description" : "Configuration data",
          "example" : "{\"AWS_ACCESS_KEY_ID\": \"AK****************ZD\"}",
          "type" : "object"
        },
        "name" : {
          "description" : "Name",
          "example" : "S3",
          "maxLength" : 50,
          "minLength" : 1,
          "type" : "string"
        },
        "state" : {
          "description" : "state of the customerConfig. Possible values are Active, QueuedForDeletion.",
          "enum" : [ "Active", "QueuedForDeletion" ],
          "readOnly" : true,
          "type" : "string"
        },
        "type" : {
          "description" : "Config type",
          "enum" : [ "STORAGE", "ALERTS", "CALLHOME", "PASSWORD_POLICY", "OTHER" ],
          "example" : "STORAGE",
          "type" : "string"
        }
      },
      "required" : [ "configName", "customerUUID", "data", "name", "type" ],
      "type" : "object"
    },
    "CustomerConfigUI" : {
      "description" : "Customer configuration with additional information. Includes storage, alerts, password policy, and call-home level.",
      "properties" : {
        "configName" : {
          "description" : "Config name",
          "example" : "backup20-01-2021",
          "maxLength" : 100,
          "minLength" : 1,
          "type" : "string"
        },
        "configUUID" : {
          "description" : "Config UUID",
          "format" : "uuid",
          "readOnly" : true,
          "type" : "string"
        },
        "customerUUID" : {
          "description" : "Customer UUID",
          "format" : "uuid",
          "readOnly" : true,
          "type" : "string"
        },
        "data" : {
          "description" : "Configuration data",
          "example" : "{\"AWS_ACCESS_KEY_ID\": \"AK****************ZD\"}",
          "type" : "object"
        },
        "inUse" : {
          "description" : "True if there is an in use reference to the object",
          "readOnly" : true,
          "type" : "boolean"
        },
        "name" : {
          "description" : "Name",
          "example" : "S3",
          "maxLength" : 50,
          "minLength" : 1,
          "type" : "string"
        },
        "state" : {
          "description" : "state of the customerConfig. Possible values are Active, QueuedForDeletion.",
          "enum" : [ "Active", "QueuedForDeletion" ],
          "readOnly" : true,
          "type" : "string"
        },
        "type" : {
          "description" : "Config type",
          "enum" : [ "STORAGE", "ALERTS", "CALLHOME", "PASSWORD_POLICY", "OTHER" ],
          "example" : "STORAGE",
          "type" : "string"
        },
        "universeDetails" : {
          "description" : "Universe details",
          "example" : "{\"name\": \"jd-aws-21-6-21-test4\"}",
          "items" : {
            "$ref" : "#/definitions/UniverseDetailSubset"
          },
          "type" : "array"
        }
      },
      "required" : [ "configName", "customerUUID", "data", "name", "type" ],
      "type" : "object"
    },
    "CustomerCountResp" : {
      "properties" : {
        "count" : {
          "format" : "int32",
          "type" : "integer"
        }
      },
      "required" : [ "count" ],
      "type" : "object"
    },
    "CustomerDetailsData" : {
      "description" : "Customer details, including their universe UUIDs. Only the customer code and name are modifiable.",
      "properties" : {
        "alertingData" : {
          "$ref" : "#/definitions/AlertingData",
          "description" : "Alerts",
          "readOnly" : true
        },
        "callhomeLevel" : {
          "description" : "Call-home level",
          "example" : "MEDIUM",
          "readOnly" : true,
          "type" : "string"
        },
        "code" : {
          "description" : "Customer code",
          "example" : "admin",
          "type" : "string"
        },
        "creationDate" : {
          "description" : "Creation timestamp",
          "example" : "2021-06-17 15:00:05",
          "format" : "date-time",
          "readOnly" : true,
          "type" : "string"
        },
        "customerId" : {
          "description" : "Customer ID",
          "format" : "int32",
          "readOnly" : true,
          "type" : "integer"
        },
        "name" : {
          "description" : "Customer name",
          "example" : "Sridhar",
          "type" : "string"
        },
        "smtpData" : {
          "$ref" : "#/definitions/SmtpData",
          "description" : "SMTP",
          "readOnly" : true
        },
        "universeUUIDs" : {
          "description" : "Associated universe IDs",
          "example" : "[c3595ca7-68a3-47f0-b1b2-1725886d5ed5, 9e0bb733-556c-4935-83dd-6b742a2c32e6]",
          "items" : {
            "format" : "uuid",
            "type" : "string"
          },
          "readOnly" : true,
          "type" : "array"
        },
        "uuid" : {
          "description" : "User UUID",
          "readOnly" : true,
          "type" : "string"
        }
      },
      "required" : [ "code", "name" ],
      "type" : "object"
    },
    "CustomerRegisterFormData" : {
      "properties" : {
        "code" : {
          "type" : "string"
        },
        "email" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "password" : {
          "type" : "string"
        }
      },
      "required" : [ "code", "email", "name", "password" ],
      "type" : "object"
    },
    "CustomerTaskData" : {
      "description" : "Customer task data",
      "properties" : {
        "abortable" : {
          "description" : "Customer task abortable",
          "type" : "boolean"
        },
        "completionTime" : {
          "description" : "Customer task completion time",
          "example" : "2021-06-17T15:00:05-0400",
          "format" : "date-time",
          "type" : "string"
        },
        "createTime" : {
          "description" : "Customer task creation time",
          "example" : "2021-06-17T15:00:05-0400",
          "format" : "date-time",
          "type" : "string"
        },
        "id" : {
          "description" : "Customer task UUID",
          "format" : "uuid",
          "type" : "string"
        },
        "percentComplete" : {
          "description" : "Customer task percentage completed",
          "example" : 100,
          "format" : "int32",
          "type" : "integer"
        },
        "retryable" : {
          "description" : "Customer task retryable",
          "type" : "boolean"
        },
        "status" : {
          "description" : "Customer task status",
          "example" : "Complete",
          "type" : "string"
        },
        "target" : {
          "description" : "Customer task target",
          "example" : "Universe",
          "type" : "string"
        },
        "targetUUID" : {
          "description" : "Customer task target UUID",
          "format" : "uuid",
          "type" : "string"
        },
        "title" : {
          "description" : "Customer task title",
          "example" : "Deleted Universe : test-universe",
          "type" : "string"
        },
        "type" : {
          "description" : "Customer task type",
          "example" : "Delete",
          "type" : "string"
        },
        "typeName" : {
          "description" : "Customer task type name",
          "example" : "Software Upgrade",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "DeviceInfo" : {
      "description" : "Device information",
      "properties" : {
        "diskIops" : {
          "description" : "Desired IOPS for the volumes mounted on this instance",
          "format" : "int32",
          "type" : "integer"
        },
        "mountPoints" : {
          "description" : "Comma-separated list of mount points for the devices in each instance",
          "type" : "string"
        },
        "numVolumes" : {
          "description" : "Number of volumes to be mounted on this instance at the default path",
          "format" : "int32",
          "type" : "integer"
        },
        "storageClass" : {
          "description" : "Name of the storage class",
          "type" : "string"
        },
        "storageType" : {
          "description" : "Storage type used for this instance",
          "enum" : [ "IO1", "GP2", "GP3", "Scratch", "Persistent", "StandardSSD_LRS", "Premium_LRS", "UltraSSD_LRS" ],
          "type" : "string"
        },
        "throughput" : {
          "description" : "Desired throughput for the volumes mounted on this instance",
          "format" : "int32",
          "type" : "integer"
        },
        "volumeSize" : {
          "description" : "The size of each volume in each instance",
          "format" : "int32",
          "type" : "integer"
        }
      },
      "type" : "object"
    },
    "EditBackupParams" : {
      "description" : "Edit backup parameters",
      "properties" : {
        "expiryTimeUnit" : {
          "description" : "Time unit for backup expiry",
          "enum" : [ "NANOSECONDS", "MICROSECONDS", "MILLISECONDS", "SECONDS", "MINUTES", "HOURS", "DAYS", "MONTHS", "YEARS" ],
          "type" : "string"
        },
        "storageConfigUUID" : {
          "description" : "New backup Storage config",
          "format" : "uuid",
          "type" : "string"
        },
        "timeBeforeDeleteFromPresentInMillis" : {
          "description" : "Time before deleting the backup from storage, in milliseconds",
          "format" : "int64",
          "type" : "integer"
        }
      },
      "type" : "object"
    },
    "EditBackupScheduleParams" : {
      "description" : "Info to edit the schedule params for backups",
      "properties" : {
        "cronExpression" : {
          "description" : "Cron expression for scheduling",
          "type" : "string"
        },
        "frequency" : {
          "description" : "Frequency of the schedule",
          "format" : "int64",
          "type" : "integer"
        },
        "frequencyTimeUnit" : {
          "description" : "Time Unit for frequency",
          "enum" : [ "NANOSECONDS", "MICROSECONDS", "MILLISECONDS", "SECONDS", "MINUTES", "HOURS", "DAYS", "MONTHS", "YEARS" ],
          "type" : "string"
        },
        "status" : {
          "description" : "State of the schedule",
          "enum" : [ "Active", "Paused", "Stopped" ],
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "EncryptionAtRestConfig" : {
      "description" : "Encryption at rest configuration",
      "properties" : {
        "encryptionAtRestEnabled" : {
          "description" : "Whether a universe is currently encrypted at rest",
          "type" : "boolean"
        },
        "kmsConfigUUID" : {
          "description" : "KMS configuration UUID",
          "format" : "uuid",
          "type" : "string"
        },
        "opType" : {
          "description" : "Operation type: enable, disable, or rotate the universe key/encryption at rest",
          "enum" : [ "ENABLE", "DISABLE", "UNDEFINED" ],
          "type" : "string"
        },
        "type" : {
          "description" : "Whether to generate a data key or just retrieve the CMK ARN",
          "enum" : [ "CMK", "DATA_KEY" ],
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "ExtraDependencies" : {
      "description" : "Extra dependencies",
      "properties" : {
        "installNodeExporter" : {
          "description" : "Install node exporter on nodes",
          "type" : "boolean"
        }
      },
      "type" : "object"
    },
    "GCSLocation" : {
      "properties" : {
        "paths" : {
          "$ref" : "#/definitions/PackagePaths",
          "description" : "package paths"
        }
      },
      "type" : "object"
    },
    "GFlagsUpgradeParams" : {
      "properties" : {
        "allowInsecure" : {
          "type" : "boolean"
        },
        "backupInProgress" : {
          "type" : "boolean"
        },
        "capability" : {
          "enum" : [ "READ_ONLY", "EDITS_ALLOWED" ],
          "type" : "string"
        },
        "clientRootCA" : {
          "format" : "uuid",
          "type" : "string"
        },
        "clusters" : {
          "items" : {
            "$ref" : "#/definitions/Cluster"
          },
          "type" : "array"
        },
        "cmkArn" : {
          "description" : "Amazon Resource Name (ARN) of the CMK",
          "type" : "string"
        },
        "communicationPorts" : {
          "$ref" : "#/definitions/CommunicationPorts",
          "description" : "Communication ports"
        },
        "currentClusterType" : {
          "enum" : [ "PRIMARY", "ASYNC" ],
          "type" : "string"
        },
        "deviceInfo" : {
          "$ref" : "#/definitions/DeviceInfo",
          "description" : "Device information"
        },
        "encryptionAtRestConfig" : {
          "$ref" : "#/definitions/EncryptionAtRestConfig",
          "description" : "Encryption at rest configation"
        },
        "errorString" : {
          "description" : "Error message",
          "type" : "string"
        },
        "expectedUniverseVersion" : {
          "description" : "Expected universe version",
          "format" : "int32",
          "type" : "integer"
        },
        "extraDependencies" : {
          "$ref" : "#/definitions/ExtraDependencies",
          "description" : "Extra dependencies"
        },
        "firstTry" : {
          "description" : "Whether this task has been tried before",
          "type" : "boolean"
        },
        "importedState" : {
          "enum" : [ "NONE", "STARTED", "MASTERS_ADDED", "TSERVERS_ADDED", "IMPORTED" ],
          "type" : "string"
        },
        "itestS3PackagePath" : {
          "type" : "string"
        },
        "kubernetesUpgradeSupported" : {
          "type" : "boolean"
        },
        "masterGFlags" : {
          "additionalProperties" : {
            "type" : "string"
          },
          "type" : "object"
        },
        "nextClusterIndex" : {
          "format" : "int32",
          "type" : "integer"
        },
        "nodeDetailsSet" : {
          "description" : "Node details",
          "items" : {
            "$ref" : "#/definitions/NodeDetails"
          },
          "type" : "array",
          "uniqueItems" : true
        },
        "nodeExporterUser" : {
          "description" : "Node exporter user",
          "type" : "string"
        },
        "nodePrefix" : {
          "type" : "string"
        },
        "nodesResizeAvailable" : {
          "type" : "boolean"
        },
        "previousTaskUUID" : {
          "description" : "Previous task UUID only if this task is a retry",
          "format" : "uuid",
          "type" : "string"
        },
        "remotePackagePath" : {
          "type" : "string"
        },
        "resetAZConfig" : {
          "type" : "boolean"
        },
        "rootAndClientRootCASame" : {
          "type" : "boolean"
        },
        "rootCA" : {
          "format" : "uuid",
          "type" : "string"
        },
        "setTxnTableWaitCountFlag" : {
          "type" : "boolean"
        },
        "sleepAfterMasterRestartMillis" : {
          "format" : "int32",
          "type" : "integer"
        },
        "sleepAfterTServerRestartMillis" : {
          "format" : "int32",
          "type" : "integer"
        },
        "sourceXClusterConfigs" : {
          "description" : "The source universe's xcluster replication relationships",
          "items" : {
            "format" : "uuid",
            "type" : "string"
          },
          "readOnly" : true,
          "type" : "array"
        },
        "targetXClusterConfigs" : {
          "description" : "The target universe's xcluster replication relationships",
          "items" : {
            "format" : "uuid",
            "type" : "string"
          },
          "readOnly" : true,
          "type" : "array"
        },
        "tserverGFlags" : {
          "additionalProperties" : {
            "type" : "string"
          },
          "type" : "object"
        },
        "universePaused" : {
          "type" : "boolean"
        },
        "universeUUID" : {
          "description" : "Associated universe UUID",
          "format" : "uuid",
          "type" : "string"
        },
        "updateInProgress" : {
          "type" : "boolean"
        },
        "updateSucceeded" : {
          "type" : "boolean"
        },
        "updatingTask" : {
          "enum" : [ "CloudBootstrap", "CloudCleanup", "CreateCassandraTable", "CreateUniverse", "ReadOnlyClusterCreate", "ReadOnlyKubernetesClusterCreate", "ReadOnlyClusterDelete", "CreateKubernetesUniverse", "DestroyUniverse", "PauseUniverse", "ResumeUniverse", "DestroyKubernetesUniverse", "DeleteTable", "BackupUniverse", "RestoreBackup", "MultiTableBackup", "CreateBackup", "EditUniverse", "EditKubernetesUniverse", "ExternalScript", "KubernetesProvision", "ImportIntoTable", "UpgradeUniverse", "RestartUniverse", "SoftwareUpgrade", "SoftwareKubernetesUpgrade", "GFlagsUpgrade", "GFlagsKubernetesUpgrade", "CertsRotate", "CertsRotateKubernetesUpgrade", "TlsToggle", "VMImageUpgrade", "SystemdUpgrade", "CreateRootVolumes", "ReplaceRootVolume", "ChangeInstanceType", "PersistResizeNode", "PersistSystemdUpgrade", "UpdateNodeDetails", "UpgradeKubernetesUniverse", "DeleteNodeFromUniverse", "StopNodeInUniverse", "StartNodeInUniverse", "AddNodeToUniverse", "RemoveNodeFromUniverse", "ReleaseInstanceFromUniverse", "SetUniverseKey", "SetKubernetesUniverseKey", "CreateKMSConfig", "EditKMSConfig", "DeleteKMSConfig", "UpdateDiskSize", "StartMasterOnNode", "CreateXClusterConfig", "EditXClusterConfig", "DeleteXClusterConfig", "SyncXClusterConfig", "CreateSupportBundle", "AnsibleClusterServerCtl", "AnsibleConfigureServers", "AnsibleDestroyServer", "PauseServer", "ResumeServer", "AnsibleSetupServer", "AnsibleCreateServer", "PrecheckNode", "PrecheckNodeDetached", "AnsibleUpdateNodeInfo", "BulkImport", "ChangeMasterConfig", "ChangeAdminPassword", "CreateTable", "DeleteNode", "DeleteBackup", "DeleteBackupYb", "DeleteCustomerConfig", "DeleteCustomerStorageConfig", "UpdateNodeProcess", "DeleteTableFromUniverse", "LoadBalancerStateChange", "ModifyBlackList", "ManipulateDnsRecordTask", "RemoveUniverseEntry", "SetFlagInMemory", "SetNodeState", "SwamperTargetsFileUpdate", "UniverseUpdateSucceeded", "UpdateAndPersistGFlags", "UpdatePlacementInfo", "UpdateSoftwareVersion", "WaitForDataMove", "WaitForLeaderBlacklistCompletion", "WaitForFollowerLag", "WaitForLoadBalance", "WaitForMasterLeader", "WaitForServer", "WaitForTServerHeartBeats", "DeleteClusterFromUniverse", "InstanceActions", "WaitForServerReady", "RunExternalScript", "XClusterConfigSetup", "XClusterConfigSetStatus", "XClusterConfigModifyTables", "XClusterConfigRename", "XClusterConfigDelete", "XClusterConfigSync", "XClusterConfigUpdateMasterAddresses", "CloudAccessKeyCleanup", "CloudAccessKeySetup", "CloudInitializer", "CloudProviderCleanup", "CloudRegionCleanup", "CloudRegionSetup", "CloudSetup", "BackupTable", "BackupTableYb", "BackupUniverseKeys", "RestoreBackupYb", "RestoreUniverseKeys", "RestoreUniverseKeysYb", "WaitForLeadersOnPreferredOnly", "EnableEncryptionAtRest", "DisableEncryptionAtRest", "DestroyEncryptionAtRest", "KubernetesCommandExecutor", "KubernetesWaitForPod", "KubernetesCheckNumPod", "SetActiveUniverseKeys", "CopyEncryptionKeyFile", "WaitForEncryptionKeyInMemory", "UnivSetCertificate", "CreateAlertDefinitions", "ManageAlertDefinitions", "UniverseSetTlsParams", "UniverseUpdateRootCert", "ResetUniverseVersion", "DeleteCertificate", "SetNodeStatus", "CheckMasterLeader", "CheckMasters", "CheckTServers", "WaitForTServerHBs", "CreatePrometheusSwamperConfig", "PreflightNodeCheck", "RunYsqlUpgrade", "ResizeNode", "CheckMemory", "UpdateMountedDisks", "TransferXClusterCerts", "CreateTableSpacesInUniverse", "CreateTableSpaces", "ThirdpartySoftwareUpgrade" ],
          "type" : "string"
        },
        "updatingTaskUUID" : {
          "format" : "uuid",
          "type" : "string"
        },
        "upgradeOption" : {
          "enum" : [ "Rolling", "Non-Rolling", "Non-Restart" ],
          "type" : "string"
        },
        "useNewHelmNamingStyle" : {
          "type" : "boolean"
        },
        "userAZSelected" : {
          "type" : "boolean"
        },
        "ybPrevSoftwareVersion" : {
          "description" : "Previous software version",
          "type" : "string"
        }
      },
      "required" : [ "clusters", "kubernetesUpgradeSupported", "masterGFlags", "sleepAfterMasterRestartMillis", "sleepAfterTServerRestartMillis", "tserverGFlags", "upgradeOption" ],
      "type" : "object"
    },
    "HashicorpVaultConfigParams" : {
      "properties" : {
        "engine" : {
          "type" : "string"
        },
        "mountPath" : {
          "type" : "string"
        },
        "role" : {
          "type" : "string"
        },
        "ttl" : {
          "format" : "int64",
          "type" : "integer"
        },
        "ttlExpiry" : {
          "format" : "int64",
          "type" : "integer"
        },
        "vaultAddr" : {
          "type" : "string"
        },
        "vaultToken" : {
          "type" : "string"
        }
      },
      "required" : [ "engine", "mountPath", "role", "vaultAddr", "vaultToken" ],
      "type" : "object"
    },
    "HttpLocation" : {
      "properties" : {
        "paths" : {
          "$ref" : "#/definitions/PackagePaths",
          "description" : "package paths"
        }
      },
      "type" : "object"
    },
    "ImportUniverseFormData" : {
      "properties" : {
        "cloudName" : {
          "type" : "string"
        },
        "cloudProviderType" : {
          "type" : "string"
        },
        "currentState" : {
          "enum" : [ "BEGIN", "IMPORTED_MASTERS", "IMPORTED_TSERVERS", "FINISHED" ],
          "type" : "string"
        },
        "instanceType" : {
          "type" : "string"
        },
        "masterAddresses" : {
          "type" : "string"
        },
        "providerType" : {
          "enum" : [ "unknown", "aws", "gcp", "azu", "docker", "onprem", "kubernetes", "local", "other" ],
          "type" : "string"
        },
        "regionCode" : {
          "type" : "string"
        },
        "regionName" : {
          "type" : "string"
        },
        "replicationFactor" : {
          "format" : "int32",
          "type" : "integer"
        },
        "singleStep" : {
          "type" : "boolean"
        },
        "universeName" : {
          "type" : "string"
        },
        "universeUUID" : {
          "format" : "uuid",
          "type" : "string"
        },
        "zoneCode" : {
          "type" : "string"
        },
        "zoneName" : {
          "type" : "string"
        }
      },
      "required" : [ "cloudName", "cloudProviderType", "currentState", "instanceType", "masterAddresses", "providerType", "regionCode", "regionName", "replicationFactor", "singleStep", "universeName", "universeUUID", "zoneCode", "zoneName" ],
      "type" : "object"
    },
    "InstanceType" : {
      "description" : "Information about an instance",
      "properties" : {
        "active" : {
          "description" : "True if the instance is active",
          "readOnly" : true,
          "type" : "boolean"
        },
        "idKey" : {
          "$ref" : "#/definitions/InstanceTypeKey"
        },
        "instanceTypeCode" : {
          "type" : "string"
        },
        "instanceTypeDetails" : {
          "$ref" : "#/definitions/InstanceTypeDetails"
        },
        "memSizeGB" : {
          "description" : "The instance's memory size, in gigabytes",
          "format" : "double",
          "type" : "number"
        },
        "numCores" : {
          "description" : "The instance's number of CPU cores",
          "format" : "double",
          "type" : "number"
        },
        "provider" : {
          "$ref" : "#/definitions/Provider"
        },
        "providerCode" : {
          "type" : "string"
        },
        "providerUuid" : {
          "format" : "uuid",
          "type" : "string"
        }
      },
      "required" : [ "idKey", "instanceTypeCode", "instanceTypeDetails", "provider", "providerCode", "providerUuid" ],
      "type" : "object"
    },
    "InstanceTypeDetails" : {
      "properties" : {
        "tenancy" : {
          "enum" : [ "Shared", "Dedicated", "Host" ],
          "type" : "string"
        },
        "volumeDetailsList" : {
          "items" : {
            "$ref" : "#/definitions/VolumeDetails"
          },
          "type" : "array"
        }
      },
      "required" : [ "tenancy", "volumeDetailsList" ],
      "type" : "object"
    },
    "InstanceTypeKey" : {
      "properties" : {
        "instanceTypeCode" : {
          "type" : "string"
        },
        "providerUuid" : {
          "format" : "uuid",
          "type" : "string"
        }
      },
      "required" : [ "instanceTypeCode", "providerUuid" ],
      "type" : "object"
    },
    "KeyInfo" : {
      "properties" : {
        "airGapInstall" : {
          "type" : "boolean"
        },
        "deleteRemote" : {
          "type" : "boolean"
        },
        "installNodeExporter" : {
          "type" : "boolean"
        },
        "nodeExporterPort" : {
          "format" : "int32",
          "type" : "integer"
        },
        "nodeExporterUser" : {
          "type" : "string"
        },
        "ntpServers" : {
          "items" : {
            "type" : "string"
          },
          "type" : "array"
        },
        "passwordlessSudoAccess" : {
          "type" : "boolean"
        },
        "privateKey" : {
          "type" : "string"
        },
        "provisionInstanceScript" : {
          "type" : "string"
        },
        "publicKey" : {
          "type" : "string"
        },
        "setUpChrony" : {
          "type" : "boolean"
        },
        "showSetUpChrony" : {
          "type" : "boolean"
        },
        "skipProvisioning" : {
          "type" : "boolean"
        },
        "sshPort" : {
          "format" : "int32",
          "type" : "integer"
        },
        "sshUser" : {
          "type" : "string"
        },
        "vaultFile" : {
          "type" : "string"
        },
        "vaultPasswordFile" : {
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "KeyspaceTable" : {
      "description" : "Keyspace and table info for backup",
      "properties" : {
        "keyspace" : {
          "description" : "keyspace",
          "type" : "string"
        },
        "tableNameList" : {
          "description" : "Tables",
          "items" : {
            "type" : "string"
          },
          "type" : "array"
        },
        "tableUUIDList" : {
          "description" : "Table UUIDs",
          "items" : {
            "format" : "uuid",
            "type" : "string"
          },
          "type" : "array"
        }
      },
      "type" : "object"
    },
    "KeyspaceTablesList" : {
      "properties" : {
        "backupSizeInBytes" : {
          "format" : "int64",
          "type" : "integer"
        },
        "defaultLocation" : {
          "type" : "string"
        },
        "keyspace" : {
          "type" : "string"
        },
        "perRegionLocations" : {
          "items" : {
            "$ref" : "#/definitions/RegionLocations"
          },
          "type" : "array"
        },
        "tableUUIDList" : {
          "items" : {
            "format" : "uuid",
            "type" : "string"
          },
          "type" : "array",
          "uniqueItems" : true
        },
        "tablesList" : {
          "items" : {
            "type" : "string"
          },
          "type" : "array",
          "uniqueItems" : true
        }
      },
      "required" : [ "backupSizeInBytes", "defaultLocation", "keyspace", "perRegionLocations", "tableUUIDList", "tablesList" ],
      "type" : "object"
    },
    "LogData" : {
      "properties" : {
        "lines" : {
          "items" : {
            "type" : "string"
          },
          "type" : "array"
        }
      },
      "required" : [ "lines" ],
      "type" : "object"
    },
    "MaintenanceWindow" : {
      "description" : "Maintenance Window",
      "properties" : {
        "alertConfigurationFilter" : {
          "$ref" : "#/definitions/AlertConfigurationApiFilter",
          "description" : "Alert configuration filter"
        },
        "createTime" : {
          "description" : "Creation time",
          "format" : "date-time",
          "readOnly" : true,
          "type" : "string"
        },
        "customerUUID" : {
          "description" : "Customer UUID",
          "format" : "uuid",
          "readOnly" : true,
          "type" : "string"
        },
        "description" : {
          "description" : "Description",
          "maxLength" : 2147483647,
          "minLength" : 1,
          "type" : "string"
        },
        "endTime" : {
          "description" : "End time",
          "format" : "date-time",
          "type" : "string"
        },
        "name" : {
          "description" : "Name",
          "maxLength" : 1000,
          "minLength" : 1,
          "type" : "string"
        },
        "startTime" : {
          "description" : "Start time",
          "format" : "date-time",
          "type" : "string"
        },
        "state" : {
          "description" : "State",
          "enum" : [ "FINISHED", "ACTIVE", "PENDING" ],
          "readOnly" : true,
          "type" : "string"
        },
        "uuid" : {
          "description" : "Maintenance window UUID",
          "format" : "uuid",
          "readOnly" : true,
          "type" : "string"
        }
      },
      "required" : [ "alertConfigurationFilter", "createTime", "customerUUID", "description", "endTime", "name", "startTime" ],
      "type" : "object"
    },
    "MaintenanceWindowApiFilter" : {
      "properties" : {
        "states" : {
          "items" : {
            "enum" : [ "FINISHED", "ACTIVE", "PENDING" ],
            "type" : "string"
          },
          "type" : "array",
          "uniqueItems" : true
        },
        "uuids" : {
          "items" : {
            "format" : "uuid",
            "type" : "string"
          },
          "type" : "array",
          "uniqueItems" : true
        }
      },
      "required" : [ "states", "uuids" ],
      "type" : "object"
    },
    "MaintenanceWindowPagedApiQuery" : {
      "properties" : {
        "direction" : {
          "enum" : [ "ASC", "DESC" ],
          "type" : "string"
        },
        "filter" : {
          "$ref" : "#/definitions/MaintenanceWindowApiFilter"
        },
        "limit" : {
          "format" : "int32",
          "type" : "integer"
        },
        "needTotalCount" : {
          "type" : "boolean"
        },
        "offset" : {
          "format" : "int32",
          "type" : "integer"
        },
        "sortBy" : {
          "enum" : [ "uuid", "name", "createTime", "startTime", "endTime", "state" ],
          "type" : "string"
        }
      },
      "required" : [ "direction", "filter", "limit", "needTotalCount", "offset", "sortBy" ],
      "type" : "object"
    },
    "MaintenanceWindowPagedResponse" : {
      "properties" : {
        "entities" : {
          "items" : {
            "$ref" : "#/definitions/MaintenanceWindow"
          },
          "type" : "array"
        },
        "hasNext" : {
          "type" : "boolean"
        },
        "hasPrev" : {
          "type" : "boolean"
        },
        "totalCount" : {
          "format" : "int32",
          "type" : "integer"
        }
      },
      "required" : [ "entities", "hasNext", "hasPrev", "totalCount" ],
      "type" : "object"
    },
    "MasterNode" : {
      "properties" : {
        "cloudInfo" : {
          "$ref" : "#/definitions/CloudSpecificInfo"
        },
        "masterRpcPort" : {
          "format" : "int32",
          "type" : "integer"
        }
      },
      "required" : [ "cloudInfo", "masterRpcPort" ],
      "type" : "object"
    },
    "MastersList" : {
      "properties" : {
        "masters" : {
          "items" : {
            "$ref" : "#/definitions/MasterNode"
          },
          "type" : "array"
        }
      },
      "required" : [ "masters" ],
      "type" : "object"
    },
    "MetricQueryParams" : {
      "description" : "Metrics request data",
      "properties" : {
        "end" : {
          "description" : "End time",
          "format" : "int64",
          "type" : "integer"
        },
        "isRecharts" : {
          "description" : "Is Recharts",
          "type" : "boolean"
        },
        "metrics" : {
          "description" : "Metrics",
          "items" : {
            "type" : "string"
          },
          "type" : "array"
        },
        "metricsWithSettings" : {
          "description" : "List of metrics with custom settings",
          "items" : {
            "$ref" : "#/definitions/MetricSettings"
          },
          "type" : "array"
        },
        "nodeName" : {
          "description" : "Node name",
          "type" : "string"
        },
        "nodePrefix" : {
          "description" : "Node prefix",
          "type" : "string"
        },
        "start" : {
          "description" : "Start time",
          "format" : "int64",
          "type" : "integer"
        }
      },
      "required" : [ "start" ],
      "type" : "object"
    },
    "MetricSettings" : {
      "description" : "Settings, selected for particular metric",
      "properties" : {
        "aggregation" : {
          "description" : "Way of metrics aggregation over time and across nodes",
          "enum" : [ "DEFAULT", "MIN", "MAX", "AVG", "SUM" ],
          "type" : "string"
        },
        "metric" : {
          "description" : "Metric name",
          "type" : "string"
        },
        "splitTopNodes" : {
          "description" : "Query result for 'top' nodes separately. 0 means aggregate over all nodes",
          "format" : "int32",
          "type" : "integer"
        }
      },
      "required" : [ "aggregation", "metric", "splitTopNodes" ],
      "type" : "object"
    },
    "MultiTableBackupRequestParams" : {
      "description" : "Multi-table backup parameters",
      "properties" : {
        "actionType" : {
          "description" : "Action type",
          "enum" : [ "CREATE", "RESTORE", "RESTORE_KEYS", "DELETE" ],
          "type" : "string"
        },
        "alterLoadBalancer" : {
          "description" : "Alter load balancer state",
          "type" : "boolean"
        },
        "backupList" : {
          "description" : "Backups",
          "items" : {
            "$ref" : "#/definitions/BackupTableParams"
          },
          "type" : "array"
        },
        "backupSizeInBytes" : {
          "description" : "Backup size in bytes",
          "format" : "int64",
          "type" : "integer"
        },
        "backupType" : {
          "description" : "Backup type",
          "enum" : [ "YQL_TABLE_TYPE", "REDIS_TABLE_TYPE", "PGSQL_TABLE_TYPE", "TRANSACTION_STATUS_TABLE_TYPE" ],
          "type" : "string"
        },
        "backupUuid" : {
          "description" : "Backup UUID",
          "format" : "uuid",
          "type" : "string"
        },
        "cmkArn" : {
          "description" : "Amazon Resource Name (ARN) of the CMK",
          "type" : "string"
        },
        "communicationPorts" : {
          "$ref" : "#/definitions/CommunicationPorts",
          "description" : "Communication ports"
        },
        "cronExpression" : {
          "description" : "Cron expression for a recurring backup",
          "type" : "string"
        },
        "customerUUID" : {
          "description" : "Customer UUID",
          "format" : "uuid",
          "type" : "string"
        },
        "customerUuid" : {
          "description" : "Customer UUID",
          "format" : "uuid",
          "type" : "string"
        },
        "deviceInfo" : {
          "$ref" : "#/definitions/DeviceInfo",
          "description" : "Device information"
        },
        "disableChecksum" : {
          "description" : "Disable checksum",
          "type" : "boolean"
        },
        "disableParallelism" : {
          "description" : "Don't add -m flag during gsutil upload dir command",
          "type" : "boolean"
        },
        "enableVerboseLogs" : {
          "description" : "Is verbose logging enabled",
          "type" : "boolean"
        },
        "encryptionAtRestConfig" : {
          "$ref" : "#/definitions/EncryptionAtRestConfig",
          "description" : "Encryption at rest configation"
        },
        "errorString" : {
          "description" : "Error message",
          "type" : "string"
        },
        "expectedUniverseVersion" : {
          "description" : "Expected universe version",
          "format" : "int32",
          "type" : "integer"
        },
        "expiryTimeUnit" : {
          "description" : "Time unit for backup expiry time",
          "enum" : [ "NANOSECONDS", "MICROSECONDS", "MILLISECONDS", "SECONDS", "MINUTES", "HOURS", "DAYS", "MONTHS", "YEARS" ],
          "type" : "string"
        },
        "extraDependencies" : {
          "$ref" : "#/definitions/ExtraDependencies",
          "description" : "Extra dependencies"
        },
        "firstTry" : {
          "description" : "Whether this task has been tried before",
          "type" : "boolean"
        },
        "ignoreErrors" : {
          "description" : "Should table backup errors be ignored",
          "type" : "boolean"
        },
        "isFullBackup" : {
          "description" : "Full Table type backup",
          "type" : "boolean"
        },
        "keyspace" : {
          "description" : "Key space",
          "type" : "string"
        },
        "kmsConfigUUID" : {
          "description" : "KMS configuration UUID",
          "format" : "uuid",
          "type" : "string"
        },
        "minNumBackupsToRetain" : {
          "description" : "Minimum number of backups to retain for a particular backup schedule",
          "format" : "int32",
          "type" : "integer"
        },
        "newOwner" : {
          "description" : "User name of the new tables owner",
          "type" : "string"
        },
        "nodeDetailsSet" : {
          "description" : "Node details",
          "items" : {
            "$ref" : "#/definitions/NodeDetails"
          },
          "type" : "array",
          "uniqueItems" : true
        },
        "nodeExporterUser" : {
          "description" : "Node exporter user",
          "type" : "string"
        },
        "oldOwner" : {
          "description" : "User name of the current tables owner",
          "type" : "string"
        },
        "parallelism" : {
          "description" : "Number of concurrent commands to run on nodes over SSH",
          "format" : "int32",
          "type" : "integer"
        },
        "previousTaskUUID" : {
          "description" : "Previous task UUID only if this task is a retry",
          "format" : "uuid",
          "type" : "string"
        },
        "regionLocations" : {
          "description" : "Per region locations",
          "items" : {
            "$ref" : "#/definitions/RegionLocations"
          },
          "type" : "array"
        },
        "restoreTimeStamp" : {
          "description" : "Restore TimeStamp",
          "type" : "string"
        },
        "scheduleUUID" : {
          "description" : "Schedule UUID",
          "format" : "uuid",
          "type" : "string"
        },
        "schedulingFrequency" : {
          "description" : "Frequency to run the backup, in milliseconds",
          "format" : "int64",
          "type" : "integer"
        },
        "sourceXClusterConfigs" : {
          "description" : "The source universe's xcluster replication relationships",
          "items" : {
            "format" : "uuid",
            "type" : "string"
          },
          "readOnly" : true,
          "type" : "array"
        },
        "sse" : {
          "description" : "Is SSE",
          "type" : "boolean"
        },
        "storageConfigType" : {
          "description" : "Type of backup storage config",
          "enum" : [ "S3", "NFS", "AZ", "GCS", "FILE" ],
          "type" : "string"
        },
        "storageConfigUUID" : {
          "description" : "Storage configuration UUID",
          "format" : "uuid",
          "type" : "string"
        },
        "storageLocation" : {
          "description" : "Storage location",
          "type" : "string"
        },
        "tableName" : {
          "description" : "Table name",
          "type" : "string"
        },
        "tableNameList" : {
          "description" : "Tables",
          "items" : {
            "type" : "string"
          },
          "type" : "array"
        },
        "tableUUID" : {
          "description" : "Table UUID",
          "format" : "uuid",
          "type" : "string"
        },
        "tableUUIDList" : {
          "description" : "Table UUIDs",
          "items" : {
            "format" : "uuid",
            "type" : "string"
          },
          "type" : "array"
        },
        "targetXClusterConfigs" : {
          "description" : "The target universe's xcluster replication relationships",
          "items" : {
            "format" : "uuid",
            "type" : "string"
          },
          "readOnly" : true,
          "type" : "array"
        },
        "timeBeforeDelete" : {
          "description" : "Time before deleting the backup from storage, in milliseconds",
          "format" : "int64",
          "type" : "integer"
        },
        "transactionalBackup" : {
          "description" : "Is backup transactional across tables",
          "type" : "boolean"
        },
        "universeUUID" : {
          "description" : "Associated universe UUID",
          "format" : "uuid",
          "type" : "string"
        },
        "useTablespaces" : {
          "description" : "Is tablespaces information included",
          "type" : "boolean"
        },
        "ybPrevSoftwareVersion" : {
          "description" : "Previous software version",
          "type" : "string"
        }
      },
      "required" : [ "storageConfigUUID" ],
      "type" : "object"
    },
    "NodeActionFormData" : {
      "properties" : {
        "nodeAction" : {
          "enum" : [ "ADD", "REMOVE", "START", "STOP", "DELETE", "QUERY", "RELEASE", "START_MASTER", "PRECHECK_DETACHED" ],
          "type" : "string"
        }
      },
      "required" : [ "nodeAction" ],
      "type" : "object"
    },
    "NodeDetails" : {
      "description" : "Details of a cloud node",
      "properties" : {
        "azUuid" : {
          "description" : "The availability zone's UUID",
          "format" : "uuid",
          "type" : "string"
        },
        "cloudInfo" : {
          "$ref" : "#/definitions/CloudSpecificInfo",
          "description" : "Node information, as reported by the cloud provider"
        },
        "cronsActive" : {
          "description" : "True if cron jobs were properly configured for this node",
          "type" : "boolean"
        },
        "disksAreMountedByUUID" : {
          "description" : "Disks are mounted by uuid",
          "type" : "boolean"
        },
        "isMaster" : {
          "description" : "True if this node is a master",
          "type" : "boolean"
        },
        "isRedisServer" : {
          "description" : "True if this node is a REDIS server",
          "type" : "boolean"
        },
        "isTserver" : {
          "description" : "True if this node is a Tablet server",
          "type" : "boolean"
        },
        "isYqlServer" : {
          "description" : "True if this node is a YCQL server",
          "type" : "boolean"
        },
        "isYsqlServer" : {
          "description" : "True if this node is a YSQL server",
          "type" : "boolean"
        },
        "machineImage" : {
          "description" : "Machine image name",
          "type" : "string"
        },
        "masterHttpPort" : {
          "description" : "Master HTTP port",
          "format" : "int32",
          "type" : "integer"
        },
        "masterRpcPort" : {
          "description" : "Master RCP port",
          "format" : "int32",
          "type" : "integer"
        },
        "masterState" : {
          "description" : "Master state",
          "enum" : [ "None", "ToStart", "Configured", "ToStop" ],
          "example" : "ToStart",
          "type" : "string"
        },
        "nodeExporterPort" : {
          "description" : "Node exporter port",
          "format" : "int32",
          "type" : "integer"
        },
        "nodeIdx" : {
          "description" : "Node ID",
          "format" : "int32",
          "type" : "integer"
        },
        "nodeName" : {
          "description" : "Node name",
          "type" : "string"
        },
        "nodeUuid" : {
          "description" : "Node UUID",
          "format" : "uuid",
          "type" : "string"
        },
        "placementUuid" : {
          "description" : "UUID of the cluster to which this node belongs",
          "format" : "uuid",
          "type" : "string"
        },
        "redisServerHttpPort" : {
          "description" : "REDIS HTTP port",
          "format" : "int32",
          "type" : "integer"
        },
        "redisServerRpcPort" : {
          "description" : "REDIS RPC port",
          "format" : "int32",
          "type" : "integer"
        },
        "state" : {
          "description" : "Node state",
          "enum" : [ "ToBeAdded", "InstanceCreated", "ServerSetup", "ToJoinCluster", "Reprovisioning", "Provisioned", "SoftwareInstalled", "UpgradeSoftware", "UpdateGFlags", "Live", "Stopping", "Starting", "Stopped", "Unreachable", "ToBeRemoved", "Removing", "Removed", "Adding", "BeingDecommissioned", "Decommissioned", "UpdateCert", "ToggleTls", "Resizing", "SystemdUpgrade", "Terminating", "Terminated" ],
          "example" : "Provisioned",
          "type" : "string"
        },
        "tserverHttpPort" : {
          "description" : "Tablet server HTTP port",
          "format" : "int32",
          "type" : "integer"
        },
        "tserverRpcPort" : {
          "description" : "Tablet server RPC port",
          "format" : "int32",
          "type" : "integer"
        },
        "ybPrebuiltAmi" : {
          "description" : "True if this a custom YB AMI",
          "type" : "boolean"
        },
        "yqlServerHttpPort" : {
          "description" : "YCQL HTTP port",
          "format" : "int32",
          "type" : "integer"
        },
        "yqlServerRpcPort" : {
          "description" : "YCQL RPC port",
          "format" : "int32",
          "type" : "integer"
        },
        "ysqlServerHttpPort" : {
          "description" : "YSQL HTTP port",
          "format" : "int32",
          "type" : "integer"
        },
        "ysqlServerRpcPort" : {
          "description" : "YSQL RPC port",
          "format" : "int32",
          "type" : "integer"
        }
      },
      "type" : "object"
    },
    "NodeDetailsResp" : {
      "properties" : {
        "allowedActions" : {
          "items" : {
            "enum" : [ "ADD", "REMOVE", "START", "STOP", "DELETE", "QUERY", "RELEASE", "START_MASTER", "PRECHECK_DETACHED" ],
            "type" : "string"
          },
          "readOnly" : true,
          "type" : "array",
          "uniqueItems" : true
        },
        "azUuid" : {
          "description" : "The availability zone's UUID",
          "format" : "uuid",
          "type" : "string"
        },
        "cloudInfo" : {
          "$ref" : "#/definitions/CloudSpecificInfo",
          "description" : "Node information, as reported by the cloud provider"
        },
        "cronsActive" : {
          "description" : "True if cron jobs were properly configured for this node",
          "type" : "boolean"
        },
        "disksAreMountedByUUID" : {
          "description" : "Disks are mounted by uuid",
          "type" : "boolean"
        },
        "isMaster" : {
          "description" : "True if this node is a master",
          "type" : "boolean"
        },
        "isRedisServer" : {
          "description" : "True if this node is a REDIS server",
          "type" : "boolean"
        },
        "isTserver" : {
          "description" : "True if this node is a Tablet server",
          "type" : "boolean"
        },
        "isYqlServer" : {
          "description" : "True if this node is a YCQL server",
          "type" : "boolean"
        },
        "isYsqlServer" : {
          "description" : "True if this node is a YSQL server",
          "type" : "boolean"
        },
        "machineImage" : {
          "description" : "Machine image name",
          "type" : "string"
        },
        "masterHttpPort" : {
          "description" : "Master HTTP port",
          "format" : "int32",
          "type" : "integer"
        },
        "masterRpcPort" : {
          "description" : "Master RCP port",
          "format" : "int32",
          "type" : "integer"
        },
        "masterState" : {
          "description" : "Master state",
          "enum" : [ "None", "ToStart", "Configured", "ToStop" ],
          "example" : "ToStart",
          "type" : "string"
        },
        "nodeExporterPort" : {
          "description" : "Node exporter port",
          "format" : "int32",
          "type" : "integer"
        },
        "nodeIdx" : {
          "description" : "Node ID",
          "format" : "int32",
          "type" : "integer"
        },
        "nodeName" : {
          "description" : "Node name",
          "type" : "string"
        },
        "nodeUuid" : {
          "description" : "Node UUID",
          "format" : "uuid",
          "type" : "string"
        },
        "placementUuid" : {
          "description" : "UUID of the cluster to which this node belongs",
          "format" : "uuid",
          "type" : "string"
        },
        "redisServerHttpPort" : {
          "description" : "REDIS HTTP port",
          "format" : "int32",
          "type" : "integer"
        },
        "redisServerRpcPort" : {
          "description" : "REDIS RPC port",
          "format" : "int32",
          "type" : "integer"
        },
        "state" : {
          "description" : "Node state",
          "enum" : [ "ToBeAdded", "InstanceCreated", "ServerSetup", "ToJoinCluster", "Reprovisioning", "Provisioned", "SoftwareInstalled", "UpgradeSoftware", "UpdateGFlags", "Live", "Stopping", "Starting", "Stopped", "Unreachable", "ToBeRemoved", "Removing", "Removed", "Adding", "BeingDecommissioned", "Decommissioned", "UpdateCert", "ToggleTls", "Resizing", "SystemdUpgrade", "Terminating", "Terminated" ],
          "example" : "Provisioned",
          "type" : "string"
        },
        "tserverHttpPort" : {
          "description" : "Tablet server HTTP port",
          "format" : "int32",
          "type" : "integer"
        },
        "tserverRpcPort" : {
          "description" : "Tablet server RPC port",
          "format" : "int32",
          "type" : "integer"
        },
        "ybPrebuiltAmi" : {
          "description" : "True if this a custom YB AMI",
          "type" : "boolean"
        },
        "yqlServerHttpPort" : {
          "description" : "YCQL HTTP port",
          "format" : "int32",
          "type" : "integer"
        },
        "yqlServerRpcPort" : {
          "description" : "YCQL RPC port",
          "format" : "int32",
          "type" : "integer"
        },
        "ysqlServerHttpPort" : {
          "description" : "YSQL HTTP port",
          "format" : "int32",
          "type" : "integer"
        },
        "ysqlServerRpcPort" : {
          "description" : "YSQL RPC port",
          "format" : "int32",
          "type" : "integer"
        }
      },
      "type" : "object"
    },
    "NodeInstance" : {
      "description" : "A single node instance, attached to a provider and availability zone",
      "properties" : {
        "details" : {
          "$ref" : "#/definitions/NodeInstanceData"
        },
        "detailsJson" : {
          "description" : "Node details (as a JSON object)",
          "example" : "{\"ip\":\"1.1.1.1\",\"sshUser\":\"centos\"}",
          "type" : "string"
        },
        "inUse" : {
          "description" : "True if the node is in use",
          "type" : "boolean"
        },
        "instanceName" : {
          "description" : "The node instance's name",
          "example" : "Mumbai instance",
          "type" : "string"
        },
        "instanceTypeCode" : {
          "description" : "The node's type code",
          "example" : "c5large",
          "type" : "string"
        },
        "nodeName" : {
          "description" : "The node's name",
          "example" : "India node",
          "type" : "string"
        },
        "nodeUuid" : {
          "description" : "The node's UUID",
          "format" : "uuid",
          "readOnly" : true,
          "type" : "string"
        },
        "zoneUuid" : {
          "description" : "The availability zone's UUID",
          "format" : "uuid",
          "type" : "string"
        }
      },
      "required" : [ "details" ],
      "type" : "object"
    },
    "NodeInstanceData" : {
      "description" : "Details of a node instance. Used by the API to validate data against input constraints.",
      "properties" : {
        "instanceName" : {
          "description" : "Node instance name",
          "example" : "Mumbai instance",
          "type" : "string"
        },
        "instanceType" : {
          "description" : "Node instance type",
          "example" : "c5large",
          "type" : "string"
        },
        "ip" : {
          "description" : "IP address",
          "example" : "1.1.1.1",
          "type" : "string"
        },
        "nodeName" : {
          "description" : "Node name",
          "example" : "India node",
          "type" : "string"
        },
        "region" : {
          "description" : "Region",
          "example" : "south-east",
          "type" : "string"
        },
        "sshUser" : {
          "description" : "SSH user",
          "example" : "centos",
          "type" : "string"
        },
        "zone" : {
          "description" : "Zone",
          "example" : "south-east",
          "type" : "string"
        }
      },
      "required" : [ "instanceName", "instanceType", "ip", "region", "sshUser", "zone" ],
      "type" : "object"
    },
    "NodeInstanceFormData" : {
      "properties" : {
        "nodes" : {
          "description" : "Node instances",
          "items" : {
            "$ref" : "#/definitions/NodeInstanceData"
          },
          "maxItems" : 2147483647,
          "minItems" : 1,
          "type" : "array"
        }
      },
      "required" : [ "nodes" ],
      "type" : "object"
    },
    "Package" : {
      "properties" : {
        "arch" : {
          "enum" : [ "x86_64", "arm64" ],
          "type" : "string"
        },
        "path" : {
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "PackagePaths" : {
      "properties" : {
        "x86_64" : {
          "description" : "Path to x86_64 package",
          "type" : "string"
        },
        "x86_64_checksum" : {
          "description" : "Checksum for x86_64 package",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "PlacementAZ" : {
      "properties" : {
        "isAffinitized" : {
          "type" : "boolean"
        },
        "name" : {
          "type" : "string"
        },
        "numNodesInAZ" : {
          "format" : "int32",
          "type" : "integer"
        },
        "replicationFactor" : {
          "format" : "int32",
          "type" : "integer"
        },
        "secondarySubnet" : {
          "type" : "string"
        },
        "subnet" : {
          "type" : "string"
        },
        "uuid" : {
          "format" : "uuid",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "PlacementBlock" : {
      "properties" : {
        "cloud" : {
          "description" : "Cloud",
          "maxLength" : 2147483647,
          "minLength" : 1,
          "type" : "string"
        },
        "leader_preference" : {
          "description" : "Leader preference",
          "format" : "int32",
          "minimum" : 1,
          "type" : "integer"
        },
        "min_num_replicas" : {
          "description" : "Minimum replicas",
          "format" : "int32",
          "minimum" : 1,
          "type" : "integer"
        },
        "region" : {
          "description" : "Region",
          "maxLength" : 2147483647,
          "minLength" : 1,
          "type" : "string"
        },
        "zone" : {
          "description" : "Zone",
          "maxLength" : 2147483647,
          "minLength" : 1,
          "type" : "string"
        }
      },
      "required" : [ "cloud", "region", "zone" ],
      "type" : "object"
    },
    "PlacementCloud" : {
      "properties" : {
        "code" : {
          "type" : "string"
        },
        "defaultRegion" : {
          "format" : "uuid",
          "type" : "string"
        },
        "regionList" : {
          "items" : {
            "$ref" : "#/definitions/PlacementRegion"
          },
          "type" : "array"
        },
        "uuid" : {
          "format" : "uuid",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "PlacementInfo" : {
      "properties" : {
        "cloudList" : {
          "items" : {
            "$ref" : "#/definitions/PlacementCloud"
          },
          "type" : "array"
        }
      },
      "required" : [ "cloudList" ],
      "type" : "object"
    },
    "PlacementRegion" : {
      "properties" : {
        "azList" : {
          "items" : {
            "$ref" : "#/definitions/PlacementAZ"
          },
          "type" : "array"
        },
        "code" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "uuid" : {
          "format" : "uuid",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "PlatformLoggingConfig" : {
      "properties" : {
        "level" : {
          "enum" : [ "ERROR", "WARN", "INFO", "DEBUG", "TRACE" ],
          "type" : "string"
        },
        "maxHistory" : {
          "format" : "int32",
          "minimum" : 0,
          "type" : "integer"
        },
        "rolloverPattern" : {
          "type" : "string"
        }
      },
      "required" : [ "level", "maxHistory", "rolloverPattern" ],
      "type" : "object"
    },
    "Provider" : {
      "properties" : {
        "active" : {
          "description" : "Provider active status",
          "readOnly" : true,
          "type" : "boolean"
        },
        "airGapInstall" : {
          "description" : "Transient property - only present in mutate API request",
          "type" : "boolean"
        },
        "code" : {
          "description" : "Provider cloud code",
          "type" : "string"
        },
        "config" : {
          "additionalProperties" : {
            "type" : "string"
          },
          "type" : "object"
        },
        "customHostCidrs" : {
          "description" : "Transient property - only present in mutate API request",
          "items" : {
            "type" : "string"
          },
          "type" : "array"
        },
        "customerUUID" : {
          "description" : "Customer uuid",
          "format" : "uuid",
          "readOnly" : true,
          "type" : "string"
        },
        "destVpcId" : {
          "description" : "Transient property - only present in mutate API request",
          "type" : "string"
        },
        "hostVpcId" : {
          "description" : "Transient property - only present in mutate API request",
          "type" : "string"
        },
        "hostVpcRegion" : {
          "description" : "Transient property - only present in mutate API request",
          "type" : "string"
        },
        "hostedZoneId" : {
          "type" : "string"
        },
        "hostedZoneName" : {
          "type" : "string"
        },
        "keyPairName" : {
          "description" : "Transient property - only present in mutate API request",
          "type" : "string"
        },
        "name" : {
          "description" : "Provider name",
          "type" : "string"
        },
        "ntpServers" : {
          "description" : "Transient property - only present in mutate API request",
          "items" : {
            "type" : "string"
          },
          "type" : "array"
        },
        "overrideKeyValidate" : {
          "description" : "Transient property - only present in mutate API request",
          "type" : "boolean"
        },
        "regions" : {
          "items" : {
            "$ref" : "#/definitions/Region"
          },
          "type" : "array"
        },
        "setUpChrony" : {
          "description" : "Transient property - only present in mutate API request",
          "type" : "boolean"
        },
        "showSetUpChrony" : {
          "description" : "Transient property - only present in mutate API request",
          "type" : "boolean"
        },
        "sshPort" : {
          "description" : "Transient property - only present in mutate API request",
          "format" : "int32",
          "type" : "integer"
        },
        "sshPrivateKeyContent" : {
          "description" : "Transient property - only present in mutate API request",
          "type" : "string"
        },
        "sshUser" : {
          "description" : "Transient property - only present in mutate API request",
          "type" : "string"
        },
        "uuid" : {
          "description" : "Provider uuid",
          "format" : "uuid",
          "readOnly" : true,
          "type" : "string"
        }
      },
      "required" : [ "regions" ],
      "type" : "object"
    },
    "Region" : {
      "description" : "Region within a given provider. Typically, this maps to a single cloud provider region.",
      "properties" : {
        "active" : {
          "readOnly" : true,
          "type" : "boolean"
        },
        "architecture" : {
          "enum" : [ "x86_64", "arm64" ],
          "type" : "string"
        },
        "code" : {
          "description" : "Cloud provider region code",
          "example" : "us-west-2",
          "type" : "string"
        },
        "config" : {
          "additionalProperties" : {
            "type" : "string"
          },
          "type" : "object"
        },
        "latitude" : {
          "description" : "The region's latitude",
          "example" : 37.22,
          "format" : "double",
          "readOnly" : true,
          "type" : "number"
        },
        "longitude" : {
          "description" : "The region's longitude",
          "example" : -120.01,
          "format" : "double",
          "readOnly" : true,
          "type" : "number"
        },
        "name" : {
          "description" : "Cloud provider region name",
          "example" : "US West (Oregon)",
          "readOnly" : true,
          "type" : "string"
        },
        "securityGroupId" : {
          "type" : "string"
        },
        "uuid" : {
          "description" : "Region UUID",
          "format" : "uuid",
          "readOnly" : true,
          "type" : "string"
        },
        "vnetName" : {
          "type" : "string"
        },
        "ybImage" : {
          "description" : "The AMI to be used in this region.",
          "example" : "TODO",
          "type" : "string"
        },
        "zones" : {
          "items" : {
            "$ref" : "#/definitions/AvailabilityZone"
          },
          "type" : "array"
        }
      },
      "required" : [ "zones" ],
      "type" : "object"
    },
    "RegionFormData" : {
      "properties" : {
        "code" : {
          "type" : "string"
        },
        "destVpcId" : {
          "type" : "string"
        },
        "hostVpcId" : {
          "type" : "string"
        },
        "hostVpcRegion" : {
          "type" : "string"
        },
        "latitude" : {
          "format" : "double",
          "type" : "number"
        },
        "longitude" : {
          "format" : "double",
          "type" : "number"
        },
        "name" : {
          "type" : "string"
        },
        "ybImage" : {
          "type" : "string"
        }
      },
      "required" : [ "code", "destVpcId", "hostVpcId", "hostVpcRegion", "latitude", "longitude", "name", "ybImage" ],
      "type" : "object"
    },
    "RegionLocations" : {
      "properties" : {
        "LOCATION" : {
          "type" : "string"
        },
        "REGION" : {
          "type" : "string"
        }
      },
      "required" : [ "LOCATION", "REGION" ],
      "type" : "object"
    },
    "ReleaseFormData" : {
      "description" : "Specification for release locations",
      "properties" : {
        "gcs" : {
          "$ref" : "#/definitions/GCSLocation"
        },
        "http" : {
          "$ref" : "#/definitions/HttpLocation"
        },
        "s3" : {
          "$ref" : "#/definitions/S3Location"
        },
        "version" : {
          "type" : "string"
        }
      },
      "required" : [ "gcs", "http", "s3", "version" ],
      "type" : "object"
    },
    "ReleaseMetadata" : {
      "description" : "Yugabyte release metadata",
      "properties" : {
        "chartPath" : {
          "description" : "Helm chart path",
          "type" : "string"
        },
        "filePath" : {
          "description" : "Release file path",
          "type" : "string"
        },
        "gcs" : {
          "$ref" : "#/definitions/GCSLocation",
          "description" : "GCS link and credentials"
        },
        "http" : {
          "$ref" : "#/definitions/HttpLocation",
          "description" : "HTTP link to the release"
        },
        "imageTag" : {
          "description" : "Release image tag",
          "type" : "string"
        },
        "notes" : {
          "description" : "Release notes",
          "items" : {
            "type" : "string"
          },
          "type" : "array"
        },
        "packages" : {
          "description" : "Release packages",
          "items" : {
            "$ref" : "#/definitions/Package"
          },
          "type" : "array"
        },
        "s3" : {
          "$ref" : "#/definitions/S3Location",
          "description" : "S3 link and credentials"
        },
        "state" : {
          "description" : "Release state",
          "enum" : [ "ACTIVE", "DISABLED", "DELETED" ],
          "example" : "ACTIVE",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "ResizeNodeParams" : {
      "properties" : {
        "allowInsecure" : {
          "type" : "boolean"
        },
        "backupInProgress" : {
          "type" : "boolean"
        },
        "capability" : {
          "enum" : [ "READ_ONLY", "EDITS_ALLOWED" ],
          "type" : "string"
        },
        "clientRootCA" : {
          "format" : "uuid",
          "type" : "string"
        },
        "clusters" : {
          "items" : {
            "$ref" : "#/definitions/Cluster"
          },
          "type" : "array"
        },
        "cmkArn" : {
          "description" : "Amazon Resource Name (ARN) of the CMK",
          "type" : "string"
        },
        "communicationPorts" : {
          "$ref" : "#/definitions/CommunicationPorts",
          "description" : "Communication ports"
        },
        "currentClusterType" : {
          "enum" : [ "PRIMARY", "ASYNC" ],
          "type" : "string"
        },
        "deviceInfo" : {
          "$ref" : "#/definitions/DeviceInfo",
          "description" : "Device information"
        },
        "encryptionAtRestConfig" : {
          "$ref" : "#/definitions/EncryptionAtRestConfig",
          "description" : "Encryption at rest configation"
        },
        "errorString" : {
          "description" : "Error message",
          "type" : "string"
        },
        "expectedUniverseVersion" : {
          "description" : "Expected universe version",
          "format" : "int32",
          "type" : "integer"
        },
        "extraDependencies" : {
          "$ref" : "#/definitions/ExtraDependencies",
          "description" : "Extra dependencies"
        },
        "firstTry" : {
          "description" : "Whether this task has been tried before",
          "type" : "boolean"
        },
        "forceResizeNode" : {
          "type" : "boolean"
        },
        "importedState" : {
          "enum" : [ "NONE", "STARTED", "MASTERS_ADDED", "TSERVERS_ADDED", "IMPORTED" ],
          "type" : "string"
        },
        "itestS3PackagePath" : {
          "type" : "string"
        },
        "kubernetesUpgradeSupported" : {
          "type" : "boolean"
        },
        "nextClusterIndex" : {
          "format" : "int32",
          "type" : "integer"
        },
        "nodeDetailsSet" : {
          "description" : "Node details",
          "items" : {
            "$ref" : "#/definitions/NodeDetails"
          },
          "type" : "array",
          "uniqueItems" : true
        },
        "nodeExporterUser" : {
          "description" : "Node exporter user",
          "type" : "string"
        },
        "nodePrefix" : {
          "type" : "string"
        },
        "nodesResizeAvailable" : {
          "type" : "boolean"
        },
        "previousTaskUUID" : {
          "description" : "Previous task UUID only if this task is a retry",
          "format" : "uuid",
          "type" : "string"
        },
        "remotePackagePath" : {
          "type" : "string"
        },
        "resetAZConfig" : {
          "type" : "boolean"
        },
        "rootAndClientRootCASame" : {
          "type" : "boolean"
        },
        "rootCA" : {
          "format" : "uuid",
          "type" : "string"
        },
        "setTxnTableWaitCountFlag" : {
          "type" : "boolean"
        },
        "sleepAfterMasterRestartMillis" : {
          "format" : "int32",
          "type" : "integer"
        },
        "sleepAfterTServerRestartMillis" : {
          "format" : "int32",
          "type" : "integer"
        },
        "sourceXClusterConfigs" : {
          "description" : "The source universe's xcluster replication relationships",
          "items" : {
            "format" : "uuid",
            "type" : "string"
          },
          "readOnly" : true,
          "type" : "array"
        },
        "targetXClusterConfigs" : {
          "description" : "The target universe's xcluster replication relationships",
          "items" : {
            "format" : "uuid",
            "type" : "string"
          },
          "readOnly" : true,
          "type" : "array"
        },
        "universePaused" : {
          "type" : "boolean"
        },
        "universeUUID" : {
          "description" : "Associated universe UUID",
          "format" : "uuid",
          "type" : "string"
        },
        "updateInProgress" : {
          "type" : "boolean"
        },
        "updateSucceeded" : {
          "type" : "boolean"
        },
        "updatingTask" : {
          "enum" : [ "CloudBootstrap", "CloudCleanup", "CreateCassandraTable", "CreateUniverse", "ReadOnlyClusterCreate", "ReadOnlyKubernetesClusterCreate", "ReadOnlyClusterDelete", "CreateKubernetesUniverse", "DestroyUniverse", "PauseUniverse", "ResumeUniverse", "DestroyKubernetesUniverse", "DeleteTable", "BackupUniverse", "RestoreBackup", "MultiTableBackup", "CreateBackup", "EditUniverse", "EditKubernetesUniverse", "ExternalScript", "KubernetesProvision", "ImportIntoTable", "UpgradeUniverse", "RestartUniverse", "SoftwareUpgrade", "SoftwareKubernetesUpgrade", "GFlagsUpgrade", "GFlagsKubernetesUpgrade", "CertsRotate", "CertsRotateKubernetesUpgrade", "TlsToggle", "VMImageUpgrade", "SystemdUpgrade", "CreateRootVolumes", "ReplaceRootVolume", "ChangeInstanceType", "PersistResizeNode", "PersistSystemdUpgrade", "UpdateNodeDetails", "UpgradeKubernetesUniverse", "DeleteNodeFromUniverse", "StopNodeInUniverse", "StartNodeInUniverse", "AddNodeToUniverse", "RemoveNodeFromUniverse", "ReleaseInstanceFromUniverse", "SetUniverseKey", "SetKubernetesUniverseKey", "CreateKMSConfig", "EditKMSConfig", "DeleteKMSConfig", "UpdateDiskSize", "StartMasterOnNode", "CreateXClusterConfig", "EditXClusterConfig", "DeleteXClusterConfig", "SyncXClusterConfig", "CreateSupportBundle", "AnsibleClusterServerCtl", "AnsibleConfigureServers", "AnsibleDestroyServer", "PauseServer", "ResumeServer", "AnsibleSetupServer", "AnsibleCreateServer", "PrecheckNode", "PrecheckNodeDetached", "AnsibleUpdateNodeInfo", "BulkImport", "ChangeMasterConfig", "ChangeAdminPassword", "CreateTable", "DeleteNode", "DeleteBackup", "DeleteBackupYb", "DeleteCustomerConfig", "DeleteCustomerStorageConfig", "UpdateNodeProcess", "DeleteTableFromUniverse", "LoadBalancerStateChange", "ModifyBlackList", "ManipulateDnsRecordTask", "RemoveUniverseEntry", "SetFlagInMemory", "SetNodeState", "SwamperTargetsFileUpdate", "UniverseUpdateSucceeded", "UpdateAndPersistGFlags", "UpdatePlacementInfo", "UpdateSoftwareVersion", "WaitForDataMove", "WaitForLeaderBlacklistCompletion", "WaitForFollowerLag", "WaitForLoadBalance", "WaitForMasterLeader", "WaitForServer", "WaitForTServerHeartBeats", "DeleteClusterFromUniverse", "InstanceActions", "WaitForServerReady", "RunExternalScript", "XClusterConfigSetup", "XClusterConfigSetStatus", "XClusterConfigModifyTables", "XClusterConfigRename", "XClusterConfigDelete", "XClusterConfigSync", "XClusterConfigUpdateMasterAddresses", "CloudAccessKeyCleanup", "CloudAccessKeySetup", "CloudInitializer", "CloudProviderCleanup", "CloudRegionCleanup", "CloudRegionSetup", "CloudSetup", "BackupTable", "BackupTableYb", "BackupUniverseKeys", "RestoreBackupYb", "RestoreUniverseKeys", "RestoreUniverseKeysYb", "WaitForLeadersOnPreferredOnly", "EnableEncryptionAtRest", "DisableEncryptionAtRest", "DestroyEncryptionAtRest", "KubernetesCommandExecutor", "KubernetesWaitForPod", "KubernetesCheckNumPod", "SetActiveUniverseKeys", "CopyEncryptionKeyFile", "WaitForEncryptionKeyInMemory", "UnivSetCertificate", "CreateAlertDefinitions", "ManageAlertDefinitions", "UniverseSetTlsParams", "UniverseUpdateRootCert", "ResetUniverseVersion", "DeleteCertificate", "SetNodeStatus", "CheckMasterLeader", "CheckMasters", "CheckTServers", "WaitForTServerHBs", "CreatePrometheusSwamperConfig", "PreflightNodeCheck", "RunYsqlUpgrade", "ResizeNode", "CheckMemory", "UpdateMountedDisks", "TransferXClusterCerts", "CreateTableSpacesInUniverse", "CreateTableSpaces", "ThirdpartySoftwareUpgrade" ],
          "type" : "string"
        },
        "updatingTaskUUID" : {
          "format" : "uuid",
          "type" : "string"
        },
        "upgradeOption" : {
          "enum" : [ "Rolling", "Non-Rolling", "Non-Restart" ],
          "type" : "string"
        },
        "useNewHelmNamingStyle" : {
          "type" : "boolean"
        },
        "userAZSelected" : {
          "type" : "boolean"
        },
        "ybPrevSoftwareVersion" : {
          "description" : "Previous software version",
          "type" : "string"
        }
      },
      "required" : [ "clusters", "forceResizeNode", "kubernetesUpgradeSupported", "sleepAfterMasterRestartMillis", "sleepAfterTServerRestartMillis", "upgradeOption" ],
      "type" : "object"
    },
    "RestoreBackupParams" : {
      "properties" : {
        "actionType" : {
          "description" : "Action type",
          "enum" : [ "RESTORE", "RESTORE_KEYS" ],
          "type" : "string"
        },
        "alterLoadBalancer" : {
          "description" : "Alter load balancer state",
          "type" : "boolean"
        },
        "backupStorageInfoList" : {
          "description" : "Backup's storage info to restore",
          "items" : {
            "$ref" : "#/definitions/BackupStorageInfo"
          },
          "type" : "array"
        },
        "cmkArn" : {
          "description" : "Amazon Resource Name (ARN) of the CMK",
          "type" : "string"
        },
        "communicationPorts" : {
          "$ref" : "#/definitions/CommunicationPorts",
          "description" : "Communication ports"
        },
        "customerUUID" : {
          "description" : "Customer UUID",
          "format" : "uuid",
          "type" : "string"
        },
        "deviceInfo" : {
          "$ref" : "#/definitions/DeviceInfo",
          "description" : "Device information"
        },
        "disableChecksum" : {
          "description" : "Disable checksum",
          "type" : "boolean"
        },
        "enableVerboseLogs" : {
          "description" : "Is verbose logging enabled",
          "type" : "boolean"
        },
        "encryptionAtRestConfig" : {
          "$ref" : "#/definitions/EncryptionAtRestConfig",
          "description" : "Encryption at rest configation"
        },
        "errorString" : {
          "description" : "Error message",
          "type" : "string"
        },
        "expectedUniverseVersion" : {
          "description" : "Expected universe version",
          "format" : "int32",
          "type" : "integer"
        },
        "extraDependencies" : {
          "$ref" : "#/definitions/ExtraDependencies",
          "description" : "Extra dependencies"
        },
        "firstTry" : {
          "description" : "Whether this task has been tried before",
          "type" : "boolean"
        },
        "kmsConfigUUID" : {
          "description" : "KMS configuration UUID",
          "format" : "uuid",
          "type" : "string"
        },
        "newOwner" : {
          "description" : "User name of the new tables owner",
          "type" : "string"
        },
        "nodeDetailsSet" : {
          "description" : "Node details",
          "items" : {
            "$ref" : "#/definitions/NodeDetails"
          },
          "type" : "array",
          "uniqueItems" : true
        },
        "nodeExporterUser" : {
          "description" : "Node exporter user",
          "type" : "string"
        },
        "oldOwner" : {
          "description" : "User name of the current tables owner",
          "type" : "string"
        },
        "parallelism" : {
          "description" : "Number of concurrent commands to run on nodes over SSH",
          "format" : "int32",
          "type" : "integer"
        },
        "previousTaskUUID" : {
          "description" : "Previous task UUID only if this task is a retry",
          "format" : "uuid",
          "type" : "string"
        },
        "restoreTimeStamp" : {
          "description" : "Restore TimeStamp",
          "type" : "string"
        },
        "sourceXClusterConfigs" : {
          "description" : "The source universe's xcluster replication relationships",
          "items" : {
            "format" : "uuid",
            "type" : "string"
          },
          "readOnly" : true,
          "type" : "array"
        },
        "storageConfigUUID" : {
          "description" : "Storage config uuid",
          "format" : "uuid",
          "type" : "string"
        },
        "targetXClusterConfigs" : {
          "description" : "The target universe's xcluster replication relationships",
          "items" : {
            "format" : "uuid",
            "type" : "string"
          },
          "readOnly" : true,
          "type" : "array"
        },
        "universeUUID" : {
          "description" : "Universe UUID",
          "format" : "uuid",
          "type" : "string"
        },
        "useTablespaces" : {
          "description" : "Is tablespaces information included",
          "type" : "boolean"
        },
        "ybPrevSoftwareVersion" : {
          "description" : "Previous software version",
          "type" : "string"
        }
      },
      "required" : [ "universeUUID" ],
      "type" : "object"
    },
    "RunQueryFormData" : {
      "properties" : {
        "db_name" : {
          "type" : "string"
        },
        "query" : {
          "type" : "string"
        },
        "tableType" : {
          "enum" : [ "YQL_TABLE_TYPE", "REDIS_TABLE_TYPE", "PGSQL_TABLE_TYPE", "TRANSACTION_STATUS_TABLE_TYPE" ],
          "type" : "string"
        }
      },
      "required" : [ "db_name", "query", "tableType" ],
      "type" : "object"
    },
    "RuntimeConfigData" : {
      "description" : "Runtime configuration data",
      "properties" : {
        "scopedConfigList" : {
          "description" : "List of scoped configurations",
          "items" : {
            "$ref" : "#/definitions/ScopedConfig"
          },
          "type" : "array"
        }
      },
      "type" : "object"
    },
    "S3Location" : {
      "properties" : {
        "paths" : {
          "$ref" : "#/definitions/PackagePaths",
          "description" : "package paths"
        }
      },
      "type" : "object"
    },
    "Schedule" : {
      "description" : "Backup schedule",
      "properties" : {
        "backlogStatus" : {
          "description" : "Backlog status of schedule arose due to conflicts",
          "readOnly" : true,
          "type" : "boolean"
        },
        "cronExpression" : {
          "description" : "Cron expression for the schedule",
          "type" : "string"
        },
        "customerUUID" : {
          "description" : "Customer UUID",
          "format" : "uuid",
          "readOnly" : true,
          "type" : "string"
        },
        "failureCount" : {
          "description" : "Number of failed backup attempts",
          "format" : "int32",
          "readOnly" : true,
          "type" : "integer"
        },
        "frequency" : {
          "description" : "Frequency of the schedule, in milli seconds",
          "format" : "int64",
          "type" : "integer"
        },
        "frequencyTimeUnit" : {
          "description" : "Time unit of frequency",
          "enum" : [ "NANOSECONDS", "MICROSECONDS", "MILLISECONDS", "SECONDS", "MINUTES", "HOURS", "DAYS", "MONTHS", "YEARS" ],
          "type" : "string"
        },
        "nextScheduleTaskTime" : {
          "description" : "Time on which schedule is expected to run",
          "format" : "date-time",
          "readOnly" : true,
          "type" : "string"
        },
        "runningState" : {
          "description" : "Running state of the schedule",
          "type" : "boolean"
        },
        "scheduleName" : {
          "description" : "Name of the schedule",
          "readOnly" : true,
          "type" : "string"
        },
        "scheduleUUID" : {
          "description" : "Schedule UUID",
          "format" : "uuid",
          "readOnly" : true,
          "type" : "string"
        },
        "status" : {
          "description" : "Status of the task. Possible values are _Active_, _Paused_, or _Stopped_.",
          "enum" : [ "Active", "Paused", "Stopped" ],
          "readOnly" : true,
          "type" : "string"
        },
        "taskType" : {
          "description" : "Type of task to be scheduled.",
          "enum" : [ "CloudBootstrap", "CloudCleanup", "CreateCassandraTable", "CreateUniverse", "ReadOnlyClusterCreate", "ReadOnlyKubernetesClusterCreate", "ReadOnlyClusterDelete", "CreateKubernetesUniverse", "DestroyUniverse", "PauseUniverse", "ResumeUniverse", "DestroyKubernetesUniverse", "DeleteTable", "BackupUniverse", "RestoreBackup", "MultiTableBackup", "CreateBackup", "EditUniverse", "EditKubernetesUniverse", "ExternalScript", "KubernetesProvision", "ImportIntoTable", "UpgradeUniverse", "RestartUniverse", "SoftwareUpgrade", "SoftwareKubernetesUpgrade", "GFlagsUpgrade", "GFlagsKubernetesUpgrade", "CertsRotate", "CertsRotateKubernetesUpgrade", "TlsToggle", "VMImageUpgrade", "SystemdUpgrade", "CreateRootVolumes", "ReplaceRootVolume", "ChangeInstanceType", "PersistResizeNode", "PersistSystemdUpgrade", "UpdateNodeDetails", "UpgradeKubernetesUniverse", "DeleteNodeFromUniverse", "StopNodeInUniverse", "StartNodeInUniverse", "AddNodeToUniverse", "RemoveNodeFromUniverse", "ReleaseInstanceFromUniverse", "SetUniverseKey", "SetKubernetesUniverseKey", "CreateKMSConfig", "EditKMSConfig", "DeleteKMSConfig", "UpdateDiskSize", "StartMasterOnNode", "CreateXClusterConfig", "EditXClusterConfig", "DeleteXClusterConfig", "SyncXClusterConfig", "CreateSupportBundle", "AnsibleClusterServerCtl", "AnsibleConfigureServers", "AnsibleDestroyServer", "PauseServer", "ResumeServer", "AnsibleSetupServer", "AnsibleCreateServer", "PrecheckNode", "PrecheckNodeDetached", "AnsibleUpdateNodeInfo", "BulkImport", "ChangeMasterConfig", "ChangeAdminPassword", "CreateTable", "DeleteNode", "DeleteBackup", "DeleteBackupYb", "DeleteCustomerConfig", "DeleteCustomerStorageConfig", "UpdateNodeProcess", "DeleteTableFromUniverse", "LoadBalancerStateChange", "ModifyBlackList", "ManipulateDnsRecordTask", "RemoveUniverseEntry", "SetFlagInMemory", "SetNodeState", "SwamperTargetsFileUpdate", "UniverseUpdateSucceeded", "UpdateAndPersistGFlags", "UpdatePlacementInfo", "UpdateSoftwareVersion", "WaitForDataMove", "WaitForLeaderBlacklistCompletion", "WaitForFollowerLag", "WaitForLoadBalance", "WaitForMasterLeader", "WaitForServer", "WaitForTServerHeartBeats", "DeleteClusterFromUniverse", "InstanceActions", "WaitForServerReady", "RunExternalScript", "XClusterConfigSetup", "XClusterConfigSetStatus", "XClusterConfigModifyTables", "XClusterConfigRename", "XClusterConfigDelete", "XClusterConfigSync", "XClusterConfigUpdateMasterAddresses", "CloudAccessKeyCleanup", "CloudAccessKeySetup", "CloudInitializer", "CloudProviderCleanup", "CloudRegionCleanup", "CloudRegionSetup", "CloudSetup", "BackupTable", "BackupTableYb", "BackupUniverseKeys", "RestoreBackupYb", "RestoreUniverseKeys", "RestoreUniverseKeysYb", "WaitForLeadersOnPreferredOnly", "EnableEncryptionAtRest", "DisableEncryptionAtRest", "DestroyEncryptionAtRest", "KubernetesCommandExecutor", "KubernetesWaitForPod", "KubernetesCheckNumPod", "SetActiveUniverseKeys", "CopyEncryptionKeyFile", "WaitForEncryptionKeyInMemory", "UnivSetCertificate", "CreateAlertDefinitions", "ManageAlertDefinitions", "UniverseSetTlsParams", "UniverseUpdateRootCert", "ResetUniverseVersion", "DeleteCertificate", "SetNodeStatus", "CheckMasterLeader", "CheckMasters", "CheckTServers", "WaitForTServerHBs", "CreatePrometheusSwamperConfig", "PreflightNodeCheck", "RunYsqlUpgrade", "ResizeNode", "CheckMemory", "UpdateMountedDisks", "TransferXClusterCerts", "CreateTableSpacesInUniverse", "CreateTableSpaces", "ThirdpartySoftwareUpgrade" ],
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "ScheduleApiFilter" : {
      "properties" : {
        "status" : {
          "items" : {
            "enum" : [ "Active", "Paused", "Stopped" ],
            "type" : "string"
          },
          "type" : "array",
          "uniqueItems" : true
        },
        "taskTypes" : {
          "items" : {
            "enum" : [ "CloudBootstrap", "CloudCleanup", "CreateCassandraTable", "CreateUniverse", "ReadOnlyClusterCreate", "ReadOnlyKubernetesClusterCreate", "ReadOnlyClusterDelete", "CreateKubernetesUniverse", "DestroyUniverse", "PauseUniverse", "ResumeUniverse", "DestroyKubernetesUniverse", "DeleteTable", "BackupUniverse", "RestoreBackup", "MultiTableBackup", "CreateBackup", "EditUniverse", "EditKubernetesUniverse", "ExternalScript", "KubernetesProvision", "ImportIntoTable", "UpgradeUniverse", "RestartUniverse", "SoftwareUpgrade", "SoftwareKubernetesUpgrade", "GFlagsUpgrade", "GFlagsKubernetesUpgrade", "CertsRotate", "CertsRotateKubernetesUpgrade", "TlsToggle", "VMImageUpgrade", "SystemdUpgrade", "CreateRootVolumes", "ReplaceRootVolume", "ChangeInstanceType", "PersistResizeNode", "PersistSystemdUpgrade", "UpdateNodeDetails", "UpgradeKubernetesUniverse", "DeleteNodeFromUniverse", "StopNodeInUniverse", "StartNodeInUniverse", "AddNodeToUniverse", "RemoveNodeFromUniverse", "ReleaseInstanceFromUniverse", "SetUniverseKey", "SetKubernetesUniverseKey", "CreateKMSConfig", "EditKMSConfig", "DeleteKMSConfig", "UpdateDiskSize", "StartMasterOnNode", "CreateXClusterConfig", "EditXClusterConfig", "DeleteXClusterConfig", "SyncXClusterConfig", "CreateSupportBundle", "AnsibleClusterServerCtl", "AnsibleConfigureServers", "AnsibleDestroyServer", "PauseServer", "ResumeServer", "AnsibleSetupServer", "AnsibleCreateServer", "PrecheckNode", "PrecheckNodeDetached", "AnsibleUpdateNodeInfo", "BulkImport", "ChangeMasterConfig", "ChangeAdminPassword", "CreateTable", "DeleteNode", "DeleteBackup", "DeleteBackupYb", "DeleteCustomerConfig", "DeleteCustomerStorageConfig", "UpdateNodeProcess", "DeleteTableFromUniverse", "LoadBalancerStateChange", "ModifyBlackList", "ManipulateDnsRecordTask", "RemoveUniverseEntry", "SetFlagInMemory", "SetNodeState", "SwamperTargetsFileUpdate", "UniverseUpdateSucceeded", "UpdateAndPersistGFlags", "UpdatePlacementInfo", "UpdateSoftwareVersion", "WaitForDataMove", "WaitForLeaderBlacklistCompletion", "WaitForFollowerLag", "WaitForLoadBalance", "WaitForMasterLeader", "WaitForServer", "WaitForTServerHeartBeats", "DeleteClusterFromUniverse", "InstanceActions", "WaitForServerReady", "RunExternalScript", "XClusterConfigSetup", "XClusterConfigSetStatus", "XClusterConfigModifyTables", "XClusterConfigRename", "XClusterConfigDelete", "XClusterConfigSync", "XClusterConfigUpdateMasterAddresses", "CloudAccessKeyCleanup", "CloudAccessKeySetup", "CloudInitializer", "CloudProviderCleanup", "CloudRegionCleanup", "CloudRegionSetup", "CloudSetup", "BackupTable", "BackupTableYb", "BackupUniverseKeys", "RestoreBackupYb", "RestoreUniverseKeys", "RestoreUniverseKeysYb", "WaitForLeadersOnPreferredOnly", "EnableEncryptionAtRest", "DisableEncryptionAtRest", "DestroyEncryptionAtRest", "KubernetesCommandExecutor", "KubernetesWaitForPod", "KubernetesCheckNumPod", "SetActiveUniverseKeys", "CopyEncryptionKeyFile", "WaitForEncryptionKeyInMemory", "UnivSetCertificate", "CreateAlertDefinitions", "ManageAlertDefinitions", "UniverseSetTlsParams", "UniverseUpdateRootCert", "ResetUniverseVersion", "DeleteCertificate", "SetNodeStatus", "CheckMasterLeader", "CheckMasters", "CheckTServers", "WaitForTServerHBs", "CreatePrometheusSwamperConfig", "PreflightNodeCheck", "RunYsqlUpgrade", "ResizeNode", "CheckMemory", "UpdateMountedDisks", "TransferXClusterCerts", "CreateTableSpacesInUniverse", "CreateTableSpaces", "ThirdpartySoftwareUpgrade" ],
            "type" : "string"
          },
          "type" : "array",
          "uniqueItems" : true
        },
        "universeUUIDList" : {
          "items" : {
            "format" : "uuid",
            "type" : "string"
          },
          "type" : "array",
          "uniqueItems" : true
        }
      },
      "required" : [ "status", "taskTypes", "universeUUIDList" ],
      "type" : "object"
    },
    "SchedulePagedApiQuery" : {
      "properties" : {
        "direction" : {
          "enum" : [ "ASC", "DESC" ],
          "type" : "string"
        },
        "filter" : {
          "$ref" : "#/definitions/ScheduleApiFilter"
        },
        "limit" : {
          "format" : "int32",
          "type" : "integer"
        },
        "needTotalCount" : {
          "type" : "boolean"
        },
        "offset" : {
          "format" : "int32",
          "type" : "integer"
        },
        "sortBy" : {
          "enum" : [ "taskType", "scheduleUUID" ],
          "type" : "string"
        }
      },
      "required" : [ "direction", "filter", "limit", "needTotalCount", "offset", "sortBy" ],
      "type" : "object"
    },
    "SchedulePagedResponse" : {
      "properties" : {
        "entities" : {
          "items" : {
            "$ref" : "#/definitions/Schedule"
          },
          "type" : "array"
        },
        "hasNext" : {
          "type" : "boolean"
        },
        "hasPrev" : {
          "type" : "boolean"
        },
        "totalCount" : {
          "format" : "int32",
          "type" : "integer"
        }
      },
      "required" : [ "entities", "hasNext", "hasPrev", "totalCount" ],
      "type" : "object"
    },
    "ScopedConfig" : {
      "description" : "Scoped configuration",
      "properties" : {
        "configEntries" : {
          "description" : "List of configurations",
          "items" : {
            "$ref" : "#/definitions/ConfigEntry"
          },
          "type" : "array"
        },
        "mutableScope" : {
          "description" : "Mutability of the scope. Only super admin users can change global scope; other scopes are customer-mutable.",
          "type" : "boolean"
        },
        "type" : {
          "description" : "Scope type",
          "enum" : [ "GLOBAL", "CUSTOMER", "UNIVERSE", "PROVIDER" ],
          "type" : "string"
        },
        "uuid" : {
          "description" : "Scope UIID",
          "format" : "uuid",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "SessionInfo" : {
      "description" : "Session information",
      "properties" : {
        "apiToken" : {
          "description" : "API token",
          "type" : "string"
        },
        "authToken" : {
          "description" : "Auth token",
          "type" : "string"
        },
        "customerUUID" : {
          "description" : "Customer UUID",
          "format" : "uuid",
          "type" : "string"
        },
        "userUUID" : {
          "description" : "User UUID",
          "format" : "uuid",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "SmtpData" : {
      "description" : "SMTP configuration information",
      "properties" : {
        "emailFrom" : {
          "description" : "SMTP email 'from' address",
          "example" : "test@example.com",
          "type" : "string"
        },
        "smtpPassword" : {
          "description" : "SMTP password",
          "example" : "XurenRknsc",
          "type" : "string"
        },
        "smtpPort" : {
          "description" : "SMTP port number",
          "example" : 465,
          "format" : "int32",
          "type" : "integer"
        },
        "smtpServer" : {
          "description" : "SMTP server",
          "example" : "smtp.example.com",
          "type" : "string"
        },
        "smtpUsername" : {
          "description" : "SMTP email username",
          "example" : "testsmtp",
          "type" : "string"
        },
        "useSSL" : {
          "description" : "Connect to SMTP server using SSL",
          "example" : true,
          "type" : "boolean"
        },
        "useTLS" : {
          "description" : "Connect to SMTP server using TLS",
          "example" : false,
          "type" : "boolean"
        }
      },
      "type" : "object"
    },
    "SoftwareUpgradeParams" : {
      "properties" : {
        "allowInsecure" : {
          "type" : "boolean"
        },
        "backupInProgress" : {
          "type" : "boolean"
        },
        "capability" : {
          "enum" : [ "READ_ONLY", "EDITS_ALLOWED" ],
          "type" : "string"
        },
        "clientRootCA" : {
          "format" : "uuid",
          "type" : "string"
        },
        "clusters" : {
          "items" : {
            "$ref" : "#/definitions/Cluster"
          },
          "type" : "array"
        },
        "cmkArn" : {
          "description" : "Amazon Resource Name (ARN) of the CMK",
          "type" : "string"
        },
        "communicationPorts" : {
          "$ref" : "#/definitions/CommunicationPorts",
          "description" : "Communication ports"
        },
        "currentClusterType" : {
          "enum" : [ "PRIMARY", "ASYNC" ],
          "type" : "string"
        },
        "deviceInfo" : {
          "$ref" : "#/definitions/DeviceInfo",
          "description" : "Device information"
        },
        "encryptionAtRestConfig" : {
          "$ref" : "#/definitions/EncryptionAtRestConfig",
          "description" : "Encryption at rest configation"
        },
        "errorString" : {
          "description" : "Error message",
          "type" : "string"
        },
        "expectedUniverseVersion" : {
          "description" : "Expected universe version",
          "format" : "int32",
          "type" : "integer"
        },
        "extraDependencies" : {
          "$ref" : "#/definitions/ExtraDependencies",
          "description" : "Extra dependencies"
        },
        "firstTry" : {
          "description" : "Whether this task has been tried before",
          "type" : "boolean"
        },
        "importedState" : {
          "enum" : [ "NONE", "STARTED", "MASTERS_ADDED", "TSERVERS_ADDED", "IMPORTED" ],
          "type" : "string"
        },
        "itestS3PackagePath" : {
          "type" : "string"
        },
        "kubernetesUpgradeSupported" : {
          "type" : "boolean"
        },
        "nextClusterIndex" : {
          "format" : "int32",
          "type" : "integer"
        },
        "nodeDetailsSet" : {
          "description" : "Node details",
          "items" : {
            "$ref" : "#/definitions/NodeDetails"
          },
          "type" : "array",
          "uniqueItems" : true
        },
        "nodeExporterUser" : {
          "description" : "Node exporter user",
          "type" : "string"
        },
        "nodePrefix" : {
          "type" : "string"
        },
        "nodesResizeAvailable" : {
          "type" : "boolean"
        },
        "previousTaskUUID" : {
          "description" : "Previous task UUID only if this task is a retry",
          "format" : "uuid",
          "type" : "string"
        },
        "remotePackagePath" : {
          "type" : "string"
        },
        "resetAZConfig" : {
          "type" : "boolean"
        },
        "rootAndClientRootCASame" : {
          "type" : "boolean"
        },
        "rootCA" : {
          "format" : "uuid",
          "type" : "string"
        },
        "setTxnTableWaitCountFlag" : {
          "type" : "boolean"
        },
        "sleepAfterMasterRestartMillis" : {
          "format" : "int32",
          "type" : "integer"
        },
        "sleepAfterTServerRestartMillis" : {
          "format" : "int32",
          "type" : "integer"
        },
        "sourceXClusterConfigs" : {
          "description" : "The source universe's xcluster replication relationships",
          "items" : {
            "format" : "uuid",
            "type" : "string"
          },
          "readOnly" : true,
          "type" : "array"
        },
        "targetXClusterConfigs" : {
          "description" : "The target universe's xcluster replication relationships",
          "items" : {
            "format" : "uuid",
            "type" : "string"
          },
          "readOnly" : true,
          "type" : "array"
        },
        "universePaused" : {
          "type" : "boolean"
        },
        "universeUUID" : {
          "description" : "Associated universe UUID",
          "format" : "uuid",
          "type" : "string"
        },
        "updateInProgress" : {
          "type" : "boolean"
        },
        "updateSucceeded" : {
          "type" : "boolean"
        },
        "updatingTask" : {
          "enum" : [ "CloudBootstrap", "CloudCleanup", "CreateCassandraTable", "CreateUniverse", "ReadOnlyClusterCreate", "ReadOnlyKubernetesClusterCreate", "ReadOnlyClusterDelete", "CreateKubernetesUniverse", "DestroyUniverse", "PauseUniverse", "ResumeUniverse", "DestroyKubernetesUniverse", "DeleteTable", "BackupUniverse", "RestoreBackup", "MultiTableBackup", "CreateBackup", "EditUniverse", "EditKubernetesUniverse", "ExternalScript", "KubernetesProvision", "ImportIntoTable", "UpgradeUniverse", "RestartUniverse", "SoftwareUpgrade", "SoftwareKubernetesUpgrade", "GFlagsUpgrade", "GFlagsKubernetesUpgrade", "CertsRotate", "CertsRotateKubernetesUpgrade", "TlsToggle", "VMImageUpgrade", "SystemdUpgrade", "CreateRootVolumes", "ReplaceRootVolume", "ChangeInstanceType", "PersistResizeNode", "PersistSystemdUpgrade", "UpdateNodeDetails", "UpgradeKubernetesUniverse", "DeleteNodeFromUniverse", "StopNodeInUniverse", "StartNodeInUniverse", "AddNodeToUniverse", "RemoveNodeFromUniverse", "ReleaseInstanceFromUniverse", "SetUniverseKey", "SetKubernetesUniverseKey", "CreateKMSConfig", "EditKMSConfig", "DeleteKMSConfig", "UpdateDiskSize", "StartMasterOnNode", "CreateXClusterConfig", "EditXClusterConfig", "DeleteXClusterConfig", "SyncXClusterConfig", "CreateSupportBundle", "AnsibleClusterServerCtl", "AnsibleConfigureServers", "AnsibleDestroyServer", "PauseServer", "ResumeServer", "AnsibleSetupServer", "AnsibleCreateServer", "PrecheckNode", "PrecheckNodeDetached", "AnsibleUpdateNodeInfo", "BulkImport", "ChangeMasterConfig", "ChangeAdminPassword", "CreateTable", "DeleteNode", "DeleteBackup", "DeleteBackupYb", "DeleteCustomerConfig", "DeleteCustomerStorageConfig", "UpdateNodeProcess", "DeleteTableFromUniverse", "LoadBalancerStateChange", "ModifyBlackList", "ManipulateDnsRecordTask", "RemoveUniverseEntry", "SetFlagInMemory", "SetNodeState", "SwamperTargetsFileUpdate", "UniverseUpdateSucceeded", "UpdateAndPersistGFlags", "UpdatePlacementInfo", "UpdateSoftwareVersion", "WaitForDataMove", "WaitForLeaderBlacklistCompletion", "WaitForFollowerLag", "WaitForLoadBalance", "WaitForMasterLeader", "WaitForServer", "WaitForTServerHeartBeats", "DeleteClusterFromUniverse", "InstanceActions", "WaitForServerReady", "RunExternalScript", "XClusterConfigSetup", "XClusterConfigSetStatus", "XClusterConfigModifyTables", "XClusterConfigRename", "XClusterConfigDelete", "XClusterConfigSync", "XClusterConfigUpdateMasterAddresses", "CloudAccessKeyCleanup", "CloudAccessKeySetup", "CloudInitializer", "CloudProviderCleanup", "CloudRegionCleanup", "CloudRegionSetup", "CloudSetup", "BackupTable", "BackupTableYb", "BackupUniverseKeys", "RestoreBackupYb", "RestoreUniverseKeys", "RestoreUniverseKeysYb", "WaitForLeadersOnPreferredOnly", "EnableEncryptionAtRest", "DisableEncryptionAtRest", "DestroyEncryptionAtRest", "KubernetesCommandExecutor", "KubernetesWaitForPod", "KubernetesCheckNumPod", "SetActiveUniverseKeys", "CopyEncryptionKeyFile", "WaitForEncryptionKeyInMemory", "UnivSetCertificate", "CreateAlertDefinitions", "ManageAlertDefinitions", "UniverseSetTlsParams", "UniverseUpdateRootCert", "ResetUniverseVersion", "DeleteCertificate", "SetNodeStatus", "CheckMasterLeader", "CheckMasters", "CheckTServers", "WaitForTServerHBs", "CreatePrometheusSwamperConfig", "PreflightNodeCheck", "RunYsqlUpgrade", "ResizeNode", "CheckMemory", "UpdateMountedDisks", "TransferXClusterCerts", "CreateTableSpacesInUniverse", "CreateTableSpaces", "ThirdpartySoftwareUpgrade" ],
          "type" : "string"
        },
        "updatingTaskUUID" : {
          "format" : "uuid",
          "type" : "string"
        },
        "upgradeOption" : {
          "enum" : [ "Rolling", "Non-Rolling", "Non-Restart" ],
          "type" : "string"
        },
        "useNewHelmNamingStyle" : {
          "type" : "boolean"
        },
        "userAZSelected" : {
          "type" : "boolean"
        },
        "ybPrevSoftwareVersion" : {
          "description" : "Previous software version",
          "type" : "string"
        },
        "ybSoftwareVersion" : {
          "type" : "string"
        }
      },
      "required" : [ "clusters", "kubernetesUpgradeSupported", "sleepAfterMasterRestartMillis", "sleepAfterTServerRestartMillis", "upgradeOption", "ybSoftwareVersion" ],
      "type" : "object"
    },
    "SupportBundle" : {
      "properties" : {
        "bundleDetails" : {
          "$ref" : "#/definitions/BundleDetails"
        },
        "bundleUUID" : {
          "format" : "uuid",
          "type" : "string"
        },
        "creationDate" : {
          "format" : "date-time",
          "type" : "string"
        },
        "endDate" : {
          "format" : "date-time",
          "type" : "string"
        },
        "expirationDate" : {
          "format" : "date-time",
          "type" : "string"
        },
        "path" : {
          "type" : "string"
        },
        "scopeUUID" : {
          "format" : "uuid",
          "type" : "string"
        },
        "startDate" : {
          "format" : "date-time",
          "type" : "string"
        },
        "status" : {
          "enum" : [ "Running", "Success", "Failed" ],
          "type" : "string"
        }
      },
      "required" : [ "bundleDetails", "bundleUUID", "creationDate", "endDate", "expirationDate", "path", "scopeUUID", "startDate", "status" ],
      "type" : "object"
    },
    "SystemdUpgradeParams" : {
      "properties" : {
        "allowInsecure" : {
          "type" : "boolean"
        },
        "backupInProgress" : {
          "type" : "boolean"
        },
        "capability" : {
          "enum" : [ "READ_ONLY", "EDITS_ALLOWED" ],
          "type" : "string"
        },
        "clientRootCA" : {
          "format" : "uuid",
          "type" : "string"
        },
        "clusters" : {
          "items" : {
            "$ref" : "#/definitions/Cluster"
          },
          "type" : "array"
        },
        "cmkArn" : {
          "description" : "Amazon Resource Name (ARN) of the CMK",
          "type" : "string"
        },
        "communicationPorts" : {
          "$ref" : "#/definitions/CommunicationPorts",
          "description" : "Communication ports"
        },
        "currentClusterType" : {
          "enum" : [ "PRIMARY", "ASYNC" ],
          "type" : "string"
        },
        "deviceInfo" : {
          "$ref" : "#/definitions/DeviceInfo",
          "description" : "Device information"
        },
        "encryptionAtRestConfig" : {
          "$ref" : "#/definitions/EncryptionAtRestConfig",
          "description" : "Encryption at rest configation"
        },
        "errorString" : {
          "description" : "Error message",
          "type" : "string"
        },
        "expectedUniverseVersion" : {
          "description" : "Expected universe version",
          "format" : "int32",
          "type" : "integer"
        },
        "extraDependencies" : {
          "$ref" : "#/definitions/ExtraDependencies",
          "description" : "Extra dependencies"
        },
        "firstTry" : {
          "description" : "Whether this task has been tried before",
          "type" : "boolean"
        },
        "importedState" : {
          "enum" : [ "NONE", "STARTED", "MASTERS_ADDED", "TSERVERS_ADDED", "IMPORTED" ],
          "type" : "string"
        },
        "itestS3PackagePath" : {
          "type" : "string"
        },
        "kubernetesUpgradeSupported" : {
          "type" : "boolean"
        },
        "nextClusterIndex" : {
          "format" : "int32",
          "type" : "integer"
        },
        "nodeDetailsSet" : {
          "description" : "Node details",
          "items" : {
            "$ref" : "#/definitions/NodeDetails"
          },
          "type" : "array",
          "uniqueItems" : true
        },
        "nodeExporterUser" : {
          "description" : "Node exporter user",
          "type" : "string"
        },
        "nodePrefix" : {
          "type" : "string"
        },
        "nodesResizeAvailable" : {
          "type" : "boolean"
        },
        "previousTaskUUID" : {
          "description" : "Previous task UUID only if this task is a retry",
          "format" : "uuid",
          "type" : "string"
        },
        "remotePackagePath" : {
          "type" : "string"
        },
        "resetAZConfig" : {
          "type" : "boolean"
        },
        "rootAndClientRootCASame" : {
          "type" : "boolean"
        },
        "rootCA" : {
          "format" : "uuid",
          "type" : "string"
        },
        "setTxnTableWaitCountFlag" : {
          "type" : "boolean"
        },
        "sleepAfterMasterRestartMillis" : {
          "format" : "int32",
          "type" : "integer"
        },
        "sleepAfterTServerRestartMillis" : {
          "format" : "int32",
          "type" : "integer"
        },
        "sourceXClusterConfigs" : {
          "description" : "The source universe's xcluster replication relationships",
          "items" : {
            "format" : "uuid",
            "type" : "string"
          },
          "readOnly" : true,
          "type" : "array"
        },
        "targetXClusterConfigs" : {
          "description" : "The target universe's xcluster replication relationships",
          "items" : {
            "format" : "uuid",
            "type" : "string"
          },
          "readOnly" : true,
          "type" : "array"
        },
        "universePaused" : {
          "type" : "boolean"
        },
        "universeUUID" : {
          "description" : "Associated universe UUID",
          "format" : "uuid",
          "type" : "string"
        },
        "updateInProgress" : {
          "type" : "boolean"
        },
        "updateSucceeded" : {
          "type" : "boolean"
        },
        "updatingTask" : {
          "enum" : [ "CloudBootstrap", "CloudCleanup", "CreateCassandraTable", "CreateUniverse", "ReadOnlyClusterCreate", "ReadOnlyKubernetesClusterCreate", "ReadOnlyClusterDelete", "CreateKubernetesUniverse", "DestroyUniverse", "PauseUniverse", "ResumeUniverse", "DestroyKubernetesUniverse", "DeleteTable", "BackupUniverse", "RestoreBackup", "MultiTableBackup", "CreateBackup", "EditUniverse", "EditKubernetesUniverse", "ExternalScript", "KubernetesProvision", "ImportIntoTable", "UpgradeUniverse", "RestartUniverse", "SoftwareUpgrade", "SoftwareKubernetesUpgrade", "GFlagsUpgrade", "GFlagsKubernetesUpgrade", "CertsRotate", "CertsRotateKubernetesUpgrade", "TlsToggle", "VMImageUpgrade", "SystemdUpgrade", "CreateRootVolumes", "ReplaceRootVolume", "ChangeInstanceType", "PersistResizeNode", "PersistSystemdUpgrade", "UpdateNodeDetails", "UpgradeKubernetesUniverse", "DeleteNodeFromUniverse", "StopNodeInUniverse", "StartNodeInUniverse", "AddNodeToUniverse", "RemoveNodeFromUniverse", "ReleaseInstanceFromUniverse", "SetUniverseKey", "SetKubernetesUniverseKey", "CreateKMSConfig", "EditKMSConfig", "DeleteKMSConfig", "UpdateDiskSize", "StartMasterOnNode", "CreateXClusterConfig", "EditXClusterConfig", "DeleteXClusterConfig", "SyncXClusterConfig", "CreateSupportBundle", "AnsibleClusterServerCtl", "AnsibleConfigureServers", "AnsibleDestroyServer", "PauseServer", "ResumeServer", "AnsibleSetupServer", "AnsibleCreateServer", "PrecheckNode", "PrecheckNodeDetached", "AnsibleUpdateNodeInfo", "BulkImport", "ChangeMasterConfig", "ChangeAdminPassword", "CreateTable", "DeleteNode", "DeleteBackup", "DeleteBackupYb", "DeleteCustomerConfig", "DeleteCustomerStorageConfig", "UpdateNodeProcess", "DeleteTableFromUniverse", "LoadBalancerStateChange", "ModifyBlackList", "ManipulateDnsRecordTask", "RemoveUniverseEntry", "SetFlagInMemory", "SetNodeState", "SwamperTargetsFileUpdate", "UniverseUpdateSucceeded", "UpdateAndPersistGFlags", "UpdatePlacementInfo", "UpdateSoftwareVersion", "WaitForDataMove", "WaitForLeaderBlacklistCompletion", "WaitForFollowerLag", "WaitForLoadBalance", "WaitForMasterLeader", "WaitForServer", "WaitForTServerHeartBeats", "DeleteClusterFromUniverse", "InstanceActions", "WaitForServerReady", "RunExternalScript", "XClusterConfigSetup", "XClusterConfigSetStatus", "XClusterConfigModifyTables", "XClusterConfigRename", "XClusterConfigDelete", "XClusterConfigSync", "XClusterConfigUpdateMasterAddresses", "CloudAccessKeyCleanup", "CloudAccessKeySetup", "CloudInitializer", "CloudProviderCleanup", "CloudRegionCleanup", "CloudRegionSetup", "CloudSetup", "BackupTable", "BackupTableYb", "BackupUniverseKeys", "RestoreBackupYb", "RestoreUniverseKeys", "RestoreUniverseKeysYb", "WaitForLeadersOnPreferredOnly", "EnableEncryptionAtRest", "DisableEncryptionAtRest", "DestroyEncryptionAtRest", "KubernetesCommandExecutor", "KubernetesWaitForPod", "KubernetesCheckNumPod", "SetActiveUniverseKeys", "CopyEncryptionKeyFile", "WaitForEncryptionKeyInMemory", "UnivSetCertificate", "CreateAlertDefinitions", "ManageAlertDefinitions", "UniverseSetTlsParams", "UniverseUpdateRootCert", "ResetUniverseVersion", "DeleteCertificate", "SetNodeStatus", "CheckMasterLeader", "CheckMasters", "CheckTServers", "WaitForTServerHBs", "CreatePrometheusSwamperConfig", "PreflightNodeCheck", "RunYsqlUpgrade", "ResizeNode", "CheckMemory", "UpdateMountedDisks", "TransferXClusterCerts", "CreateTableSpacesInUniverse", "CreateTableSpaces", "ThirdpartySoftwareUpgrade" ],
          "type" : "string"
        },
        "updatingTaskUUID" : {
          "format" : "uuid",
          "type" : "string"
        },
        "upgradeOption" : {
          "enum" : [ "Rolling", "Non-Rolling", "Non-Restart" ],
          "type" : "string"
        },
        "useNewHelmNamingStyle" : {
          "type" : "boolean"
        },
        "userAZSelected" : {
          "type" : "boolean"
        },
        "ybPrevSoftwareVersion" : {
          "description" : "Previous software version",
          "type" : "string"
        }
      },
      "required" : [ "clusters", "kubernetesUpgradeSupported", "sleepAfterMasterRestartMillis", "sleepAfterTServerRestartMillis", "upgradeOption" ],
      "type" : "object"
    },
    "TableDefinitionTaskParams" : {
      "properties" : {
        "cmkArn" : {
          "description" : "Amazon Resource Name (ARN) of the CMK",
          "type" : "string"
        },
        "communicationPorts" : {
          "$ref" : "#/definitions/CommunicationPorts",
          "description" : "Communication ports"
        },
        "deviceInfo" : {
          "$ref" : "#/definitions/DeviceInfo",
          "description" : "Device information"
        },
        "encryptionAtRestConfig" : {
          "$ref" : "#/definitions/EncryptionAtRestConfig",
          "description" : "Encryption at rest configation"
        },
        "errorString" : {
          "description" : "Error message",
          "type" : "string"
        },
        "expectedUniverseVersion" : {
          "description" : "Expected universe version",
          "format" : "int32",
          "type" : "integer"
        },
        "extraDependencies" : {
          "$ref" : "#/definitions/ExtraDependencies",
          "description" : "Extra dependencies"
        },
        "firstTry" : {
          "description" : "Whether this task has been tried before",
          "type" : "boolean"
        },
        "nodeDetailsSet" : {
          "description" : "Node details",
          "items" : {
            "$ref" : "#/definitions/NodeDetails"
          },
          "type" : "array",
          "uniqueItems" : true
        },
        "nodeExporterUser" : {
          "description" : "Node exporter user",
          "type" : "string"
        },
        "previousTaskUUID" : {
          "description" : "Previous task UUID only if this task is a retry",
          "format" : "uuid",
          "type" : "string"
        },
        "sourceXClusterConfigs" : {
          "description" : "The source universe's xcluster replication relationships",
          "items" : {
            "format" : "uuid",
            "type" : "string"
          },
          "readOnly" : true,
          "type" : "array"
        },
        "tableDetails" : {
          "$ref" : "#/definitions/TableDetails"
        },
        "tableType" : {
          "enum" : [ "YQL_TABLE_TYPE", "REDIS_TABLE_TYPE", "PGSQL_TABLE_TYPE", "TRANSACTION_STATUS_TABLE_TYPE" ],
          "type" : "string"
        },
        "tableUUID" : {
          "format" : "uuid",
          "type" : "string"
        },
        "targetXClusterConfigs" : {
          "description" : "The target universe's xcluster replication relationships",
          "items" : {
            "format" : "uuid",
            "type" : "string"
          },
          "readOnly" : true,
          "type" : "array"
        },
        "universeUUID" : {
          "description" : "Associated universe UUID",
          "format" : "uuid",
          "type" : "string"
        },
        "ybPrevSoftwareVersion" : {
          "description" : "Previous software version",
          "type" : "string"
        }
      },
      "required" : [ "tableDetails", "tableType", "tableUUID" ],
      "type" : "object"
    },
    "TableDetails" : {
      "description" : "Table details",
      "properties" : {
        "columns" : {
          "description" : "Details of all columns in the table",
          "items" : {
            "$ref" : "#/definitions/ColumnDetails"
          },
          "type" : "array"
        },
        "keyspace" : {
          "description" : "Keyspace to which this table belongs",
          "type" : "string"
        },
        "splitValues" : {
          "description" : "Primary key values used to split table into tablets",
          "items" : {
            "type" : "string"
          },
          "type" : "array"
        },
        "tableName" : {
          "description" : "Table name",
          "type" : "string"
        },
        "ttlInSeconds" : {
          "description" : "The default table-level time to live, in seconds. A value of `-1` represents an infinite TTL.",
          "format" : "int64",
          "type" : "integer"
        }
      },
      "type" : "object"
    },
    "TableInfoResp" : {
      "description" : "Table information response",
      "properties" : {
        "keySpace" : {
          "description" : "Keyspace",
          "type" : "string"
        },
        "nameSpace" : {
          "description" : "Namespace or Schema",
          "type" : "string"
        },
        "parentTableUUID" : {
          "description" : "Parent Table UUID",
          "format" : "uuid",
          "type" : "string"
        },
        "relationType" : {
          "description" : "Relation type",
          "enum" : [ "SYSTEM_TABLE_RELATION", "USER_TABLE_RELATION", "INDEX_TABLE_RELATION" ],
          "type" : "string"
        },
        "sizeBytes" : {
          "description" : "Size in bytes",
          "format" : "double",
          "readOnly" : true,
          "type" : "number"
        },
        "tableName" : {
          "description" : "Table name",
          "type" : "string"
        },
        "tableSpace" : {
          "description" : "Table space",
          "type" : "string"
        },
        "tableType" : {
          "description" : "Table type",
          "enum" : [ "YQL_TABLE_TYPE", "REDIS_TABLE_TYPE", "PGSQL_TABLE_TYPE", "TRANSACTION_STATUS_TABLE_TYPE" ],
          "type" : "string"
        },
        "tableUUID" : {
          "description" : "Table UUID",
          "format" : "uuid",
          "readOnly" : true,
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "TableSpaceInfo" : {
      "description" : "Tablespace information",
      "properties" : {
        "name" : {
          "description" : "Tablespace Name",
          "maxLength" : 2147483647,
          "minLength" : 1,
          "type" : "string"
        },
        "numReplicas" : {
          "description" : "numReplicas",
          "format" : "int32",
          "minimum" : 1,
          "type" : "integer"
        },
        "placementBlocks" : {
          "description" : "placements",
          "items" : {
            "$ref" : "#/definitions/PlacementBlock"
          },
          "maxItems" : 2147483647,
          "minItems" : 1,
          "type" : "array"
        }
      },
      "required" : [ "name", "placementBlocks" ],
      "type" : "object"
    },
    "ThirdpartySoftwareUpgradeParams" : {
      "properties" : {
        "allowInsecure" : {
          "type" : "boolean"
        },
        "backupInProgress" : {
          "type" : "boolean"
        },
        "capability" : {
          "enum" : [ "READ_ONLY", "EDITS_ALLOWED" ],
          "type" : "string"
        },
        "clientRootCA" : {
          "format" : "uuid",
          "type" : "string"
        },
        "clusters" : {
          "items" : {
            "$ref" : "#/definitions/Cluster"
          },
          "type" : "array"
        },
        "cmkArn" : {
          "description" : "Amazon Resource Name (ARN) of the CMK",
          "type" : "string"
        },
        "communicationPorts" : {
          "$ref" : "#/definitions/CommunicationPorts",
          "description" : "Communication ports"
        },
        "currentClusterType" : {
          "enum" : [ "PRIMARY", "ASYNC" ],
          "type" : "string"
        },
        "deviceInfo" : {
          "$ref" : "#/definitions/DeviceInfo",
          "description" : "Device information"
        },
        "encryptionAtRestConfig" : {
          "$ref" : "#/definitions/EncryptionAtRestConfig",
          "description" : "Encryption at rest configation"
        },
        "errorString" : {
          "description" : "Error message",
          "type" : "string"
        },
        "expectedUniverseVersion" : {
          "description" : "Expected universe version",
          "format" : "int32",
          "type" : "integer"
        },
        "extraDependencies" : {
          "$ref" : "#/definitions/ExtraDependencies",
          "description" : "Extra dependencies"
        },
        "firstTry" : {
          "description" : "Whether this task has been tried before",
          "type" : "boolean"
        },
        "forceAll" : {
          "type" : "boolean"
        },
        "importedState" : {
          "enum" : [ "NONE", "STARTED", "MASTERS_ADDED", "TSERVERS_ADDED", "IMPORTED" ],
          "type" : "string"
        },
        "itestS3PackagePath" : {
          "type" : "string"
        },
        "kubernetesUpgradeSupported" : {
          "type" : "boolean"
        },
        "nextClusterIndex" : {
          "format" : "int32",
          "type" : "integer"
        },
        "nodeDetailsSet" : {
          "description" : "Node details",
          "items" : {
            "$ref" : "#/definitions/NodeDetails"
          },
          "type" : "array",
          "uniqueItems" : true
        },
        "nodeExporterUser" : {
          "description" : "Node exporter user",
          "type" : "string"
        },
        "nodePrefix" : {
          "type" : "string"
        },
        "nodesResizeAvailable" : {
          "type" : "boolean"
        },
        "previousTaskUUID" : {
          "description" : "Previous task UUID only if this task is a retry",
          "format" : "uuid",
          "type" : "string"
        },
        "remotePackagePath" : {
          "type" : "string"
        },
        "resetAZConfig" : {
          "type" : "boolean"
        },
        "rootAndClientRootCASame" : {
          "type" : "boolean"
        },
        "rootCA" : {
          "format" : "uuid",
          "type" : "string"
        },
        "setTxnTableWaitCountFlag" : {
          "type" : "boolean"
        },
        "sleepAfterMasterRestartMillis" : {
          "format" : "int32",
          "type" : "integer"
        },
        "sleepAfterTServerRestartMillis" : {
          "format" : "int32",
          "type" : "integer"
        },
        "sourceXClusterConfigs" : {
          "description" : "The source universe's xcluster replication relationships",
          "items" : {
            "format" : "uuid",
            "type" : "string"
          },
          "readOnly" : true,
          "type" : "array"
        },
        "targetXClusterConfigs" : {
          "description" : "The target universe's xcluster replication relationships",
          "items" : {
            "format" : "uuid",
            "type" : "string"
          },
          "readOnly" : true,
          "type" : "array"
        },
        "universePaused" : {
          "type" : "boolean"
        },
        "universeUUID" : {
          "description" : "Associated universe UUID",
          "format" : "uuid",
          "type" : "string"
        },
        "updateInProgress" : {
          "type" : "boolean"
        },
        "updateSucceeded" : {
          "type" : "boolean"
        },
        "updatingTask" : {
          "enum" : [ "CloudBootstrap", "CloudCleanup", "CreateCassandraTable", "CreateUniverse", "ReadOnlyClusterCreate", "ReadOnlyKubernetesClusterCreate", "ReadOnlyClusterDelete", "CreateKubernetesUniverse", "DestroyUniverse", "PauseUniverse", "ResumeUniverse", "DestroyKubernetesUniverse", "DeleteTable", "BackupUniverse", "RestoreBackup", "MultiTableBackup", "CreateBackup", "EditUniverse", "EditKubernetesUniverse", "ExternalScript", "KubernetesProvision", "ImportIntoTable", "UpgradeUniverse", "RestartUniverse", "SoftwareUpgrade", "SoftwareKubernetesUpgrade", "GFlagsUpgrade", "GFlagsKubernetesUpgrade", "CertsRotate", "CertsRotateKubernetesUpgrade", "TlsToggle", "VMImageUpgrade", "SystemdUpgrade", "CreateRootVolumes", "ReplaceRootVolume", "ChangeInstanceType", "PersistResizeNode", "PersistSystemdUpgrade", "UpdateNodeDetails", "UpgradeKubernetesUniverse", "DeleteNodeFromUniverse", "StopNodeInUniverse", "StartNodeInUniverse", "AddNodeToUniverse", "RemoveNodeFromUniverse", "ReleaseInstanceFromUniverse", "SetUniverseKey", "SetKubernetesUniverseKey", "CreateKMSConfig", "EditKMSConfig", "DeleteKMSConfig", "UpdateDiskSize", "StartMasterOnNode", "CreateXClusterConfig", "EditXClusterConfig", "DeleteXClusterConfig", "SyncXClusterConfig", "CreateSupportBundle", "AnsibleClusterServerCtl", "AnsibleConfigureServers", "AnsibleDestroyServer", "PauseServer", "ResumeServer", "AnsibleSetupServer", "AnsibleCreateServer", "PrecheckNode", "PrecheckNodeDetached", "AnsibleUpdateNodeInfo", "BulkImport", "ChangeMasterConfig", "ChangeAdminPassword", "CreateTable", "DeleteNode", "DeleteBackup", "DeleteBackupYb", "DeleteCustomerConfig", "DeleteCustomerStorageConfig", "UpdateNodeProcess", "DeleteTableFromUniverse", "LoadBalancerStateChange", "ModifyBlackList", "ManipulateDnsRecordTask", "RemoveUniverseEntry", "SetFlagInMemory", "SetNodeState", "SwamperTargetsFileUpdate", "UniverseUpdateSucceeded", "UpdateAndPersistGFlags", "UpdatePlacementInfo", "UpdateSoftwareVersion", "WaitForDataMove", "WaitForLeaderBlacklistCompletion", "WaitForFollowerLag", "WaitForLoadBalance", "WaitForMasterLeader", "WaitForServer", "WaitForTServerHeartBeats", "DeleteClusterFromUniverse", "InstanceActions", "WaitForServerReady", "RunExternalScript", "XClusterConfigSetup", "XClusterConfigSetStatus", "XClusterConfigModifyTables", "XClusterConfigRename", "XClusterConfigDelete", "XClusterConfigSync", "XClusterConfigUpdateMasterAddresses", "CloudAccessKeyCleanup", "CloudAccessKeySetup", "CloudInitializer", "CloudProviderCleanup", "CloudRegionCleanup", "CloudRegionSetup", "CloudSetup", "BackupTable", "BackupTableYb", "BackupUniverseKeys", "RestoreBackupYb", "RestoreUniverseKeys", "RestoreUniverseKeysYb", "WaitForLeadersOnPreferredOnly", "EnableEncryptionAtRest", "DisableEncryptionAtRest", "DestroyEncryptionAtRest", "KubernetesCommandExecutor", "KubernetesWaitForPod", "KubernetesCheckNumPod", "SetActiveUniverseKeys", "CopyEncryptionKeyFile", "WaitForEncryptionKeyInMemory", "UnivSetCertificate", "CreateAlertDefinitions", "ManageAlertDefinitions", "UniverseSetTlsParams", "UniverseUpdateRootCert", "ResetUniverseVersion", "DeleteCertificate", "SetNodeStatus", "CheckMasterLeader", "CheckMasters", "CheckTServers", "WaitForTServerHBs", "CreatePrometheusSwamperConfig", "PreflightNodeCheck", "RunYsqlUpgrade", "ResizeNode", "CheckMemory", "UpdateMountedDisks", "TransferXClusterCerts", "CreateTableSpacesInUniverse", "CreateTableSpaces", "ThirdpartySoftwareUpgrade" ],
          "type" : "string"
        },
        "updatingTaskUUID" : {
          "format" : "uuid",
          "type" : "string"
        },
        "upgradeOption" : {
          "enum" : [ "Rolling", "Non-Rolling", "Non-Restart" ],
          "type" : "string"
        },
        "useNewHelmNamingStyle" : {
          "type" : "boolean"
        },
        "userAZSelected" : {
          "type" : "boolean"
        },
        "ybPrevSoftwareVersion" : {
          "description" : "Previous software version",
          "type" : "string"
        }
      },
      "required" : [ "clusters", "forceAll", "kubernetesUpgradeSupported", "sleepAfterMasterRestartMillis", "sleepAfterTServerRestartMillis", "upgradeOption" ],
      "type" : "object"
    },
    "TlsToggleParams" : {
      "properties" : {
        "allowInsecure" : {
          "type" : "boolean"
        },
        "backupInProgress" : {
          "type" : "boolean"
        },
        "capability" : {
          "enum" : [ "READ_ONLY", "EDITS_ALLOWED" ],
          "type" : "string"
        },
        "clientRootCA" : {
          "format" : "uuid",
          "type" : "string"
        },
        "clusters" : {
          "items" : {
            "$ref" : "#/definitions/Cluster"
          },
          "type" : "array"
        },
        "cmkArn" : {
          "description" : "Amazon Resource Name (ARN) of the CMK",
          "type" : "string"
        },
        "communicationPorts" : {
          "$ref" : "#/definitions/CommunicationPorts",
          "description" : "Communication ports"
        },
        "currentClusterType" : {
          "enum" : [ "PRIMARY", "ASYNC" ],
          "type" : "string"
        },
        "deviceInfo" : {
          "$ref" : "#/definitions/DeviceInfo",
          "description" : "Device information"
        },
        "enableClientToNodeEncrypt" : {
          "type" : "boolean"
        },
        "enableNodeToNodeEncrypt" : {
          "type" : "boolean"
        },
        "encryptionAtRestConfig" : {
          "$ref" : "#/definitions/EncryptionAtRestConfig",
          "description" : "Encryption at rest configation"
        },
        "errorString" : {
          "description" : "Error message",
          "type" : "string"
        },
        "expectedUniverseVersion" : {
          "description" : "Expected universe version",
          "format" : "int32",
          "type" : "integer"
        },
        "extraDependencies" : {
          "$ref" : "#/definitions/ExtraDependencies",
          "description" : "Extra dependencies"
        },
        "firstTry" : {
          "description" : "Whether this task has been tried before",
          "type" : "boolean"
        },
        "importedState" : {
          "enum" : [ "NONE", "STARTED", "MASTERS_ADDED", "TSERVERS_ADDED", "IMPORTED" ],
          "type" : "string"
        },
        "itestS3PackagePath" : {
          "type" : "string"
        },
        "kubernetesUpgradeSupported" : {
          "type" : "boolean"
        },
        "nextClusterIndex" : {
          "format" : "int32",
          "type" : "integer"
        },
        "nodeDetailsSet" : {
          "description" : "Node details",
          "items" : {
            "$ref" : "#/definitions/NodeDetails"
          },
          "type" : "array",
          "uniqueItems" : true
        },
        "nodeExporterUser" : {
          "description" : "Node exporter user",
          "type" : "string"
        },
        "nodePrefix" : {
          "type" : "string"
        },
        "nodesResizeAvailable" : {
          "type" : "boolean"
        },
        "previousTaskUUID" : {
          "description" : "Previous task UUID only if this task is a retry",
          "format" : "uuid",
          "type" : "string"
        },
        "remotePackagePath" : {
          "type" : "string"
        },
        "resetAZConfig" : {
          "type" : "boolean"
        },
        "rootAndClientRootCASame" : {
          "type" : "boolean"
        },
        "rootCA" : {
          "format" : "uuid",
          "type" : "string"
        },
        "setTxnTableWaitCountFlag" : {
          "type" : "boolean"
        },
        "sleepAfterMasterRestartMillis" : {
          "format" : "int32",
          "type" : "integer"
        },
        "sleepAfterTServerRestartMillis" : {
          "format" : "int32",
          "type" : "integer"
        },
        "sourceXClusterConfigs" : {
          "description" : "The source universe's xcluster replication relationships",
          "items" : {
            "format" : "uuid",
            "type" : "string"
          },
          "readOnly" : true,
          "type" : "array"
        },
        "targetXClusterConfigs" : {
          "description" : "The target universe's xcluster replication relationships",
          "items" : {
            "format" : "uuid",
            "type" : "string"
          },
          "readOnly" : true,
          "type" : "array"
        },
        "universePaused" : {
          "type" : "boolean"
        },
        "universeUUID" : {
          "description" : "Associated universe UUID",
          "format" : "uuid",
          "type" : "string"
        },
        "updateInProgress" : {
          "type" : "boolean"
        },
        "updateSucceeded" : {
          "type" : "boolean"
        },
        "updatingTask" : {
          "enum" : [ "CloudBootstrap", "CloudCleanup", "CreateCassandraTable", "CreateUniverse", "ReadOnlyClusterCreate", "ReadOnlyKubernetesClusterCreate", "ReadOnlyClusterDelete", "CreateKubernetesUniverse", "DestroyUniverse", "PauseUniverse", "ResumeUniverse", "DestroyKubernetesUniverse", "DeleteTable", "BackupUniverse", "RestoreBackup", "MultiTableBackup", "CreateBackup", "EditUniverse", "EditKubernetesUniverse", "ExternalScript", "KubernetesProvision", "ImportIntoTable", "UpgradeUniverse", "RestartUniverse", "SoftwareUpgrade", "SoftwareKubernetesUpgrade", "GFlagsUpgrade", "GFlagsKubernetesUpgrade", "CertsRotate", "CertsRotateKubernetesUpgrade", "TlsToggle", "VMImageUpgrade", "SystemdUpgrade", "CreateRootVolumes", "ReplaceRootVolume", "ChangeInstanceType", "PersistResizeNode", "PersistSystemdUpgrade", "UpdateNodeDetails", "UpgradeKubernetesUniverse", "DeleteNodeFromUniverse", "StopNodeInUniverse", "StartNodeInUniverse", "AddNodeToUniverse", "RemoveNodeFromUniverse", "ReleaseInstanceFromUniverse", "SetUniverseKey", "SetKubernetesUniverseKey", "CreateKMSConfig", "EditKMSConfig", "DeleteKMSConfig", "UpdateDiskSize", "StartMasterOnNode", "CreateXClusterConfig", "EditXClusterConfig", "DeleteXClusterConfig", "SyncXClusterConfig", "CreateSupportBundle", "AnsibleClusterServerCtl", "AnsibleConfigureServers", "AnsibleDestroyServer", "PauseServer", "ResumeServer", "AnsibleSetupServer", "AnsibleCreateServer", "PrecheckNode", "PrecheckNodeDetached", "AnsibleUpdateNodeInfo", "BulkImport", "ChangeMasterConfig", "ChangeAdminPassword", "CreateTable", "DeleteNode", "DeleteBackup", "DeleteBackupYb", "DeleteCustomerConfig", "DeleteCustomerStorageConfig", "UpdateNodeProcess", "DeleteTableFromUniverse", "LoadBalancerStateChange", "ModifyBlackList", "ManipulateDnsRecordTask", "RemoveUniverseEntry", "SetFlagInMemory", "SetNodeState", "SwamperTargetsFileUpdate", "UniverseUpdateSucceeded", "UpdateAndPersistGFlags", "UpdatePlacementInfo", "UpdateSoftwareVersion", "WaitForDataMove", "WaitForLeaderBlacklistCompletion", "WaitForFollowerLag", "WaitForLoadBalance", "WaitForMasterLeader", "WaitForServer", "WaitForTServerHeartBeats", "DeleteClusterFromUniverse", "InstanceActions", "WaitForServerReady", "RunExternalScript", "XClusterConfigSetup", "XClusterConfigSetStatus", "XClusterConfigModifyTables", "XClusterConfigRename", "XClusterConfigDelete", "XClusterConfigSync", "XClusterConfigUpdateMasterAddresses", "CloudAccessKeyCleanup", "CloudAccessKeySetup", "CloudInitializer", "CloudProviderCleanup", "CloudRegionCleanup", "CloudRegionSetup", "CloudSetup", "BackupTable", "BackupTableYb", "BackupUniverseKeys", "RestoreBackupYb", "RestoreUniverseKeys", "RestoreUniverseKeysYb", "WaitForLeadersOnPreferredOnly", "EnableEncryptionAtRest", "DisableEncryptionAtRest", "DestroyEncryptionAtRest", "KubernetesCommandExecutor", "KubernetesWaitForPod", "KubernetesCheckNumPod", "SetActiveUniverseKeys", "CopyEncryptionKeyFile", "WaitForEncryptionKeyInMemory", "UnivSetCertificate", "CreateAlertDefinitions", "ManageAlertDefinitions", "UniverseSetTlsParams", "UniverseUpdateRootCert", "ResetUniverseVersion", "DeleteCertificate", "SetNodeStatus", "CheckMasterLeader", "CheckMasters", "CheckTServers", "WaitForTServerHBs", "CreatePrometheusSwamperConfig", "PreflightNodeCheck", "RunYsqlUpgrade", "ResizeNode", "CheckMemory", "UpdateMountedDisks", "TransferXClusterCerts", "CreateTableSpacesInUniverse", "CreateTableSpaces", "ThirdpartySoftwareUpgrade" ],
          "type" : "string"
        },
        "updatingTaskUUID" : {
          "format" : "uuid",
          "type" : "string"
        },
        "upgradeOption" : {
          "enum" : [ "Rolling", "Non-Rolling", "Non-Restart" ],
          "type" : "string"
        },
        "useNewHelmNamingStyle" : {
          "type" : "boolean"
        },
        "userAZSelected" : {
          "type" : "boolean"
        },
        "ybPrevSoftwareVersion" : {
          "description" : "Previous software version",
          "type" : "string"
        }
      },
      "required" : [ "allowInsecure", "clientRootCA", "clusters", "enableClientToNodeEncrypt", "enableNodeToNodeEncrypt", "kubernetesUpgradeSupported", "rootAndClientRootCASame", "rootCA", "sleepAfterMasterRestartMillis", "sleepAfterTServerRestartMillis", "upgradeOption" ],
      "type" : "object"
    },
    "TriggerHealthCheckResult" : {
      "description" : "The response type for triggering a health check. Contains the timestamp of when the health check was triggered.",
      "properties" : {
        "timestamp" : {
          "description" : "The ISO-8601 timestamp when the health check was triggered.",
          "format" : "date-time",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "UniverseConfigureTaskParams" : {
      "properties" : {
        "allowGeoPartitioning" : {
          "type" : "boolean"
        },
        "allowInsecure" : {
          "type" : "boolean"
        },
        "backupInProgress" : {
          "type" : "boolean"
        },
        "capability" : {
          "enum" : [ "READ_ONLY", "EDITS_ALLOWED" ],
          "type" : "string"
        },
        "clientRootCA" : {
          "format" : "uuid",
          "type" : "string"
        },
        "clusterOperation" : {
          "enum" : [ "CREATE", "EDIT", "DELETE" ],
          "type" : "string"
        },
        "clusters" : {
          "items" : {
            "$ref" : "#/definitions/Cluster"
          },
          "type" : "array"
        },
        "cmkArn" : {
          "description" : "Amazon Resource Name (ARN) of the CMK",
          "type" : "string"
        },
        "communicationPorts" : {
          "$ref" : "#/definitions/CommunicationPorts",
          "description" : "Communication ports"
        },
        "currentClusterType" : {
          "enum" : [ "PRIMARY", "ASYNC" ],
          "type" : "string"
        },
        "deviceInfo" : {
          "$ref" : "#/definitions/DeviceInfo",
          "description" : "Device information"
        },
        "encryptionAtRestConfig" : {
          "$ref" : "#/definitions/EncryptionAtRestConfig",
          "description" : "Encryption at rest configation"
        },
        "errorString" : {
          "description" : "Error message",
          "type" : "string"
        },
        "expectedUniverseVersion" : {
          "description" : "Expected universe version",
          "format" : "int32",
          "type" : "integer"
        },
        "extraDependencies" : {
          "$ref" : "#/definitions/ExtraDependencies",
          "description" : "Extra dependencies"
        },
        "firstTry" : {
          "description" : "Whether this task has been tried before",
          "type" : "boolean"
        },
        "importedState" : {
          "enum" : [ "NONE", "STARTED", "MASTERS_ADDED", "TSERVERS_ADDED", "IMPORTED" ],
          "type" : "string"
        },
        "itestS3PackagePath" : {
          "type" : "string"
        },
        "nextClusterIndex" : {
          "format" : "int32",
          "type" : "integer"
        },
        "nodeDetailsSet" : {
          "description" : "Node details",
          "items" : {
            "$ref" : "#/definitions/NodeDetails"
          },
          "type" : "array",
          "uniqueItems" : true
        },
        "nodeExporterUser" : {
          "description" : "Node exporter user",
          "type" : "string"
        },
        "nodePrefix" : {
          "type" : "string"
        },
        "nodesResizeAvailable" : {
          "type" : "boolean"
        },
        "previousTaskUUID" : {
          "description" : "Previous task UUID only if this task is a retry",
          "format" : "uuid",
          "type" : "string"
        },
        "regionsChanged" : {
          "type" : "boolean"
        },
        "remotePackagePath" : {
          "type" : "string"
        },
        "resetAZConfig" : {
          "type" : "boolean"
        },
        "rootAndClientRootCASame" : {
          "type" : "boolean"
        },
        "rootCA" : {
          "format" : "uuid",
          "type" : "string"
        },
        "setTxnTableWaitCountFlag" : {
          "type" : "boolean"
        },
        "sourceXClusterConfigs" : {
          "description" : "The source universe's xcluster replication relationships",
          "items" : {
            "format" : "uuid",
            "type" : "string"
          },
          "readOnly" : true,
          "type" : "array"
        },
        "targetXClusterConfigs" : {
          "description" : "The target universe's xcluster replication relationships",
          "items" : {
            "format" : "uuid",
            "type" : "string"
          },
          "readOnly" : true,
          "type" : "array"
        },
        "universePaused" : {
          "type" : "boolean"
        },
        "universeUUID" : {
          "description" : "Associated universe UUID",
          "format" : "uuid",
          "type" : "string"
        },
        "updateInProgress" : {
          "type" : "boolean"
        },
        "updateSucceeded" : {
          "type" : "boolean"
        },
        "updatingTask" : {
          "enum" : [ "CloudBootstrap", "CloudCleanup", "CreateCassandraTable", "CreateUniverse", "ReadOnlyClusterCreate", "ReadOnlyKubernetesClusterCreate", "ReadOnlyClusterDelete", "CreateKubernetesUniverse", "DestroyUniverse", "PauseUniverse", "ResumeUniverse", "DestroyKubernetesUniverse", "DeleteTable", "BackupUniverse", "RestoreBackup", "MultiTableBackup", "CreateBackup", "EditUniverse", "EditKubernetesUniverse", "ExternalScript", "KubernetesProvision", "ImportIntoTable", "UpgradeUniverse", "RestartUniverse", "SoftwareUpgrade", "SoftwareKubernetesUpgrade", "GFlagsUpgrade", "GFlagsKubernetesUpgrade", "CertsRotate", "CertsRotateKubernetesUpgrade", "TlsToggle", "VMImageUpgrade", "SystemdUpgrade", "CreateRootVolumes", "ReplaceRootVolume", "ChangeInstanceType", "PersistResizeNode", "PersistSystemdUpgrade", "UpdateNodeDetails", "UpgradeKubernetesUniverse", "DeleteNodeFromUniverse", "StopNodeInUniverse", "StartNodeInUniverse", "AddNodeToUniverse", "RemoveNodeFromUniverse", "ReleaseInstanceFromUniverse", "SetUniverseKey", "SetKubernetesUniverseKey", "CreateKMSConfig", "EditKMSConfig", "DeleteKMSConfig", "UpdateDiskSize", "StartMasterOnNode", "CreateXClusterConfig", "EditXClusterConfig", "DeleteXClusterConfig", "SyncXClusterConfig", "CreateSupportBundle", "AnsibleClusterServerCtl", "AnsibleConfigureServers", "AnsibleDestroyServer", "PauseServer", "ResumeServer", "AnsibleSetupServer", "AnsibleCreateServer", "PrecheckNode", "PrecheckNodeDetached", "AnsibleUpdateNodeInfo", "BulkImport", "ChangeMasterConfig", "ChangeAdminPassword", "CreateTable", "DeleteNode", "DeleteBackup", "DeleteBackupYb", "DeleteCustomerConfig", "DeleteCustomerStorageConfig", "UpdateNodeProcess", "DeleteTableFromUniverse", "LoadBalancerStateChange", "ModifyBlackList", "ManipulateDnsRecordTask", "RemoveUniverseEntry", "SetFlagInMemory", "SetNodeState", "SwamperTargetsFileUpdate", "UniverseUpdateSucceeded", "UpdateAndPersistGFlags", "UpdatePlacementInfo", "UpdateSoftwareVersion", "WaitForDataMove", "WaitForLeaderBlacklistCompletion", "WaitForFollowerLag", "WaitForLoadBalance", "WaitForMasterLeader", "WaitForServer", "WaitForTServerHeartBeats", "DeleteClusterFromUniverse", "InstanceActions", "WaitForServerReady", "RunExternalScript", "XClusterConfigSetup", "XClusterConfigSetStatus", "XClusterConfigModifyTables", "XClusterConfigRename", "XClusterConfigDelete", "XClusterConfigSync", "XClusterConfigUpdateMasterAddresses", "CloudAccessKeyCleanup", "CloudAccessKeySetup", "CloudInitializer", "CloudProviderCleanup", "CloudRegionCleanup", "CloudRegionSetup", "CloudSetup", "BackupTable", "BackupTableYb", "BackupUniverseKeys", "RestoreBackupYb", "RestoreUniverseKeys", "RestoreUniverseKeysYb", "WaitForLeadersOnPreferredOnly", "EnableEncryptionAtRest", "DisableEncryptionAtRest", "DestroyEncryptionAtRest", "KubernetesCommandExecutor", "KubernetesWaitForPod", "KubernetesCheckNumPod", "SetActiveUniverseKeys", "CopyEncryptionKeyFile", "WaitForEncryptionKeyInMemory", "UnivSetCertificate", "CreateAlertDefinitions", "ManageAlertDefinitions", "UniverseSetTlsParams", "UniverseUpdateRootCert", "ResetUniverseVersion", "DeleteCertificate", "SetNodeStatus", "CheckMasterLeader", "CheckMasters", "CheckTServers", "WaitForTServerHBs", "CreatePrometheusSwamperConfig", "PreflightNodeCheck", "RunYsqlUpgrade", "ResizeNode", "CheckMemory", "UpdateMountedDisks", "TransferXClusterCerts", "CreateTableSpacesInUniverse", "CreateTableSpaces", "ThirdpartySoftwareUpgrade" ],
          "type" : "string"
        },
        "updatingTaskUUID" : {
          "format" : "uuid",
          "type" : "string"
        },
        "useNewHelmNamingStyle" : {
          "type" : "boolean"
        },
        "userAZSelected" : {
          "type" : "boolean"
        },
        "ybPrevSoftwareVersion" : {
          "description" : "Previous software version",
          "type" : "string"
        }
      },
      "required" : [ "clusters" ],
      "type" : "object"
    },
    "UniverseDefinitionTaskParams" : {
      "properties" : {
        "allowInsecure" : {
          "type" : "boolean"
        },
        "backupInProgress" : {
          "type" : "boolean"
        },
        "capability" : {
          "enum" : [ "READ_ONLY", "EDITS_ALLOWED" ],
          "type" : "string"
        },
        "clientRootCA" : {
          "format" : "uuid",
          "type" : "string"
        },
        "clusters" : {
          "items" : {
            "$ref" : "#/definitions/Cluster"
          },
          "type" : "array"
        },
        "cmkArn" : {
          "description" : "Amazon Resource Name (ARN) of the CMK",
          "type" : "string"
        },
        "communicationPorts" : {
          "$ref" : "#/definitions/CommunicationPorts",
          "description" : "Communication ports"
        },
        "currentClusterType" : {
          "enum" : [ "PRIMARY", "ASYNC" ],
          "type" : "string"
        },
        "deviceInfo" : {
          "$ref" : "#/definitions/DeviceInfo",
          "description" : "Device information"
        },
        "encryptionAtRestConfig" : {
          "$ref" : "#/definitions/EncryptionAtRestConfig",
          "description" : "Encryption at rest configation"
        },
        "errorString" : {
          "description" : "Error message",
          "type" : "string"
        },
        "expectedUniverseVersion" : {
          "description" : "Expected universe version",
          "format" : "int32",
          "type" : "integer"
        },
        "extraDependencies" : {
          "$ref" : "#/definitions/ExtraDependencies",
          "description" : "Extra dependencies"
        },
        "firstTry" : {
          "description" : "Whether this task has been tried before",
          "type" : "boolean"
        },
        "importedState" : {
          "enum" : [ "NONE", "STARTED", "MASTERS_ADDED", "TSERVERS_ADDED", "IMPORTED" ],
          "type" : "string"
        },
        "itestS3PackagePath" : {
          "type" : "string"
        },
        "nextClusterIndex" : {
          "format" : "int32",
          "type" : "integer"
        },
        "nodeDetailsSet" : {
          "description" : "Node details",
          "items" : {
            "$ref" : "#/definitions/NodeDetails"
          },
          "type" : "array",
          "uniqueItems" : true
        },
        "nodeExporterUser" : {
          "description" : "Node exporter user",
          "type" : "string"
        },
        "nodePrefix" : {
          "type" : "string"
        },
        "nodesResizeAvailable" : {
          "type" : "boolean"
        },
        "previousTaskUUID" : {
          "description" : "Previous task UUID only if this task is a retry",
          "format" : "uuid",
          "type" : "string"
        },
        "remotePackagePath" : {
          "type" : "string"
        },
        "resetAZConfig" : {
          "type" : "boolean"
        },
        "rootAndClientRootCASame" : {
          "type" : "boolean"
        },
        "rootCA" : {
          "format" : "uuid",
          "type" : "string"
        },
        "setTxnTableWaitCountFlag" : {
          "type" : "boolean"
        },
        "sourceXClusterConfigs" : {
          "description" : "The source universe's xcluster replication relationships",
          "items" : {
            "format" : "uuid",
            "type" : "string"
          },
          "readOnly" : true,
          "type" : "array"
        },
        "targetXClusterConfigs" : {
          "description" : "The target universe's xcluster replication relationships",
          "items" : {
            "format" : "uuid",
            "type" : "string"
          },
          "readOnly" : true,
          "type" : "array"
        },
        "universePaused" : {
          "type" : "boolean"
        },
        "universeUUID" : {
          "description" : "Associated universe UUID",
          "format" : "uuid",
          "type" : "string"
        },
        "updateInProgress" : {
          "type" : "boolean"
        },
        "updateSucceeded" : {
          "type" : "boolean"
        },
        "updatingTask" : {
          "enum" : [ "CloudBootstrap", "CloudCleanup", "CreateCassandraTable", "CreateUniverse", "ReadOnlyClusterCreate", "ReadOnlyKubernetesClusterCreate", "ReadOnlyClusterDelete", "CreateKubernetesUniverse", "DestroyUniverse", "PauseUniverse", "ResumeUniverse", "DestroyKubernetesUniverse", "DeleteTable", "BackupUniverse", "RestoreBackup", "MultiTableBackup", "CreateBackup", "EditUniverse", "EditKubernetesUniverse", "ExternalScript", "KubernetesProvision", "ImportIntoTable", "UpgradeUniverse", "RestartUniverse", "SoftwareUpgrade", "SoftwareKubernetesUpgrade", "GFlagsUpgrade", "GFlagsKubernetesUpgrade", "CertsRotate", "CertsRotateKubernetesUpgrade", "TlsToggle", "VMImageUpgrade", "SystemdUpgrade", "CreateRootVolumes", "ReplaceRootVolume", "ChangeInstanceType", "PersistResizeNode", "PersistSystemdUpgrade", "UpdateNodeDetails", "UpgradeKubernetesUniverse", "DeleteNodeFromUniverse", "StopNodeInUniverse", "StartNodeInUniverse", "AddNodeToUniverse", "RemoveNodeFromUniverse", "ReleaseInstanceFromUniverse", "SetUniverseKey", "SetKubernetesUniverseKey", "CreateKMSConfig", "EditKMSConfig", "DeleteKMSConfig", "UpdateDiskSize", "StartMasterOnNode", "CreateXClusterConfig", "EditXClusterConfig", "DeleteXClusterConfig", "SyncXClusterConfig", "CreateSupportBundle", "AnsibleClusterServerCtl", "AnsibleConfigureServers", "AnsibleDestroyServer", "PauseServer", "ResumeServer", "AnsibleSetupServer", "AnsibleCreateServer", "PrecheckNode", "PrecheckNodeDetached", "AnsibleUpdateNodeInfo", "BulkImport", "ChangeMasterConfig", "ChangeAdminPassword", "CreateTable", "DeleteNode", "DeleteBackup", "DeleteBackupYb", "DeleteCustomerConfig", "DeleteCustomerStorageConfig", "UpdateNodeProcess", "DeleteTableFromUniverse", "LoadBalancerStateChange", "ModifyBlackList", "ManipulateDnsRecordTask", "RemoveUniverseEntry", "SetFlagInMemory", "SetNodeState", "SwamperTargetsFileUpdate", "UniverseUpdateSucceeded", "UpdateAndPersistGFlags", "UpdatePlacementInfo", "UpdateSoftwareVersion", "WaitForDataMove", "WaitForLeaderBlacklistCompletion", "WaitForFollowerLag", "WaitForLoadBalance", "WaitForMasterLeader", "WaitForServer", "WaitForTServerHeartBeats", "DeleteClusterFromUniverse", "InstanceActions", "WaitForServerReady", "RunExternalScript", "XClusterConfigSetup", "XClusterConfigSetStatus", "XClusterConfigModifyTables", "XClusterConfigRename", "XClusterConfigDelete", "XClusterConfigSync", "XClusterConfigUpdateMasterAddresses", "CloudAccessKeyCleanup", "CloudAccessKeySetup", "CloudInitializer", "CloudProviderCleanup", "CloudRegionCleanup", "CloudRegionSetup", "CloudSetup", "BackupTable", "BackupTableYb", "BackupUniverseKeys", "RestoreBackupYb", "RestoreUniverseKeys", "RestoreUniverseKeysYb", "WaitForLeadersOnPreferredOnly", "EnableEncryptionAtRest", "DisableEncryptionAtRest", "DestroyEncryptionAtRest", "KubernetesCommandExecutor", "KubernetesWaitForPod", "KubernetesCheckNumPod", "SetActiveUniverseKeys", "CopyEncryptionKeyFile", "WaitForEncryptionKeyInMemory", "UnivSetCertificate", "CreateAlertDefinitions", "ManageAlertDefinitions", "UniverseSetTlsParams", "UniverseUpdateRootCert", "ResetUniverseVersion", "DeleteCertificate", "SetNodeStatus", "CheckMasterLeader", "CheckMasters", "CheckTServers", "WaitForTServerHBs", "CreatePrometheusSwamperConfig", "PreflightNodeCheck", "RunYsqlUpgrade", "ResizeNode", "CheckMemory", "UpdateMountedDisks", "TransferXClusterCerts", "CreateTableSpacesInUniverse", "CreateTableSpaces", "ThirdpartySoftwareUpgrade" ],
          "type" : "string"
        },
        "updatingTaskUUID" : {
          "format" : "uuid",
          "type" : "string"
        },
        "useNewHelmNamingStyle" : {
          "type" : "boolean"
        },
        "userAZSelected" : {
          "type" : "boolean"
        },
        "ybPrevSoftwareVersion" : {
          "description" : "Previous software version",
          "type" : "string"
        }
      },
      "required" : [ "clusters" ],
      "type" : "object"
    },
    "UniverseDefinitionTaskParamsResp" : {
      "properties" : {
        "allowInsecure" : {
          "type" : "boolean"
        },
        "backupInProgress" : {
          "type" : "boolean"
        },
        "capability" : {
          "enum" : [ "READ_ONLY", "EDITS_ALLOWED" ],
          "type" : "string"
        },
        "clientRootCA" : {
          "format" : "uuid",
          "type" : "string"
        },
        "clusters" : {
          "items" : {
            "$ref" : "#/definitions/Cluster"
          },
          "type" : "array"
        },
        "cmkArn" : {
          "description" : "Amazon Resource Name (ARN) of the CMK",
          "type" : "string"
        },
        "communicationPorts" : {
          "$ref" : "#/definitions/CommunicationPorts",
          "description" : "Communication ports"
        },
        "currentClusterType" : {
          "enum" : [ "PRIMARY", "ASYNC" ],
          "type" : "string"
        },
        "deviceInfo" : {
          "$ref" : "#/definitions/DeviceInfo",
          "description" : "Device information"
        },
        "encryptionAtRestConfig" : {
          "$ref" : "#/definitions/EncryptionAtRestConfig",
          "description" : "Encryption at rest configation"
        },
        "errorString" : {
          "description" : "Error message",
          "type" : "string"
        },
        "expectedUniverseVersion" : {
          "description" : "Expected universe version",
          "format" : "int32",
          "type" : "integer"
        },
        "extraDependencies" : {
          "$ref" : "#/definitions/ExtraDependencies",
          "description" : "Extra dependencies"
        },
        "firstTry" : {
          "description" : "Whether this task has been tried before",
          "type" : "boolean"
        },
        "importedState" : {
          "enum" : [ "NONE", "STARTED", "MASTERS_ADDED", "TSERVERS_ADDED", "IMPORTED" ],
          "type" : "string"
        },
        "itestS3PackagePath" : {
          "type" : "string"
        },
        "nextClusterIndex" : {
          "format" : "int32",
          "type" : "integer"
        },
        "nodeDetailsSet" : {
          "items" : {
            "$ref" : "#/definitions/NodeDetailsResp"
          },
          "readOnly" : true,
          "type" : "array",
          "uniqueItems" : true
        },
        "nodeExporterUser" : {
          "description" : "Node exporter user",
          "type" : "string"
        },
        "nodePrefix" : {
          "type" : "string"
        },
        "nodesResizeAvailable" : {
          "type" : "boolean"
        },
        "previousTaskUUID" : {
          "description" : "Previous task UUID only if this task is a retry",
          "format" : "uuid",
          "type" : "string"
        },
        "remotePackagePath" : {
          "type" : "string"
        },
        "resetAZConfig" : {
          "type" : "boolean"
        },
        "rootAndClientRootCASame" : {
          "type" : "boolean"
        },
        "rootCA" : {
          "format" : "uuid",
          "type" : "string"
        },
        "setTxnTableWaitCountFlag" : {
          "type" : "boolean"
        },
        "sourceXClusterConfigs" : {
          "description" : "The source universe's xcluster replication relationships",
          "items" : {
            "format" : "uuid",
            "type" : "string"
          },
          "readOnly" : true,
          "type" : "array"
        },
        "targetXClusterConfigs" : {
          "description" : "The target universe's xcluster replication relationships",
          "items" : {
            "format" : "uuid",
            "type" : "string"
          },
          "readOnly" : true,
          "type" : "array"
        },
        "universePaused" : {
          "type" : "boolean"
        },
        "universeUUID" : {
          "description" : "Associated universe UUID",
          "format" : "uuid",
          "type" : "string"
        },
        "updateInProgress" : {
          "type" : "boolean"
        },
        "updateSucceeded" : {
          "type" : "boolean"
        },
        "updatingTask" : {
          "enum" : [ "CloudBootstrap", "CloudCleanup", "CreateCassandraTable", "CreateUniverse", "ReadOnlyClusterCreate", "ReadOnlyKubernetesClusterCreate", "ReadOnlyClusterDelete", "CreateKubernetesUniverse", "DestroyUniverse", "PauseUniverse", "ResumeUniverse", "DestroyKubernetesUniverse", "DeleteTable", "BackupUniverse", "RestoreBackup", "MultiTableBackup", "CreateBackup", "EditUniverse", "EditKubernetesUniverse", "ExternalScript", "KubernetesProvision", "ImportIntoTable", "UpgradeUniverse", "RestartUniverse", "SoftwareUpgrade", "SoftwareKubernetesUpgrade", "GFlagsUpgrade", "GFlagsKubernetesUpgrade", "CertsRotate", "CertsRotateKubernetesUpgrade", "TlsToggle", "VMImageUpgrade", "SystemdUpgrade", "CreateRootVolumes", "ReplaceRootVolume", "ChangeInstanceType", "PersistResizeNode", "PersistSystemdUpgrade", "UpdateNodeDetails", "UpgradeKubernetesUniverse", "DeleteNodeFromUniverse", "StopNodeInUniverse", "StartNodeInUniverse", "AddNodeToUniverse", "RemoveNodeFromUniverse", "ReleaseInstanceFromUniverse", "SetUniverseKey", "SetKubernetesUniverseKey", "CreateKMSConfig", "EditKMSConfig", "DeleteKMSConfig", "UpdateDiskSize", "StartMasterOnNode", "CreateXClusterConfig", "EditXClusterConfig", "DeleteXClusterConfig", "SyncXClusterConfig", "CreateSupportBundle", "AnsibleClusterServerCtl", "AnsibleConfigureServers", "AnsibleDestroyServer", "PauseServer", "ResumeServer", "AnsibleSetupServer", "AnsibleCreateServer", "PrecheckNode", "PrecheckNodeDetached", "AnsibleUpdateNodeInfo", "BulkImport", "ChangeMasterConfig", "ChangeAdminPassword", "CreateTable", "DeleteNode", "DeleteBackup", "DeleteBackupYb", "DeleteCustomerConfig", "DeleteCustomerStorageConfig", "UpdateNodeProcess", "DeleteTableFromUniverse", "LoadBalancerStateChange", "ModifyBlackList", "ManipulateDnsRecordTask", "RemoveUniverseEntry", "SetFlagInMemory", "SetNodeState", "SwamperTargetsFileUpdate", "UniverseUpdateSucceeded", "UpdateAndPersistGFlags", "UpdatePlacementInfo", "UpdateSoftwareVersion", "WaitForDataMove", "WaitForLeaderBlacklistCompletion", "WaitForFollowerLag", "WaitForLoadBalance", "WaitForMasterLeader", "WaitForServer", "WaitForTServerHeartBeats", "DeleteClusterFromUniverse", "InstanceActions", "WaitForServerReady", "RunExternalScript", "XClusterConfigSetup", "XClusterConfigSetStatus", "XClusterConfigModifyTables", "XClusterConfigRename", "XClusterConfigDelete", "XClusterConfigSync", "XClusterConfigUpdateMasterAddresses", "CloudAccessKeyCleanup", "CloudAccessKeySetup", "CloudInitializer", "CloudProviderCleanup", "CloudRegionCleanup", "CloudRegionSetup", "CloudSetup", "BackupTable", "BackupTableYb", "BackupUniverseKeys", "RestoreBackupYb", "RestoreUniverseKeys", "RestoreUniverseKeysYb", "WaitForLeadersOnPreferredOnly", "EnableEncryptionAtRest", "DisableEncryptionAtRest", "DestroyEncryptionAtRest", "KubernetesCommandExecutor", "KubernetesWaitForPod", "KubernetesCheckNumPod", "SetActiveUniverseKeys", "CopyEncryptionKeyFile", "WaitForEncryptionKeyInMemory", "UnivSetCertificate", "CreateAlertDefinitions", "ManageAlertDefinitions", "UniverseSetTlsParams", "UniverseUpdateRootCert", "ResetUniverseVersion", "DeleteCertificate", "SetNodeStatus", "CheckMasterLeader", "CheckMasters", "CheckTServers", "WaitForTServerHBs", "CreatePrometheusSwamperConfig", "PreflightNodeCheck", "RunYsqlUpgrade", "ResizeNode", "CheckMemory", "UpdateMountedDisks", "TransferXClusterCerts", "CreateTableSpacesInUniverse", "CreateTableSpaces", "ThirdpartySoftwareUpgrade" ],
          "type" : "string"
        },
        "updatingTaskUUID" : {
          "format" : "uuid",
          "type" : "string"
        },
        "useNewHelmNamingStyle" : {
          "type" : "boolean"
        },
        "userAZSelected" : {
          "type" : "boolean"
        },
        "ybPrevSoftwareVersion" : {
          "description" : "Previous software version",
          "type" : "string"
        }
      },
      "required" : [ "clusters" ],
      "type" : "object"
    },
    "UniverseDetailSubset" : {
      "description" : "A small subset of universe information",
      "properties" : {
        "creationDate" : {
          "format" : "int64",
          "type" : "integer"
        },
        "name" : {
          "type" : "string"
        },
        "universePaused" : {
          "type" : "boolean"
        },
        "updateInProgress" : {
          "type" : "boolean"
        },
        "updateSucceeded" : {
          "type" : "boolean"
        },
        "uuid" : {
          "format" : "uuid",
          "type" : "string"
        }
      },
      "required" : [ "creationDate", "name", "universePaused", "updateInProgress", "updateSucceeded", "uuid" ],
      "type" : "object"
    },
    "UniverseResourceDetails" : {
      "properties" : {
        "azList" : {
          "description" : "Azs",
          "items" : {
            "type" : "string"
          },
          "type" : "array",
          "uniqueItems" : true
        },
        "ebsPricePerHour" : {
          "description" : "EBS price per hour",
          "format" : "double",
          "type" : "number"
        },
        "gp3FreePiops" : {
          "description" : "gp3 free piops",
          "format" : "int32",
          "type" : "integer"
        },
        "gp3FreeThroughput" : {
          "description" : "gp3 free throughput",
          "format" : "int32",
          "type" : "integer"
        },
        "memSizeGB" : {
          "description" : "Memory GB",
          "format" : "double",
          "type" : "number"
        },
        "numCores" : {
          "description" : "Numbers of cores",
          "format" : "double",
          "type" : "number"
        },
        "numNodes" : {
          "description" : "Numbers of node",
          "format" : "int32",
          "type" : "integer"
        },
        "pricePerHour" : {
          "description" : "Price per hour",
          "format" : "double",
          "type" : "number"
        },
        "volumeCount" : {
          "description" : "Volume count",
          "format" : "int32",
          "type" : "integer"
        },
        "volumeSizeGB" : {
          "description" : "Volume in GB",
          "format" : "int32",
          "type" : "integer"
        }
      },
      "type" : "object"
    },
    "UniverseResp" : {
      "description" : "Universe-creation response",
      "properties" : {
        "creationDate" : {
          "description" : "Universe creation date",
          "type" : "string"
        },
        "dnsName" : {
          "description" : "DNS name",
          "type" : "string"
        },
        "name" : {
          "description" : "Universe name",
          "type" : "string"
        },
        "pricePerHour" : {
          "description" : "Price",
          "format" : "double",
          "type" : "number"
        },
        "resources" : {
          "$ref" : "#/definitions/UniverseResourceDetails",
          "description" : "Universe resource details"
        },
        "sampleAppCommandTxt" : {
          "description" : "Sample command",
          "type" : "string"
        },
        "taskUUID" : {
          "description" : "Task UUID",
          "format" : "uuid",
          "type" : "string"
        },
        "universeConfig" : {
          "additionalProperties" : {
            "type" : "string"
          },
          "description" : "Universe configuration",
          "type" : "object"
        },
        "universeDetails" : {
          "$ref" : "#/definitions/UniverseDefinitionTaskParamsResp",
          "description" : "Universe details"
        },
        "universeUUID" : {
          "description" : "Universe UUID",
          "format" : "uuid",
          "type" : "string"
        },
        "version" : {
          "description" : "Universe version",
          "format" : "int32",
          "type" : "integer"
        }
      },
      "type" : "object"
    },
    "UpgradeTaskParams" : {
      "properties" : {
        "allowInsecure" : {
          "type" : "boolean"
        },
        "backupInProgress" : {
          "type" : "boolean"
        },
        "capability" : {
          "enum" : [ "READ_ONLY", "EDITS_ALLOWED" ],
          "type" : "string"
        },
        "clientRootCA" : {
          "format" : "uuid",
          "type" : "string"
        },
        "clusters" : {
          "items" : {
            "$ref" : "#/definitions/Cluster"
          },
          "type" : "array"
        },
        "cmkArn" : {
          "description" : "Amazon Resource Name (ARN) of the CMK",
          "type" : "string"
        },
        "communicationPorts" : {
          "$ref" : "#/definitions/CommunicationPorts",
          "description" : "Communication ports"
        },
        "currentClusterType" : {
          "enum" : [ "PRIMARY", "ASYNC" ],
          "type" : "string"
        },
        "deviceInfo" : {
          "$ref" : "#/definitions/DeviceInfo",
          "description" : "Device information"
        },
        "encryptionAtRestConfig" : {
          "$ref" : "#/definitions/EncryptionAtRestConfig",
          "description" : "Encryption at rest configation"
        },
        "errorString" : {
          "description" : "Error message",
          "type" : "string"
        },
        "expectedUniverseVersion" : {
          "description" : "Expected universe version",
          "format" : "int32",
          "type" : "integer"
        },
        "extraDependencies" : {
          "$ref" : "#/definitions/ExtraDependencies",
          "description" : "Extra dependencies"
        },
        "firstTry" : {
          "description" : "Whether this task has been tried before",
          "type" : "boolean"
        },
        "importedState" : {
          "enum" : [ "NONE", "STARTED", "MASTERS_ADDED", "TSERVERS_ADDED", "IMPORTED" ],
          "type" : "string"
        },
        "itestS3PackagePath" : {
          "type" : "string"
        },
        "kubernetesUpgradeSupported" : {
          "type" : "boolean"
        },
        "nextClusterIndex" : {
          "format" : "int32",
          "type" : "integer"
        },
        "nodeDetailsSet" : {
          "description" : "Node details",
          "items" : {
            "$ref" : "#/definitions/NodeDetails"
          },
          "type" : "array",
          "uniqueItems" : true
        },
        "nodeExporterUser" : {
          "description" : "Node exporter user",
          "type" : "string"
        },
        "nodePrefix" : {
          "type" : "string"
        },
        "nodesResizeAvailable" : {
          "type" : "boolean"
        },
        "previousTaskUUID" : {
          "description" : "Previous task UUID only if this task is a retry",
          "format" : "uuid",
          "type" : "string"
        },
        "remotePackagePath" : {
          "type" : "string"
        },
        "resetAZConfig" : {
          "type" : "boolean"
        },
        "rootAndClientRootCASame" : {
          "type" : "boolean"
        },
        "rootCA" : {
          "format" : "uuid",
          "type" : "string"
        },
        "setTxnTableWaitCountFlag" : {
          "type" : "boolean"
        },
        "sleepAfterMasterRestartMillis" : {
          "format" : "int32",
          "type" : "integer"
        },
        "sleepAfterTServerRestartMillis" : {
          "format" : "int32",
          "type" : "integer"
        },
        "sourceXClusterConfigs" : {
          "description" : "The source universe's xcluster replication relationships",
          "items" : {
            "format" : "uuid",
            "type" : "string"
          },
          "readOnly" : true,
          "type" : "array"
        },
        "targetXClusterConfigs" : {
          "description" : "The target universe's xcluster replication relationships",
          "items" : {
            "format" : "uuid",
            "type" : "string"
          },
          "readOnly" : true,
          "type" : "array"
        },
        "universePaused" : {
          "type" : "boolean"
        },
        "universeUUID" : {
          "description" : "Associated universe UUID",
          "format" : "uuid",
          "type" : "string"
        },
        "updateInProgress" : {
          "type" : "boolean"
        },
        "updateSucceeded" : {
          "type" : "boolean"
        },
        "updatingTask" : {
          "enum" : [ "CloudBootstrap", "CloudCleanup", "CreateCassandraTable", "CreateUniverse", "ReadOnlyClusterCreate", "ReadOnlyKubernetesClusterCreate", "ReadOnlyClusterDelete", "CreateKubernetesUniverse", "DestroyUniverse", "PauseUniverse", "ResumeUniverse", "DestroyKubernetesUniverse", "DeleteTable", "BackupUniverse", "RestoreBackup", "MultiTableBackup", "CreateBackup", "EditUniverse", "EditKubernetesUniverse", "ExternalScript", "KubernetesProvision", "ImportIntoTable", "UpgradeUniverse", "RestartUniverse", "SoftwareUpgrade", "SoftwareKubernetesUpgrade", "GFlagsUpgrade", "GFlagsKubernetesUpgrade", "CertsRotate", "CertsRotateKubernetesUpgrade", "TlsToggle", "VMImageUpgrade", "SystemdUpgrade", "CreateRootVolumes", "ReplaceRootVolume", "ChangeInstanceType", "PersistResizeNode", "PersistSystemdUpgrade", "UpdateNodeDetails", "UpgradeKubernetesUniverse", "DeleteNodeFromUniverse", "StopNodeInUniverse", "StartNodeInUniverse", "AddNodeToUniverse", "RemoveNodeFromUniverse", "ReleaseInstanceFromUniverse", "SetUniverseKey", "SetKubernetesUniverseKey", "CreateKMSConfig", "EditKMSConfig", "DeleteKMSConfig", "UpdateDiskSize", "StartMasterOnNode", "CreateXClusterConfig", "EditXClusterConfig", "DeleteXClusterConfig", "SyncXClusterConfig", "CreateSupportBundle", "AnsibleClusterServerCtl", "AnsibleConfigureServers", "AnsibleDestroyServer", "PauseServer", "ResumeServer", "AnsibleSetupServer", "AnsibleCreateServer", "PrecheckNode", "PrecheckNodeDetached", "AnsibleUpdateNodeInfo", "BulkImport", "ChangeMasterConfig", "ChangeAdminPassword", "CreateTable", "DeleteNode", "DeleteBackup", "DeleteBackupYb", "DeleteCustomerConfig", "DeleteCustomerStorageConfig", "UpdateNodeProcess", "DeleteTableFromUniverse", "LoadBalancerStateChange", "ModifyBlackList", "ManipulateDnsRecordTask", "RemoveUniverseEntry", "SetFlagInMemory", "SetNodeState", "SwamperTargetsFileUpdate", "UniverseUpdateSucceeded", "UpdateAndPersistGFlags", "UpdatePlacementInfo", "UpdateSoftwareVersion", "WaitForDataMove", "WaitForLeaderBlacklistCompletion", "WaitForFollowerLag", "WaitForLoadBalance", "WaitForMasterLeader", "WaitForServer", "WaitForTServerHeartBeats", "DeleteClusterFromUniverse", "InstanceActions", "WaitForServerReady", "RunExternalScript", "XClusterConfigSetup", "XClusterConfigSetStatus", "XClusterConfigModifyTables", "XClusterConfigRename", "XClusterConfigDelete", "XClusterConfigSync", "XClusterConfigUpdateMasterAddresses", "CloudAccessKeyCleanup", "CloudAccessKeySetup", "CloudInitializer", "CloudProviderCleanup", "CloudRegionCleanup", "CloudRegionSetup", "CloudSetup", "BackupTable", "BackupTableYb", "BackupUniverseKeys", "RestoreBackupYb", "RestoreUniverseKeys", "RestoreUniverseKeysYb", "WaitForLeadersOnPreferredOnly", "EnableEncryptionAtRest", "DisableEncryptionAtRest", "DestroyEncryptionAtRest", "KubernetesCommandExecutor", "KubernetesWaitForPod", "KubernetesCheckNumPod", "SetActiveUniverseKeys", "CopyEncryptionKeyFile", "WaitForEncryptionKeyInMemory", "UnivSetCertificate", "CreateAlertDefinitions", "ManageAlertDefinitions", "UniverseSetTlsParams", "UniverseUpdateRootCert", "ResetUniverseVersion", "DeleteCertificate", "SetNodeStatus", "CheckMasterLeader", "CheckMasters", "CheckTServers", "WaitForTServerHBs", "CreatePrometheusSwamperConfig", "PreflightNodeCheck", "RunYsqlUpgrade", "ResizeNode", "CheckMemory", "UpdateMountedDisks", "TransferXClusterCerts", "CreateTableSpacesInUniverse", "CreateTableSpaces", "ThirdpartySoftwareUpgrade" ],
          "type" : "string"
        },
        "updatingTaskUUID" : {
          "format" : "uuid",
          "type" : "string"
        },
        "upgradeOption" : {
          "enum" : [ "Rolling", "Non-Rolling", "Non-Restart" ],
          "type" : "string"
        },
        "useNewHelmNamingStyle" : {
          "type" : "boolean"
        },
        "userAZSelected" : {
          "type" : "boolean"
        },
        "ybPrevSoftwareVersion" : {
          "description" : "Previous software version",
          "type" : "string"
        }
      },
      "required" : [ "clusters", "kubernetesUpgradeSupported", "sleepAfterMasterRestartMillis", "sleepAfterTServerRestartMillis", "upgradeOption" ],
      "type" : "object"
    },
    "UserIntent" : {
      "properties" : {
        "accessKeyCode" : {
          "type" : "string"
        },
        "assignPublicIP" : {
          "type" : "boolean"
        },
        "assignStaticPublicIP" : {
          "description" : "Whether to assign static public IP",
          "type" : "boolean"
        },
        "awsArnString" : {
          "type" : "string"
        },
        "deviceInfo" : {
          "$ref" : "#/definitions/DeviceInfo"
        },
        "enableClientToNodeEncrypt" : {
          "type" : "boolean"
        },
        "enableExposingService" : {
          "enum" : [ "NONE", "EXPOSED", "UNEXPOSED" ],
          "type" : "string"
        },
        "enableIPV6" : {
          "type" : "boolean"
        },
        "enableNodeToNodeEncrypt" : {
          "type" : "boolean"
        },
        "enableVolumeEncryption" : {
          "type" : "boolean"
        },
        "enableYCQL" : {
          "type" : "boolean"
        },
        "enableYCQLAuth" : {
          "type" : "boolean"
        },
        "enableYEDIS" : {
          "type" : "boolean"
        },
        "enableYSQL" : {
          "type" : "boolean"
        },
        "enableYSQLAuth" : {
          "type" : "boolean"
        },
        "instanceTags" : {
          "additionalProperties" : {
            "type" : "string"
          },
          "type" : "object"
        },
        "instanceType" : {
          "type" : "string"
        },
        "masterGFlags" : {
          "additionalProperties" : {
            "type" : "string"
          },
          "type" : "object"
        },
        "numNodes" : {
          "format" : "int32",
          "type" : "integer"
        },
        "preferredRegion" : {
          "format" : "uuid",
          "type" : "string"
        },
        "provider" : {
          "type" : "string"
        },
        "providerType" : {
          "enum" : [ "unknown", "aws", "gcp", "azu", "docker", "onprem", "kubernetes", "local", "other" ],
          "type" : "string"
        },
        "regionList" : {
          "items" : {
            "format" : "uuid",
            "type" : "string"
          },
          "type" : "array"
        },
        "replicationFactor" : {
          "format" : "int32",
          "type" : "integer"
        },
        "tserverGFlags" : {
          "additionalProperties" : {
            "type" : "string"
          },
          "type" : "object"
        },
        "universeName" : {
          "type" : "string"
        },
        "useHostname" : {
          "type" : "boolean"
        },
        "useSystemd" : {
          "type" : "boolean"
        },
        "useTimeSync" : {
          "type" : "boolean"
        },
        "ybSoftwareVersion" : {
          "type" : "string"
        },
        "ycqlPassword" : {
          "type" : "string"
        },
        "ysqlPassword" : {
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "UserProfileData" : {
      "description" : "User profile data. The API and UI use this to validate form data.",
      "properties" : {
        "confirmPassword" : {
          "description" : "Password confirmation",
          "example" : "Test@1234",
          "type" : "string"
        },
        "password" : {
          "description" : "Password",
          "example" : "Test@1234",
          "type" : "string"
        },
        "role" : {
          "description" : "User role",
          "enum" : [ "Admin", "ReadOnly", "SuperAdmin", "BackupAdmin" ],
          "example" : "Admin",
          "type" : "string"
        },
        "timezone" : {
          "description" : "User timezone",
          "example" : "America/Toronto",
          "type" : "string"
        }
      },
      "required" : [ "role" ],
      "type" : "object"
    },
    "UserRegistrationData" : {
      "description" : "User registration data. The API and UI use this to validate form data.",
      "properties" : {
        "confirmPassword" : {
          "description" : "Password confirmation",
          "example" : "Test@1234",
          "type" : "string"
        },
        "email" : {
          "description" : "Email address",
          "example" : "test@example.com",
          "type" : "string"
        },
        "features" : {
          "additionalProperties" : {
            "type" : "object"
          },
          "description" : "User features",
          "type" : "object"
        },
        "password" : {
          "description" : "Password",
          "example" : "Test@1234",
          "type" : "string"
        },
        "role" : {
          "description" : "User role",
          "enum" : [ "Admin", "ReadOnly", "SuperAdmin", "BackupAdmin" ],
          "example" : "Admin",
          "type" : "string"
        },
        "timezone" : {
          "description" : "User timezone",
          "example" : "America/Toronto",
          "type" : "string"
        }
      },
      "required" : [ "email", "role" ],
      "type" : "object"
    },
    "UserWithFeatures" : {
      "description" : "A user with set of features, associated with a customer",
      "properties" : {
        "authTokenIssueDate" : {
          "description" : "API token creation date",
          "example" : "1624255408795",
          "format" : "date-time",
          "readOnly" : true,
          "type" : "string"
        },
        "creationDate" : {
          "description" : "User creation date",
          "example" : "2021-06-17T15:00:05-04:00",
          "format" : "date-time",
          "readOnly" : true,
          "type" : "string"
        },
        "customerUUID" : {
          "description" : "Customer UUID",
          "format" : "uuid",
          "readOnly" : true,
          "type" : "string"
        },
        "email" : {
          "description" : "User email address",
          "example" : "username1@example.com",
          "type" : "string"
        },
        "isPrimary" : {
          "description" : "True if the user is the primary user",
          "type" : "boolean"
        },
        "ldapSpecifiedRole" : {
          "description" : "LDAP Specified Role",
          "type" : "boolean"
        },
        "role" : {
          "description" : "User role",
          "enum" : [ "Admin", "ReadOnly", "SuperAdmin", "BackupAdmin" ],
          "type" : "string"
        },
        "timezone" : {
          "description" : "User timezone",
          "type" : "string"
        },
        "userType" : {
          "description" : "User Type",
          "enum" : [ "local", "ldap" ],
          "type" : "string"
        },
        "uuid" : {
          "description" : "User UUID",
          "format" : "uuid",
          "readOnly" : true,
          "type" : "string"
        }
      },
      "required" : [ "email" ],
      "type" : "object"
    },
    "Users" : {
      "description" : "A user associated with a customer",
      "properties" : {
        "authTokenIssueDate" : {
          "description" : "API token creation date",
          "example" : "1624255408795",
          "format" : "date-time",
          "readOnly" : true,
          "type" : "string"
        },
        "creationDate" : {
          "description" : "User creation date",
          "example" : "2021-06-17T15:00:05-04:00",
          "format" : "date-time",
          "readOnly" : true,
          "type" : "string"
        },
        "customerUUID" : {
          "description" : "Customer UUID",
          "format" : "uuid",
          "readOnly" : true,
          "type" : "string"
        },
        "email" : {
          "description" : "User email address",
          "example" : "username1@example.com",
          "type" : "string"
        },
        "isPrimary" : {
          "description" : "True if the user is the primary user",
          "type" : "boolean"
        },
        "ldapSpecifiedRole" : {
          "description" : "LDAP Specified Role",
          "type" : "boolean"
        },
        "role" : {
          "description" : "User role",
          "enum" : [ "Admin", "ReadOnly", "SuperAdmin", "BackupAdmin" ],
          "type" : "string"
        },
        "timezone" : {
          "description" : "User timezone",
          "type" : "string"
        },
        "userType" : {
          "description" : "User Type",
          "enum" : [ "local", "ldap" ],
          "type" : "string"
        },
        "uuid" : {
          "description" : "User UUID",
          "format" : "uuid",
          "readOnly" : true,
          "type" : "string"
        }
      },
      "required" : [ "email" ],
      "type" : "object"
    },
    "VMImageUpgradeParams" : {
      "properties" : {
        "allowInsecure" : {
          "type" : "boolean"
        },
        "backupInProgress" : {
          "type" : "boolean"
        },
        "capability" : {
          "enum" : [ "READ_ONLY", "EDITS_ALLOWED" ],
          "type" : "string"
        },
        "clientRootCA" : {
          "format" : "uuid",
          "type" : "string"
        },
        "clusters" : {
          "items" : {
            "$ref" : "#/definitions/Cluster"
          },
          "type" : "array"
        },
        "cmkArn" : {
          "description" : "Amazon Resource Name (ARN) of the CMK",
          "type" : "string"
        },
        "communicationPorts" : {
          "$ref" : "#/definitions/CommunicationPorts",
          "description" : "Communication ports"
        },
        "currentClusterType" : {
          "enum" : [ "PRIMARY", "ASYNC" ],
          "type" : "string"
        },
        "deviceInfo" : {
          "$ref" : "#/definitions/DeviceInfo",
          "description" : "Device information"
        },
        "encryptionAtRestConfig" : {
          "$ref" : "#/definitions/EncryptionAtRestConfig",
          "description" : "Encryption at rest configation"
        },
        "errorString" : {
          "description" : "Error message",
          "type" : "string"
        },
        "expectedUniverseVersion" : {
          "description" : "Expected universe version",
          "format" : "int32",
          "type" : "integer"
        },
        "extraDependencies" : {
          "$ref" : "#/definitions/ExtraDependencies",
          "description" : "Extra dependencies"
        },
        "firstTry" : {
          "description" : "Whether this task has been tried before",
          "type" : "boolean"
        },
        "forceVMImageUpgrade" : {
          "type" : "boolean"
        },
        "importedState" : {
          "enum" : [ "NONE", "STARTED", "MASTERS_ADDED", "TSERVERS_ADDED", "IMPORTED" ],
          "type" : "string"
        },
        "itestS3PackagePath" : {
          "type" : "string"
        },
        "kubernetesUpgradeSupported" : {
          "type" : "boolean"
        },
        "machineImages" : {
          "additionalProperties" : {
            "type" : "string"
          },
          "type" : "object"
        },
        "nextClusterIndex" : {
          "format" : "int32",
          "type" : "integer"
        },
        "nodeDetailsSet" : {
          "description" : "Node details",
          "items" : {
            "$ref" : "#/definitions/NodeDetails"
          },
          "type" : "array",
          "uniqueItems" : true
        },
        "nodeExporterUser" : {
          "description" : "Node exporter user",
          "type" : "string"
        },
        "nodePrefix" : {
          "type" : "string"
        },
        "nodesResizeAvailable" : {
          "type" : "boolean"
        },
        "previousTaskUUID" : {
          "description" : "Previous task UUID only if this task is a retry",
          "format" : "uuid",
          "type" : "string"
        },
        "remotePackagePath" : {
          "type" : "string"
        },
        "resetAZConfig" : {
          "type" : "boolean"
        },
        "rootAndClientRootCASame" : {
          "type" : "boolean"
        },
        "rootCA" : {
          "format" : "uuid",
          "type" : "string"
        },
        "setTxnTableWaitCountFlag" : {
          "type" : "boolean"
        },
        "sleepAfterMasterRestartMillis" : {
          "format" : "int32",
          "type" : "integer"
        },
        "sleepAfterTServerRestartMillis" : {
          "format" : "int32",
          "type" : "integer"
        },
        "sourceXClusterConfigs" : {
          "description" : "The source universe's xcluster replication relationships",
          "items" : {
            "format" : "uuid",
            "type" : "string"
          },
          "readOnly" : true,
          "type" : "array"
        },
        "targetXClusterConfigs" : {
          "description" : "The target universe's xcluster replication relationships",
          "items" : {
            "format" : "uuid",
            "type" : "string"
          },
          "readOnly" : true,
          "type" : "array"
        },
        "universePaused" : {
          "type" : "boolean"
        },
        "universeUUID" : {
          "description" : "Associated universe UUID",
          "format" : "uuid",
          "type" : "string"
        },
        "updateInProgress" : {
          "type" : "boolean"
        },
        "updateSucceeded" : {
          "type" : "boolean"
        },
        "updatingTask" : {
          "enum" : [ "CloudBootstrap", "CloudCleanup", "CreateCassandraTable", "CreateUniverse", "ReadOnlyClusterCreate", "ReadOnlyKubernetesClusterCreate", "ReadOnlyClusterDelete", "CreateKubernetesUniverse", "DestroyUniverse", "PauseUniverse", "ResumeUniverse", "DestroyKubernetesUniverse", "DeleteTable", "BackupUniverse", "RestoreBackup", "MultiTableBackup", "CreateBackup", "EditUniverse", "EditKubernetesUniverse", "ExternalScript", "KubernetesProvision", "ImportIntoTable", "UpgradeUniverse", "RestartUniverse", "SoftwareUpgrade", "SoftwareKubernetesUpgrade", "GFlagsUpgrade", "GFlagsKubernetesUpgrade", "CertsRotate", "CertsRotateKubernetesUpgrade", "TlsToggle", "VMImageUpgrade", "SystemdUpgrade", "CreateRootVolumes", "ReplaceRootVolume", "ChangeInstanceType", "PersistResizeNode", "PersistSystemdUpgrade", "UpdateNodeDetails", "UpgradeKubernetesUniverse", "DeleteNodeFromUniverse", "StopNodeInUniverse", "StartNodeInUniverse", "AddNodeToUniverse", "RemoveNodeFromUniverse", "ReleaseInstanceFromUniverse", "SetUniverseKey", "SetKubernetesUniverseKey", "CreateKMSConfig", "EditKMSConfig", "DeleteKMSConfig", "UpdateDiskSize", "StartMasterOnNode", "CreateXClusterConfig", "EditXClusterConfig", "DeleteXClusterConfig", "SyncXClusterConfig", "CreateSupportBundle", "AnsibleClusterServerCtl", "AnsibleConfigureServers", "AnsibleDestroyServer", "PauseServer", "ResumeServer", "AnsibleSetupServer", "AnsibleCreateServer", "PrecheckNode", "PrecheckNodeDetached", "AnsibleUpdateNodeInfo", "BulkImport", "ChangeMasterConfig", "ChangeAdminPassword", "CreateTable", "DeleteNode", "DeleteBackup", "DeleteBackupYb", "DeleteCustomerConfig", "DeleteCustomerStorageConfig", "UpdateNodeProcess", "DeleteTableFromUniverse", "LoadBalancerStateChange", "ModifyBlackList", "ManipulateDnsRecordTask", "RemoveUniverseEntry", "SetFlagInMemory", "SetNodeState", "SwamperTargetsFileUpdate", "UniverseUpdateSucceeded", "UpdateAndPersistGFlags", "UpdatePlacementInfo", "UpdateSoftwareVersion", "WaitForDataMove", "WaitForLeaderBlacklistCompletion", "WaitForFollowerLag", "WaitForLoadBalance", "WaitForMasterLeader", "WaitForServer", "WaitForTServerHeartBeats", "DeleteClusterFromUniverse", "InstanceActions", "WaitForServerReady", "RunExternalScript", "XClusterConfigSetup", "XClusterConfigSetStatus", "XClusterConfigModifyTables", "XClusterConfigRename", "XClusterConfigDelete", "XClusterConfigSync", "XClusterConfigUpdateMasterAddresses", "CloudAccessKeyCleanup", "CloudAccessKeySetup", "CloudInitializer", "CloudProviderCleanup", "CloudRegionCleanup", "CloudRegionSetup", "CloudSetup", "BackupTable", "BackupTableYb", "BackupUniverseKeys", "RestoreBackupYb", "RestoreUniverseKeys", "RestoreUniverseKeysYb", "WaitForLeadersOnPreferredOnly", "EnableEncryptionAtRest", "DisableEncryptionAtRest", "DestroyEncryptionAtRest", "KubernetesCommandExecutor", "KubernetesWaitForPod", "KubernetesCheckNumPod", "SetActiveUniverseKeys", "CopyEncryptionKeyFile", "WaitForEncryptionKeyInMemory", "UnivSetCertificate", "CreateAlertDefinitions", "ManageAlertDefinitions", "UniverseSetTlsParams", "UniverseUpdateRootCert", "ResetUniverseVersion", "DeleteCertificate", "SetNodeStatus", "CheckMasterLeader", "CheckMasters", "CheckTServers", "WaitForTServerHBs", "CreatePrometheusSwamperConfig", "PreflightNodeCheck", "RunYsqlUpgrade", "ResizeNode", "CheckMemory", "UpdateMountedDisks", "TransferXClusterCerts", "CreateTableSpacesInUniverse", "CreateTableSpaces", "ThirdpartySoftwareUpgrade" ],
          "type" : "string"
        },
        "updatingTaskUUID" : {
          "format" : "uuid",
          "type" : "string"
        },
        "upgradeOption" : {
          "enum" : [ "Rolling", "Non-Rolling", "Non-Restart" ],
          "type" : "string"
        },
        "useNewHelmNamingStyle" : {
          "type" : "boolean"
        },
        "userAZSelected" : {
          "type" : "boolean"
        },
        "ybPrevSoftwareVersion" : {
          "description" : "Previous software version",
          "type" : "string"
        },
        "ybSoftwareVersion" : {
          "type" : "string"
        }
      },
      "required" : [ "clusters", "forceVMImageUpgrade", "kubernetesUpgradeSupported", "machineImages", "sleepAfterMasterRestartMillis", "sleepAfterTServerRestartMillis", "upgradeOption", "ybSoftwareVersion" ],
      "type" : "object"
    },
    "VolumeDetails" : {
      "properties" : {
        "mountPath" : {
          "type" : "string"
        },
        "volumeSizeGB" : {
          "format" : "int32",
          "type" : "integer"
        },
        "volumeType" : {
          "enum" : [ "EBS", "SSD", "HDD", "NVME" ],
          "type" : "string"
        }
      },
      "required" : [ "mountPath", "volumeSizeGB", "volumeType" ],
      "type" : "object"
    },
    "XClusterConfig" : {
      "description" : "xcluster config object",
      "properties" : {
        "createTime" : {
          "description" : "Create time",
          "format" : "date-time",
          "type" : "string"
        },
        "modifyTime" : {
          "description" : "Modify time",
          "format" : "date-time",
          "type" : "string"
        },
        "name" : {
          "description" : "Name",
          "type" : "string"
        },
        "sourceUniverseUUID" : {
          "description" : "Source Universe UUID",
          "format" : "uuid",
          "type" : "string"
        },
        "status" : {
          "description" : "Status",
          "enum" : [ "Init", "Running", "Updating", "Paused", "Failed" ],
          "type" : "string"
        },
        "tables" : {
          "description" : "Source Universe table IDs",
          "items" : {
            "type" : "string"
          },
          "type" : "array",
          "uniqueItems" : true
        },
        "targetUniverseUUID" : {
          "description" : "Target Universe UUID",
          "format" : "uuid",
          "type" : "string"
        },
        "uuid" : {
          "description" : "UUID",
          "format" : "uuid",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "XClusterConfigCreateFormData" : {
      "description" : "xcluster create form",
      "properties" : {
        "name" : {
          "description" : "Name",
          "example" : "Repl-config1",
          "type" : "string"
        },
        "sourceUniverseUUID" : {
          "description" : "Source Universe UUID",
          "format" : "uuid",
          "type" : "string"
        },
        "tables" : {
          "description" : "Source Universe table IDs",
          "example" : "[000033df000030008000000000004006, 000033df00003000800000000000400b]",
          "items" : {
            "type" : "string"
          },
          "type" : "array",
          "uniqueItems" : true
        },
        "targetUniverseUUID" : {
          "description" : "Target Universe UUID",
          "format" : "uuid",
          "type" : "string"
        }
      },
      "required" : [ "name", "sourceUniverseUUID", "tables", "targetUniverseUUID" ],
      "type" : "object"
    },
    "XClusterConfigEditFormData" : {
      "description" : "xcluster edit form",
      "properties" : {
        "name" : {
          "description" : "Name",
          "example" : "Repl-config1",
          "type" : "string"
        },
        "status" : {
          "description" : "Status",
          "enum" : [ "Running", "Paused" ],
          "type" : "string"
        },
        "tables" : {
          "description" : "Source Universe table IDs",
          "example" : "[000033df000030008000000000004006, 000033df00003000800000000000400b]",
          "items" : {
            "type" : "string"
          },
          "type" : "array",
          "uniqueItems" : true
        }
      },
      "type" : "object"
    },
    "XClusterConfigGetResp" : {
      "description" : "xcluster get response",
      "properties" : {
        "createTime" : {
          "description" : "Create time",
          "format" : "date-time",
          "type" : "string"
        },
        "lag" : {
          "description" : "Lag metric data",
          "type" : "object"
        },
        "modifyTime" : {
          "description" : "Modify time",
          "format" : "date-time",
          "type" : "string"
        },
        "name" : {
          "description" : "Name",
          "type" : "string"
        },
        "sourceUniverseUUID" : {
          "description" : "Source Universe UUID",
          "format" : "uuid",
          "type" : "string"
        },
        "status" : {
          "description" : "Status",
          "enum" : [ "Init", "Running", "Updating", "Paused", "Failed" ],
          "type" : "string"
        },
        "tables" : {
          "description" : "Source Universe table IDs",
          "items" : {
            "type" : "string"
          },
          "type" : "array",
          "uniqueItems" : true
        },
        "targetUniverseUUID" : {
          "description" : "Target Universe UUID",
          "format" : "uuid",
          "type" : "string"
        },
        "uuid" : {
          "description" : "UUID",
          "format" : "uuid",
          "type" : "string"
        },
        "xclusterConfig" : {
          "$ref" : "#/definitions/XClusterConfig"
        }
      },
      "required" : [ "lag", "xclusterConfig" ],
      "type" : "object"
    },
    "YBPError" : {
      "description" : "Generic error response from the YugabyteDB Anywhere API",
      "properties" : {
        "error" : {
          "description" : "User-visible unstructured error message",
          "example" : "There was a problem creating the universe",
          "type" : "string"
        },
        "errorJson" : {
          "description" : "User visible error message as json object",
          "example" : "{ \"foo\" : \"bar\", \"baz\" : [1, 2, 3] }",
          "type" : "object"
        },
        "success" : {
          "description" : "Always set to false to indicate failure",
          "example" : false,
          "type" : "boolean"
        }
      },
      "type" : "object"
    },
    "YBPSuccess" : {
      "properties" : {
        "message" : {
          "description" : "API response message.",
          "readOnly" : true,
          "type" : "string"
        },
        "success" : {
          "description" : "API operation status. A value of true indicates the operation was successful.",
          "readOnly" : true,
          "type" : "boolean"
        }
      },
      "type" : "object"
    },
    "YBPTask" : {
      "properties" : {
        "resourceUUID" : {
          "description" : "UUID of the resource being modified by the task",
          "format" : "uuid",
          "readOnly" : true,
          "type" : "string"
        },
        "taskUUID" : {
          "description" : "Task UUID",
          "format" : "uuid",
          "readOnly" : true,
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "YBPTasks" : {
      "type" : "object"
    }
  },
  "externalDocs" : {
    "description" : "About YugabyteDB Anywhere",
    "url" : "https://docs.yugabyte.com/latest/yugabyte-platform/"
  },
  "info" : {
    "contact" : {
      "name" : "https://docs.yugabyte.com"
    },
    "description" : "ALPHA - NOT FOR EXTERNAL USE",
    "license" : {
      "name" : "Polyform Free Trial License 1.0.0",
      "url" : "https://github.com/yugabyte/yugabyte-db/blob/master/licenses/POLYFORM-FREE-TRIAL-LICENSE-1.0.0.txt"
    },
    "termsOfService" : "TODO(chirag)",
    "title" : "YugabyteDB Anywhere APIs",
    "version" : "v1"
  },
  "paths" : {
    "/api/v1/app_version" : {
      "get" : {
        "description" : "",
        "operationId" : "appVersion",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "additionalProperties" : {
                "type" : "string"
              },
              "type" : "object"
            }
          }
        },
        "summary" : "appVersion",
        "tags" : [ "Session management" ]
      }
    },
    "/api/v1/audit_logging_config" : {
      "post" : {
        "description" : "",
        "operationId" : "setAuditLoggingSettings",
        "parameters" : [ {
          "description" : "Audit Logging config to be updated",
          "in" : "body",
          "name" : "Audit Logging Config",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AuditLoggingConfig"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AuditLoggingConfig"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Set Audit Logging Level",
        "tags" : [ "LoggingConfig" ]
      }
    },
    "/api/v1/customer_count" : {
      "get" : {
        "description" : "",
        "operationId" : "customerCount",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CustomerCountResp"
            }
          }
        },
        "summary" : "customerCount",
        "tags" : [ "Session management" ]
      }
    },
    "/api/v1/customers" : {
      "get" : {
        "description" : "",
        "operationId" : "ListOfCustomers",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "items" : {
                "$ref" : "#/definitions/Customer"
              },
              "type" : "array"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "List customers",
        "tags" : [ "Customer management" ]
      }
    },
    "/api/v1/customers/{cUUID}" : {
      "delete" : {
        "description" : "",
        "operationId" : "deleteCustomer",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPSuccess"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Delete a customer",
        "tags" : [ "Customer management" ]
      },
      "get" : {
        "description" : "",
        "operationId" : "CustomerDetail",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CustomerDetailsData"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Get a customer's details",
        "tags" : [ "Customer management" ]
      },
      "put" : {
        "description" : "",
        "operationId" : "UpdateCustomer",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "Customer data to be updated",
          "in" : "body",
          "name" : "Customer",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CustomerAlertData"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Customer"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Update a customer",
        "tags" : [ "Customer management" ]
      }
    },
    "/api/v1/customers/{cUUID}/alert_channels" : {
      "get" : {
        "description" : "",
        "operationId" : "listAlertChannels",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "items" : {
                "$ref" : "#/definitions/AlertChannel"
              },
              "type" : "array"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "List all alert channels",
        "tags" : [ "Alerts" ]
      },
      "post" : {
        "description" : "",
        "operationId" : "createAlertChannel",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "CreateAlertChannelRequest",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AlertChannelFormData"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AlertChannel"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Create an alert channel",
        "tags" : [ "Alerts" ]
      }
    },
    "/api/v1/customers/{cUUID}/alert_channels/{acUUID}" : {
      "delete" : {
        "description" : "",
        "operationId" : "deleteAlertChannel",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "acUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPSuccess"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Delete an alert channel",
        "tags" : [ "Alerts" ]
      },
      "get" : {
        "description" : "",
        "operationId" : "getAlertChannel",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "acUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AlertChannel"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Get an alert channel",
        "tags" : [ "Alerts" ]
      },
      "put" : {
        "description" : "",
        "operationId" : "updateAlertChannel",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "acUUID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "UpdateAlertChannelRequest",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AlertChannelFormData"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AlertChannel"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Update an alert channel",
        "tags" : [ "Alerts" ]
      }
    },
    "/api/v1/customers/{cUUID}/alert_configurations" : {
      "post" : {
        "description" : "",
        "operationId" : "createAlertConfiguration",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "CreateAlertConfigurationRequest",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AlertConfiguration"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AlertConfiguration"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Create an alert configuration",
        "tags" : [ "Alerts" ]
      }
    },
    "/api/v1/customers/{cUUID}/alert_configurations/list" : {
      "post" : {
        "description" : "",
        "operationId" : "listAlertConfigurations",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "ListAlertConfigurationsRequest",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AlertConfigurationApiFilter"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "items" : {
                "$ref" : "#/definitions/AlertConfiguration"
              },
              "type" : "array"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Get filtered list of alert configurations",
        "tags" : [ "Alerts" ]
      }
    },
    "/api/v1/customers/{cUUID}/alert_configurations/page" : {
      "post" : {
        "description" : "",
        "operationId" : "pageAlertConfigurations",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "PageAlertConfigurationsRequest",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AlertConfigurationPagedApiQuery"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AlertConfigurationPagedResponse"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "List all alert configurations (paginated)",
        "tags" : [ "Alerts" ]
      }
    },
    "/api/v1/customers/{cUUID}/alert_configurations/{configurationUUID}" : {
      "delete" : {
        "description" : "",
        "operationId" : "deleteAlertConfiguration",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "configurationUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPSuccess"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Delete an alert configuration",
        "tags" : [ "Alerts" ]
      },
      "get" : {
        "description" : "",
        "operationId" : "getAlertConfiguration",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "configurationUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AlertConfiguration"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Get an alert configuration",
        "tags" : [ "Alerts" ]
      },
      "put" : {
        "description" : "",
        "operationId" : "updateAlertConfiguration",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "configurationUUID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "UpdateAlertConfigurationRequest",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AlertConfiguration"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AlertConfiguration"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Update an alert configuration",
        "tags" : [ "Alerts" ]
      }
    },
    "/api/v1/customers/{cUUID}/alert_configurations/{configurationUUID}/test_alert" : {
      "post" : {
        "description" : "",
        "operationId" : "sendTestAlert",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "configurationUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPSuccess"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Send test alert for alert configuration",
        "tags" : [ "Alerts" ]
      }
    },
    "/api/v1/customers/{cUUID}/alert_destinations" : {
      "get" : {
        "description" : "",
        "operationId" : "listAlertDestinations",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "items" : {
                "$ref" : "#/definitions/AlertDefinition"
              },
              "type" : "array"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "List alert destinations",
        "tags" : [ "Alerts" ]
      },
      "post" : {
        "description" : "",
        "operationId" : "createAlertDestination",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "CreateAlertDestinationRequest",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AlertDestinationFormData"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AlertDestination"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Create an alert destination",
        "tags" : [ "Alerts" ]
      }
    },
    "/api/v1/customers/{cUUID}/alert_destinations/{adUUID}" : {
      "delete" : {
        "description" : "",
        "operationId" : "deleteAlertDestination",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "adUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPSuccess"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Delete an alert destination",
        "tags" : [ "Alerts" ]
      },
      "get" : {
        "description" : "",
        "operationId" : "getAlertDestination",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "adUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AlertDestination"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Get an alert destination",
        "tags" : [ "Alerts" ]
      },
      "put" : {
        "description" : "",
        "operationId" : "updateAlertDestination",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "adUUID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "UpdateAlertDestinationRequest",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AlertDestinationFormData"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AlertDestination"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Update an alert destination",
        "tags" : [ "Alerts" ]
      }
    },
    "/api/v1/customers/{cUUID}/alert_templates" : {
      "post" : {
        "description" : "",
        "operationId" : "listAlertTemplates",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "ListTemplatesRequest",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AlertTemplateApiFilter"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "items" : {
                "$ref" : "#/definitions/AlertConfigurationTemplate"
              },
              "type" : "array"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Get filtered list of alert configuration templates",
        "tags" : [ "Alerts" ]
      }
    },
    "/api/v1/customers/{cUUID}/alerts" : {
      "get" : {
        "description" : "",
        "operationId" : "listOfAlerts",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "items" : {
                "$ref" : "#/definitions/Alert"
              },
              "type" : "array"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "List all alerts",
        "tags" : [ "Alerts" ]
      }
    },
    "/api/v1/customers/{cUUID}/alerts/acknowledge" : {
      "post" : {
        "description" : "",
        "operationId" : "acknowledgeByFilter",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "AcknowledgeAlertsRequest",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AlertApiFilter"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "items" : {
                "$ref" : "#/definitions/Alert"
              },
              "type" : "array"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Acknowledge all alerts",
        "tags" : [ "Alerts" ]
      }
    },
    "/api/v1/customers/{cUUID}/alerts/active" : {
      "get" : {
        "description" : "",
        "operationId" : "listActive",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "items" : {
                "$ref" : "#/definitions/Alert"
              },
              "type" : "array"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "List active alerts",
        "tags" : [ "Alerts" ]
      }
    },
    "/api/v1/customers/{cUUID}/alerts/count" : {
      "post" : {
        "description" : "",
        "operationId" : "countAlerts",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "CountAlertsRequest",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AlertApiFilter"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "format" : "int32",
              "type" : "integer"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Count alerts",
        "tags" : [ "Alerts" ]
      }
    },
    "/api/v1/customers/{cUUID}/alerts/page" : {
      "post" : {
        "description" : "",
        "operationId" : "pageAlerts",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "PageAlertsRequest",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AlertPagedApiQuery"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AlertPagedResponse"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "List alerts (paginated)",
        "tags" : [ "Alerts" ]
      }
    },
    "/api/v1/customers/{cUUID}/alerts/{alertUUID}" : {
      "get" : {
        "description" : "",
        "operationId" : "get",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "alertUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Alert"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Get details of an alert",
        "tags" : [ "Alerts" ]
      }
    },
    "/api/v1/customers/{cUUID}/alerts/{alertUUID}/acknowledge" : {
      "post" : {
        "description" : "",
        "operationId" : "acknowledge",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "alertUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Alert"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Acknowledge an alert",
        "tags" : [ "Alerts" ]
      }
    },
    "/api/v1/customers/{cUUID}/backups" : {
      "delete" : {
        "description" : "",
        "operationId" : "deleteBackups",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPTasks"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Delete backups",
        "tags" : [ "Backups" ]
      },
      "post" : {
        "description" : "",
        "operationId" : "createbackup",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "Backup data to be created",
          "in" : "body",
          "name" : "Backup",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/BackupRequestParams"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPTask"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Create a backup",
        "tags" : [ "Backups" ]
      }
    },
    "/api/v1/customers/{cUUID}/backups/delete" : {
      "post" : {
        "description" : "",
        "operationId" : "deleteBackupsv2",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPTasks"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Delete backups V2",
        "tags" : [ "Backups" ]
      }
    },
    "/api/v1/customers/{cUUID}/backups/page" : {
      "post" : {
        "description" : "",
        "operationId" : "listBackupsV2",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "PageBackupsRequest",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/BackupPagedApiQuery"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/BackupPagedApiResponse"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "List Backups (paginated) V2",
        "tags" : [ "Backups" ]
      }
    },
    "/api/v1/customers/{cUUID}/backups/{backupUUID}" : {
      "get" : {
        "description" : "",
        "operationId" : "getBackupV2",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "backupUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Backup"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Get Backup V2",
        "tags" : [ "Backups" ]
      },
      "put" : {
        "description" : "Edit a backup",
        "operationId" : "editBackupV2",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "backupUUID",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "Parameters of the backup to be edited",
          "in" : "body",
          "name" : "backup",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/EditBackupParams"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Backup"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Edit a backup V2",
        "tags" : [ "Backups" ]
      }
    },
    "/api/v1/customers/{cUUID}/backups/{backupUUID}/stop" : {
      "post" : {
        "description" : "Stop an in-progress backup",
        "operationId" : "stopBackup",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "backupUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPSuccess"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Stop a backup",
        "tags" : [ "Backups" ]
      }
    },
    "/api/v1/customers/{cUUID}/certificates" : {
      "get" : {
        "description" : "",
        "operationId" : "getListOfCertificate",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "items" : {
                "$ref" : "#/definitions/CertificateInfo"
              },
              "type" : "array"
            }
          },
          "500" : {
            "description" : "If there was a server or database issue when listing the regions",
            "schema" : {
              "$ref" : "#/definitions/YBPError"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "List a customer's certificates",
        "tags" : [ "Certificate Info" ]
      },
      "post" : {
        "description" : "",
        "operationId" : "upload",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "certificate params of the backup to be restored",
          "in" : "body",
          "name" : "certificate",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CertificateParams"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "format" : "uuid",
              "type" : "string"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Restore a certificate from backup",
        "tags" : [ "Certificate Info" ]
      }
    },
    "/api/v1/customers/{cUUID}/certificates/create_self_signed_cert" : {
      "post" : {
        "description" : "",
        "operationId" : "createSelfSignedCert",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "certificate label",
          "in" : "body",
          "name" : "label",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "format" : "uuid",
              "type" : "string"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Create a self signed certificate",
        "tags" : [ "Certificate Info" ]
      }
    },
    "/api/v1/customers/{cUUID}/certificates/{name}" : {
      "get" : {
        "description" : "",
        "operationId" : "getCertificate",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "path",
          "name" : "name",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "format" : "uuid",
              "type" : "string"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Get a certificate's UUID",
        "tags" : [ "Certificate Info" ]
      }
    },
    "/api/v1/customers/{cUUID}/certificates/{rUUID}" : {
      "delete" : {
        "description" : "",
        "operationId" : "deleteCertificate",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "rUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPSuccess"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Delete a certificate",
        "tags" : [ "Certificate Info" ]
      },
      "post" : {
        "description" : "",
        "operationId" : "getClientCert",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "rUUID",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "post certificate info",
          "in" : "body",
          "name" : "certificate",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ClientCertParams"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CertificateDetails"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Add a client certificate",
        "tags" : [ "Certificate Info" ]
      }
    },
    "/api/v1/customers/{cUUID}/certificates/{rUUID}/download" : {
      "get" : {
        "description" : "",
        "operationId" : "getRootCert",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "rUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Get a customer's root certificate",
        "tags" : [ "Certificate Info" ]
      }
    },
    "/api/v1/customers/{cUUID}/certificates/{rUUID}/edit" : {
      "post" : {
        "description" : "",
        "operationId" : "editCertificate",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "rUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPSuccess"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Edit TLS certificate config details",
        "tags" : [ "Certificate Info" ]
      }
    },
    "/api/v1/customers/{cUUID}/certificates/{rUUID}/update_empty_cert" : {
      "post" : {
        "description" : "",
        "operationId" : "updateEmptyCustomCert",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "rUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CertificateInfo"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Update an empty certificate",
        "tags" : [ "Certificate Info" ]
      }
    },
    "/api/v1/customers/{cUUID}/configs" : {
      "get" : {
        "description" : "",
        "operationId" : "getListOfCustomerConfig",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "items" : {
                "$ref" : "#/definitions/CustomerConfigUI"
              },
              "type" : "array"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "List all customer configurations",
        "tags" : [ "Customer Configuration" ]
      },
      "post" : {
        "description" : "",
        "operationId" : "createCustomerConfig",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "Configuration data to be created",
          "in" : "body",
          "name" : "Config",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CustomerConfig"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CustomerConfig"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Create a customer configuration",
        "tags" : [ "Customer Configuration" ]
      }
    },
    "/api/v1/customers/{cUUID}/configs/{configUUID}" : {
      "delete" : {
        "description" : "",
        "operationId" : "deleteCustomerConfig",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "configUUID",
          "required" : true,
          "type" : "string"
        }, {
          "default" : false,
          "in" : "query",
          "name" : "isDeleteBackups",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPTask"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Delete a customer configuration",
        "tags" : [ "Customer Configuration" ]
      },
      "put" : {
        "description" : "",
        "operationId" : "editCustomerConfig",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "configUUID",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "Configuration data to be updated",
          "in" : "body",
          "name" : "Config",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CustomerConfig"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CustomerConfig"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Update a customer configuration",
        "tags" : [ "Customer Configuration" ]
      }
    },
    "/api/v1/customers/{cUUID}/configs/{configUUID}/delete" : {
      "delete" : {
        "description" : "",
        "operationId" : "deleteCustomerConfigV2",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "configUUID",
          "required" : true,
          "type" : "string"
        }, {
          "default" : false,
          "in" : "query",
          "name" : "isDeleteBackups",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPTask"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Delete a customer configuration V2",
        "tags" : [ "Customer Configuration" ]
      }
    },
    "/api/v1/customers/{cUUID}/configs/{configUUID}/edit" : {
      "put" : {
        "description" : "",
        "operationId" : "editCustomerConfig",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "configUUID",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "Configuration data to be updated",
          "in" : "body",
          "name" : "Config",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CustomerConfig"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CustomerConfig"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Update a customer configuration V2",
        "tags" : [ "Customer Configuration" ]
      }
    },
    "/api/v1/customers/{cUUID}/cost" : {
      "get" : {
        "description" : "",
        "operationId" : "getUniverseCostForAll",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "items" : {
                "$ref" : "#/definitions/UniverseResourceDetails"
              },
              "type" : "array"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Get a cost estimate for all universes",
        "tags" : [ "Universe information" ]
      }
    },
    "/api/v1/customers/{cUUID}/create_backup_schedule" : {
      "post" : {
        "description" : "",
        "operationId" : "createbackupSchedule",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "Parameters of the backup to be restored",
          "in" : "body",
          "name" : "backup",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/BackupRequestParams"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Schedule"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Create Backup Schedule",
        "tags" : [ "Backups" ]
      }
    },
    "/api/v1/customers/{cUUID}/host_info" : {
      "get" : {
        "description" : "",
        "operationId" : "getHostInfo",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "additionalProperties" : {
                "type" : "object"
              },
              "type" : "object"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Get a customer's host info",
        "tags" : [ "Customer management" ]
      }
    },
    "/api/v1/customers/{cUUID}/kms_configs" : {
      "get" : {
        "description" : "",
        "operationId" : "listKMSConfigs",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "items" : {
                "type" : "object"
              },
              "type" : "array"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "List KMS configurations",
        "tags" : [ "Encryption at rest" ]
      }
    },
    "/api/v1/customers/{cUUID}/kms_configs/{configUUID}" : {
      "delete" : {
        "description" : "",
        "operationId" : "deleteKMSConfig",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "configUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPTask"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Delete a KMS configuration",
        "tags" : [ "Encryption at rest" ]
      },
      "get" : {
        "description" : "",
        "operationId" : "getKMSConfig",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "configUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "additionalProperties" : {
                "type" : "object"
              },
              "type" : "object"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Get details of a KMS configuration",
        "tags" : [ "Encryption at rest" ]
      }
    },
    "/api/v1/customers/{cUUID}/kms_configs/{configUUID}/edit" : {
      "post" : {
        "description" : "",
        "operationId" : "editKMSConfig",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "configUUID",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "KMS config to be edited",
          "in" : "body",
          "name" : "KMS config",
          "required" : true,
          "schema" : {
            "type" : "object"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPTask"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Edit a KMS configuration",
        "tags" : [ "Encryption at rest" ]
      }
    },
    "/api/v1/customers/{cUUID}/kms_configs/{kmsProvider}" : {
      "post" : {
        "description" : "",
        "operationId" : "createKMSConfig",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "path",
          "name" : "kmsProvider",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "KMS config to be created",
          "in" : "body",
          "name" : "KMS config",
          "required" : true,
          "schema" : {
            "type" : "object"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPTask"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Create a KMS configuration",
        "tags" : [ "Encryption at rest" ]
      }
    },
    "/api/v1/customers/{cUUID}/maintenance_windows" : {
      "post" : {
        "description" : "",
        "operationId" : "create",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "CreateMaintenanceWindowRequest",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/MaintenanceWindow"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/MaintenanceWindow"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Create maintenance window",
        "tags" : [ "Maintenance windows" ]
      }
    },
    "/api/v1/customers/{cUUID}/maintenance_windows/list" : {
      "post" : {
        "description" : "",
        "operationId" : "listOfMaintenanceWindows",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "items" : {
                "$ref" : "#/definitions/MaintenanceWindow"
              },
              "type" : "array"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "List maintenance windows",
        "tags" : [ "Maintenance windows" ]
      }
    },
    "/api/v1/customers/{cUUID}/maintenance_windows/page" : {
      "post" : {
        "description" : "",
        "operationId" : "page",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "PageMaintenanceWindowsRequest",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/MaintenanceWindowPagedApiQuery"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/MaintenanceWindowPagedResponse"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "List maintenance windows (paginated)",
        "tags" : [ "Maintenance windows" ]
      }
    },
    "/api/v1/customers/{cUUID}/maintenance_windows/{windowUUID}" : {
      "delete" : {
        "description" : "",
        "operationId" : "delete",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "windowUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPSuccess"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Delete maintenance window",
        "tags" : [ "Maintenance windows" ]
      },
      "get" : {
        "description" : "",
        "operationId" : "get",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "windowUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/MaintenanceWindow"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Get details of a maintenance window",
        "tags" : [ "Maintenance windows" ]
      },
      "put" : {
        "description" : "",
        "operationId" : "update",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "windowUUID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "UpdateMaintenanceWindowRequest",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/MaintenanceWindow"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/MaintenanceWindow"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Update maintenance window",
        "tags" : [ "Maintenance windows" ]
      }
    },
    "/api/v1/customers/{cUUID}/metrics" : {
      "post" : {
        "description" : "",
        "operationId" : "metrics",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "Metrics to be added",
          "in" : "body",
          "name" : "Metrics",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/MetricQueryParams"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "additionalProperties" : {
                "type" : "object"
              },
              "type" : "object"
            }
          },
          "400" : {
            "description" : "When request fails validations.",
            "schema" : {
              "$ref" : "#/definitions/YBPError"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Add metrics to a customer",
        "tags" : [ "Customer management" ]
      }
    },
    "/api/v1/customers/{cUUID}/nodes/{nodeUUID}/list" : {
      "get" : {
        "description" : "",
        "operationId" : "getNodeInstance",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "nodeUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/NodeInstance"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Get a node instance",
        "tags" : [ "Node instances" ]
      }
    },
    "/api/v1/customers/{cUUID}/providers" : {
      "get" : {
        "description" : "",
        "operationId" : "getListOfProviders",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "default" : "null",
          "in" : "query",
          "name" : "name",
          "required" : false,
          "type" : "string"
        }, {
          "default" : "null",
          "in" : "query",
          "name" : "providerCode",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "items" : {
                "$ref" : "#/definitions/Provider"
              },
              "type" : "array"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "List cloud providers",
        "tags" : [ "Cloud providers" ]
      },
      "post" : {
        "description" : "",
        "operationId" : "createProviders",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "CreateProviderRequest",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Provider"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPTask"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Create a provider",
        "tags" : [ "Cloud providers" ]
      }
    },
    "/api/v1/customers/{cUUID}/providers/{pUUID}/access_keys" : {
      "get" : {
        "description" : "",
        "operationId" : "list",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "pUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "items" : {
                "$ref" : "#/definitions/AccessKey"
              },
              "type" : "array"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "List access keys for a specific provider",
        "tags" : [ "Access Keys" ]
      },
      "post" : {
        "description" : "",
        "operationId" : "create_accesskey",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "pUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AccessKey"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Create an access key",
        "tags" : [ "Access Keys" ]
      }
    },
    "/api/v1/customers/{cUUID}/providers/{pUUID}/access_keys/{keyCode}" : {
      "delete" : {
        "description" : "",
        "operationId" : "delete_accesskey",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "pUUID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "path",
          "name" : "keyCode",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPSuccess"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Delete an access key",
        "tags" : [ "Access Keys" ]
      },
      "get" : {
        "description" : "",
        "operationId" : "index",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "pUUID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "path",
          "name" : "keyCode",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AccessKey"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Get an access key",
        "tags" : [ "Access Keys" ]
      }
    },
    "/api/v1/customers/{cUUID}/providers/{pUUID}/edit" : {
      "put" : {
        "description" : "",
        "operationId" : "editProvider",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "pUUID",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "edit provider form data",
          "in" : "body",
          "name" : "EditProviderRequest",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Provider"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPTask"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Update a provider",
        "tags" : [ "Cloud providers" ]
      }
    },
    "/api/v1/customers/{cUUID}/providers/{pUUID}/instance_types" : {
      "get" : {
        "description" : "",
        "operationId" : "listOfInstanceType",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "pUUID",
          "required" : true,
          "type" : "string"
        }, {
          "collectionFormat" : "multi",
          "default" : "java.util.Collections.emptyList()",
          "in" : "query",
          "items" : {
            "type" : "string"
          },
          "name" : "zone",
          "required" : false,
          "type" : "array"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "items" : {
                "$ref" : "#/definitions/InstanceType"
              },
              "type" : "array"
            }
          },
          "500" : {
            "description" : "If there was a server or database issue when listing the instance types",
            "schema" : {
              "$ref" : "#/definitions/YBPError"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "List a provider's instance types",
        "tags" : [ "Instance types" ]
      },
      "post" : {
        "description" : "",
        "operationId" : "createInstanceType",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "pUUID",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "Instance type data of the instance to be stored",
          "in" : "body",
          "name" : "Instance type",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/InstanceType"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/InstanceType"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Create an instance type",
        "tags" : [ "Instance types" ]
      }
    },
    "/api/v1/customers/{cUUID}/providers/{pUUID}/instance_types/{code}" : {
      "delete" : {
        "description" : "",
        "operationId" : "deleteInstanceType",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "pUUID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "path",
          "name" : "code",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPSuccess"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Delete an instance type",
        "tags" : [ "Instance types" ]
      },
      "get" : {
        "description" : "",
        "operationId" : "instanceTypeDetail",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "pUUID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "path",
          "name" : "code",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/InstanceType"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Get details of an instance type",
        "tags" : [ "Instance types" ]
      }
    },
    "/api/v1/customers/{cUUID}/providers/{pUUID}/instances/{instanceIP}" : {
      "delete" : {
        "description" : "",
        "operationId" : "deleteInstance",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "pUUID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "path",
          "name" : "instanceIP",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPSuccess"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Delete a node instance",
        "tags" : [ "Node instances" ]
      },
      "post" : {
        "description" : "",
        "operationId" : "detachedNodeAction",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "pUUID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "path",
          "name" : "instanceIP",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPTask"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Detached node action",
        "tags" : [ "Node instances" ]
      }
    },
    "/api/v1/customers/{cUUID}/providers/{pUUID}/nodes/list" : {
      "get" : {
        "description" : "",
        "operationId" : "listByProvider",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "pUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "items" : {
                "$ref" : "#/definitions/NodeInstance"
              },
              "type" : "array"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "List all of a provider's node instances",
        "tags" : [ "Node instances" ]
      }
    },
    "/api/v1/customers/{cUUID}/providers/{pUUID}/refresh_pricing" : {
      "put" : {
        "description" : "Refresh provider pricing info",
        "operationId" : "refreshPricing",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "pUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPSuccess"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Refresh pricing",
        "tags" : [ "Cloud providers" ]
      }
    },
    "/api/v1/customers/{cUUID}/providers/{pUUID}/regions" : {
      "get" : {
        "description" : "",
        "operationId" : "getRegion",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "pUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "items" : {
                "$ref" : "#/definitions/Region"
              },
              "type" : "array"
            }
          },
          "500" : {
            "description" : "If there was a server or database issue when listing the regions",
            "schema" : {
              "$ref" : "#/definitions/YBPError"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "List a provider's regions",
        "tags" : [ "Region management" ]
      },
      "post" : {
        "description" : "",
        "operationId" : "createRegion",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "pUUID",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "region form data for new region to be created",
          "in" : "body",
          "name" : "region",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RegionFormData"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Region"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Create a new region",
        "tags" : [ "Region management" ]
      }
    },
    "/api/v1/customers/{cUUID}/providers/{pUUID}/regions/{rUUID}" : {
      "delete" : {
        "description" : "",
        "operationId" : "deleteRegion",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "pUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "rUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Delete a region",
        "tags" : [ "Region management" ]
      }
    },
    "/api/v1/customers/{cUUID}/providers/{pUUID}/regions/{rUUID}/zones" : {
      "get" : {
        "description" : "",
        "operationId" : "listOfAZ",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "pUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "rUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "items" : {
                "$ref" : "#/definitions/AvailabilityZone"
              },
              "type" : "array"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "List availability zones",
        "tags" : [ "Availability Zones" ]
      },
      "post" : {
        "description" : "",
        "operationId" : "createAZ",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "pUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "rUUID",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "Availability zone form data",
          "in" : "body",
          "name" : "azFormData",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AvailabilityZoneFormData"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "additionalProperties" : {
                "$ref" : "#/definitions/AvailabilityZone"
              },
              "type" : "object"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Create an availability zone",
        "tags" : [ "Availability Zones" ]
      }
    },
    "/api/v1/customers/{cUUID}/providers/{pUUID}/regions/{rUUID}/zones/{azUUID}" : {
      "delete" : {
        "description" : "",
        "operationId" : "deleteAZ",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "pUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "rUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "azUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPSuccess"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Delete an availability zone",
        "tags" : [ "Availability Zones" ]
      }
    },
    "/api/v1/customers/{cUUID}/providers/{pUUID}/releases" : {
      "get" : {
        "description" : "",
        "operationId" : "getListOfRegionReleases",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "pUUID",
          "required" : true,
          "type" : "string"
        }, {
          "default" : false,
          "in" : "query",
          "name" : "includeMetadata",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "additionalProperties" : {
                "type" : "object"
              },
              "type" : "object"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "List all releases valid in region",
        "tags" : [ "Release management" ]
      }
    },
    "/api/v1/customers/{cUUID}/regions" : {
      "get" : {
        "description" : "",
        "operationId" : "listAllRegions",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "items" : {
                "$ref" : "#/definitions/Region"
              },
              "type" : "array"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "List regions for all providers",
        "tags" : [ "Region management" ]
      }
    },
    "/api/v1/customers/{cUUID}/releases" : {
      "get" : {
        "description" : "",
        "operationId" : "getListOfReleases",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "default" : false,
          "in" : "query",
          "name" : "includeMetadata",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "additionalProperties" : {
                "type" : "object"
              },
              "type" : "object"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "List all releases",
        "tags" : [ "Release management" ]
      },
      "post" : {
        "description" : "",
        "operationId" : "createRelease",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "Release data for remote downloading to be created",
          "in" : "body",
          "name" : "Release",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ReleaseFormData"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPSuccess"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Create a release",
        "tags" : [ "Release management" ]
      },
      "put" : {
        "description" : "",
        "operationId" : "refresh",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPSuccess"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Refresh a release",
        "tags" : [ "Release management" ]
      }
    },
    "/api/v1/customers/{cUUID}/releases/{name}" : {
      "delete" : {
        "description" : "",
        "operationId" : "deleteRelease",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "path",
          "name" : "name",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ReleaseMetadata"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Delete a release",
        "tags" : [ "Release management" ]
      },
      "put" : {
        "description" : "",
        "operationId" : "updateRelease",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "path",
          "name" : "name",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "Release data to be updated",
          "in" : "body",
          "name" : "Release",
          "required" : true,
          "schema" : {
            "type" : "object"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ReleaseMetadata"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Update a release",
        "tags" : [ "Release management" ]
      }
    },
    "/api/v1/customers/{cUUID}/restore" : {
      "post" : {
        "description" : "",
        "operationId" : "restoreBackupV2",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "Parameters of the backup to be restored",
          "in" : "body",
          "name" : "backup",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RestoreBackupParams"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPTask"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Restore from a backup V2",
        "tags" : [ "Backups" ]
      }
    },
    "/api/v1/customers/{cUUID}/runtime_config/scopes" : {
      "get" : {
        "description" : "Lists all (including empty scopes) runtime config scopes for current customer. List includes the Global scope that spans multiple customers, scope for customer specific overrides for current customer and one scope each for each universe and provider.",
        "operationId" : "listScopes",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RuntimeConfigData"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "List configuration scopes",
        "tags" : [ "Runtime configuration" ]
      }
    },
    "/api/v1/customers/{cUUID}/runtime_config/{scope}" : {
      "get" : {
        "description" : "Lists all runtime config entries for a given scope for current customer.",
        "operationId" : "getConfig",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "scope",
          "required" : true,
          "type" : "string"
        }, {
          "default" : false,
          "in" : "query",
          "name" : "includeInherited",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RuntimeConfigData"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "List configuration entries for a scope",
        "tags" : [ "Runtime configuration" ]
      }
    },
    "/api/v1/customers/{cUUID}/runtime_config/{scope}/key/{key}" : {
      "delete" : {
        "description" : "",
        "operationId" : "deleteKey",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "scope",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "path",
          "name" : "key",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPSuccess"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Delete a configuration key",
        "tags" : [ "Runtime configuration" ]
      },
      "get" : {
        "description" : "",
        "operationId" : "getConfigurationKey",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "scope",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "path",
          "name" : "key",
          "required" : true,
          "type" : "string"
        } ],
        "produces" : [ "text/plain" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "string"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Get a configuration key",
        "tags" : [ "Runtime configuration" ]
      },
      "put" : {
        "consumes" : [ "text/plain" ],
        "description" : "",
        "operationId" : "setKey",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "scope",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "path",
          "name" : "key",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "New value for config key",
          "in" : "body",
          "name" : "newValue",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPSuccess"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Update a configuration key",
        "tags" : [ "Runtime configuration" ]
      }
    },
    "/api/v1/customers/{cUUID}/schedules" : {
      "get" : {
        "description" : "",
        "operationId" : "listSchedules",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "items" : {
                "$ref" : "#/definitions/Schedule"
              },
              "type" : "array"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "List schedules",
        "tags" : [ "Schedule management" ]
      }
    },
    "/api/v1/customers/{cUUID}/schedules/page" : {
      "post" : {
        "description" : "",
        "operationId" : "listSchedulesV2",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "PageScheduleRequest",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SchedulePagedApiQuery"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SchedulePagedResponse"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "List schedules V2",
        "tags" : [ "Schedule management" ]
      }
    },
    "/api/v1/customers/{cUUID}/schedules/{sUUID}" : {
      "delete" : {
        "description" : "",
        "operationId" : "deleteSchedule",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "sUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPSuccess"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Delete a schedule",
        "tags" : [ "Schedule management" ]
      },
      "get" : {
        "description" : "",
        "operationId" : "getSchedule",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "sUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Schedule"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Get Schedule",
        "tags" : [ "Schedule management" ]
      },
      "put" : {
        "description" : "",
        "operationId" : "editBackupScheduleV2",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "sUUID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/EditBackupScheduleParams"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Schedule"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Edit a backup schedule V2",
        "tags" : [ "Schedule management" ]
      }
    },
    "/api/v1/customers/{cUUID}/schedules/{sUUID}/delete" : {
      "delete" : {
        "description" : "",
        "operationId" : "deleteScheduleV2",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "sUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPSuccess"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Delete a schedule V2",
        "tags" : [ "Schedule management" ]
      }
    },
    "/api/v1/customers/{cUUID}/tasks/{tUUID}" : {
      "get" : {
        "description" : "",
        "operationId" : "taskStatus",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "tUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Get a task's status",
        "tags" : [ "Customer Tasks" ]
      }
    },
    "/api/v1/customers/{cUUID}/tasks/{tUUID}/abort" : {
      "post" : {
        "description" : "Aborts a running task",
        "operationId" : "abortTask",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "tUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPSuccess"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Abort a task",
        "tags" : [ "Customer Tasks" ]
      }
    },
    "/api/v1/customers/{cUUID}/tasks/{tUUID}/audit_info" : {
      "get" : {
        "description" : "",
        "operationId" : "getTaskAudit",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "tUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Audit"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Get audit info for a task",
        "tags" : [ "Audit" ]
      }
    },
    "/api/v1/customers/{cUUID}/tasks/{tUUID}/audit_user" : {
      "get" : {
        "description" : "",
        "operationId" : "getUserFromTask",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "tUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Audit"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Get the user associated with a task",
        "tags" : [ "Audit" ]
      }
    },
    "/api/v1/customers/{cUUID}/tasks/{tUUID}/failed" : {
      "get" : {
        "description" : "",
        "operationId" : "failedSubtasks",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "tUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "additionalProperties" : {
                "type" : "object"
              },
              "type" : "object"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Get a task's failed subtasks",
        "tags" : [ "Customer Tasks" ]
      }
    },
    "/api/v1/customers/{cUUID}/tasks/{tUUID}/retry" : {
      "post" : {
        "description" : "Retry a Universe task.",
        "operationId" : "retryTask",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "tUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/UniverseResp"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Retry a Universe task",
        "tags" : [ "Customer Tasks" ]
      }
    },
    "/api/v1/customers/{cUUID}/tasks_list" : {
      "get" : {
        "description" : "",
        "operationId" : "tasksList",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "default" : "null",
          "format" : "uuid",
          "in" : "query",
          "name" : "uUUID",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "items" : {
                "$ref" : "#/definitions/CustomerTaskData"
              },
              "type" : "array"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "List task",
        "tags" : [ "Customer Tasks" ]
      }
    },
    "/api/v1/customers/{cUUID}/universes" : {
      "get" : {
        "description" : "",
        "operationId" : "listUniverses",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "default" : "null",
          "in" : "query",
          "name" : "name",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "items" : {
                "$ref" : "#/definitions/UniverseResp"
              },
              "type" : "array"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "List universes",
        "tags" : [ "Universe management" ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/clusters" : {
      "post" : {
        "description" : "This will configure and create universe with (optionally) multiple clusters. Just fill in the userIntent for PRIMARY and (optionally) an ASYNC cluster",
        "operationId" : "createAllClusters",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "UniverseConfigureTaskParams",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/UniverseConfigureTaskParams"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPTask"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Create Universe Clusters",
        "tags" : [ "UniverseClusterMutations" ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/import" : {
      "post" : {
        "description" : "",
        "operationId" : "importUniverse",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ImportUniverseFormData"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Import a universe",
        "tags" : [ "Universe actions" ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}" : {
      "delete" : {
        "description" : "",
        "operationId" : "deleteUniverse",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        }, {
          "default" : false,
          "in" : "query",
          "name" : "isForceDelete",
          "required" : false,
          "type" : "boolean"
        }, {
          "default" : false,
          "in" : "query",
          "name" : "isDeleteBackups",
          "required" : false,
          "type" : "boolean"
        }, {
          "default" : false,
          "in" : "query",
          "name" : "isDeleteAssociatedCerts",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPTask"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Delete a universe",
        "tags" : [ "Universe management" ]
      },
      "get" : {
        "description" : "",
        "operationId" : "getUniverse",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/UniverseResp"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Get a universe",
        "tags" : [ "Universe management" ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/backups" : {
      "get" : {
        "description" : "",
        "operationId" : "ListOfBackups",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "items" : {
                "$ref" : "#/definitions/Backup"
              },
              "type" : "array"
            }
          },
          "500" : {
            "description" : "If there was a server or database issue when listing the backups",
            "schema" : {
              "$ref" : "#/definitions/YBPError"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "List a customer's backups",
        "tags" : [ "Backups" ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/backups/restore" : {
      "post" : {
        "description" : "",
        "operationId" : "restore",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "Parameters of the backup to be restored",
          "in" : "body",
          "name" : "backup",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/BackupTableParams"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPTask"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Restore from a backup",
        "tags" : [ "Backups" ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/backups/tasks/{tUUID}" : {
      "get" : {
        "description" : "",
        "operationId" : "fetchBackupsByTaskUUID",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "tUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "items" : {
                "$ref" : "#/definitions/Backup"
              },
              "type" : "array"
            }
          },
          "500" : {
            "description" : "If there was a server or database issue when listing the backups",
            "schema" : {
              "$ref" : "#/definitions/YBPError"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "List a task's backups",
        "tags" : [ "Backups" ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/clusters/primary" : {
      "put" : {
        "description" : "This will update primary cluster of existing universe.Use API to GET current universe. Lookup universeDetails attribute of the universe resource returned. Update the necessary field (e.g. numNodes) Use this updated universeDetails as request body. See https://github.com/yugabyte/yugabyte-db/blob/master/managed/api-examples/python-simple/edit-universe.ipynb",
        "operationId" : "updatePrimaryCluster",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "UniverseConfigureTaskParams",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/UniverseConfigureTaskParams"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPTask"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Update Primary Cluster",
        "tags" : [ "UniverseClusterMutations" ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/clusters/read_only" : {
      "post" : {
        "description" : "This will add a readonly cluster to existing universe. Just fill in the userIntent for ASYNC cluster.",
        "operationId" : "createReadOnlyCluster",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "UniverseConfigureTaskParams",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/UniverseDefinitionTaskParams"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPTask"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Create ReadOnly Cluster",
        "tags" : [ "UniverseClusterMutations" ]
      },
      "put" : {
        "description" : "This will update readonly cluster of existing universe.Use API to GET current universe. Lookup universeDetails attribute of the universe resource returned. Update the necessary field (e.g. numNodes) Use this updated universeDetails as request body. See https://github.com/yugabyte/yugabyte-db/blob/master/managed/api-examples/python-simple/edit-universe.ipynb",
        "operationId" : "updateReadOnlyCluster",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "UniverseConfigureTaskParams",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/UniverseConfigureTaskParams"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPTask"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Update Readonly Cluster",
        "tags" : [ "UniverseClusterMutations" ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/clusters/read_only/{clustUUID}" : {
      "delete" : {
        "description" : "This will delete readonly cluster of existing universe.",
        "operationId" : "deleteReadonlyCluster",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "clustUUID",
          "required" : true,
          "type" : "string"
        }, {
          "default" : false,
          "in" : "query",
          "name" : "isForceDelete",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPTask"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Delete Readonly Cluster",
        "tags" : [ "UniverseClusterMutations" ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/config_alerts" : {
      "post" : {
        "description" : "",
        "operationId" : "configureUniverseAlerts",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPSuccess"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Configure alerts for a universe",
        "tags" : [ "Universe management" ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/cost" : {
      "get" : {
        "description" : "",
        "operationId" : "getUniverseCost",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/UniverseResourceDetails"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Get a cost estimate for a universe",
        "tags" : [ "Universe information" ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/create_db_credentials" : {
      "post" : {
        "description" : "",
        "operationId" : "createUserInDB",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPSuccess"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Create a database user for a universe",
        "tags" : [ "Universe database management" ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/health_check" : {
      "get" : {
        "description" : "Checks the health of all tablet servers and masters in the universe, as well as certain conditions on the machines themselves, including disk utilization, presence of FATAL or core files, and more.",
        "operationId" : "healthCheckUniverse",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Run a universe health check",
        "tags" : [ "Universe information" ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/kms" : {
      "delete" : {
        "description" : "",
        "operationId" : "removeKeyRefHistory",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPSuccess"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Remove a universe's key reference history",
        "tags" : [ "Encryption at rest" ]
      },
      "get" : {
        "description" : "",
        "operationId" : "getKeyRefHistory",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "items" : {
                "type" : "object"
              },
              "type" : "array"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Get a universe's key reference history",
        "tags" : [ "Encryption at rest" ]
      },
      "post" : {
        "description" : "",
        "operationId" : "retrieveKey",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "additionalProperties" : {
                "type" : "object"
              },
              "type" : "object"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Retrive a universe's KMS key",
        "tags" : [ "Encryption at rest" ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/kms/key_ref" : {
      "get" : {
        "description" : "",
        "operationId" : "getCurrentKeyRef",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "additionalProperties" : {
                "type" : "object"
              },
              "type" : "object"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Get a universe's key reference",
        "tags" : [ "Encryption at rest" ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/leader" : {
      "get" : {
        "description" : "",
        "operationId" : "getMasterLeaderIP",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Get IP address of a universe's master leader",
        "tags" : [ "Universe information" ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/live_queries" : {
      "get" : {
        "description" : "",
        "operationId" : "getLiveQueries",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Get live queries for a universe",
        "tags" : [ "Universe information" ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/mark_helm3_compatible" : {
      "put" : {
        "description" : "",
        "operationId" : "setUniverseHelm3Compatible",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPSuccess"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Flag a universe as Helm 3-compatible",
        "tags" : [ "Universe management" ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/masters" : {
      "get" : {
        "description" : "",
        "operationId" : "getMasterAddresses",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "string"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "List a master node's addresses",
        "tags" : [ "Universe node metadata (metamaster)" ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/multi_table_backup" : {
      "put" : {
        "description" : "",
        "operationId" : "createMultiTableBackup",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "Table backup data to be created",
          "in" : "body",
          "name" : "Table backup",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/MultiTableBackupRequestParams"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "If requested schedule backup.",
            "schema" : {
              "$ref" : "#/definitions/Schedule"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Create a multi-table backup",
        "tags" : [ "Backups", "Table management" ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/pause" : {
      "post" : {
        "description" : "",
        "operationId" : "pauseUniverse",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPTask"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Pause a universe",
        "tags" : [ "Universe management" ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/redisservers" : {
      "get" : {
        "description" : "",
        "operationId" : "getRedisServerAddresses",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "string"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "List a REDIS server's addresses",
        "tags" : [ "Universe node metadata (metamaster)" ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/resume" : {
      "post" : {
        "description" : "",
        "operationId" : "resumeUniverse",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPTask"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Resume a paused universe",
        "tags" : [ "Universe management" ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/run_in_shell" : {
      "post" : {
        "description" : "This operation is no longer supported, for security reasons.",
        "operationId" : "runInShell",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPError"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Run a shell command",
        "tags" : [ "Universe database management" ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/run_query" : {
      "post" : {
        "description" : "Runs a YSQL query. Only valid when the platform is running in `OSS` mode.",
        "operationId" : "runYsqlQueryUniverse",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "RunQueryFormData",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RunQueryFormData"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Run a YSQL query in a universe",
        "tags" : [ "Universe database management" ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/set_key" : {
      "post" : {
        "description" : "",
        "operationId" : "setUniverseKey",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/UniverseResp"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Set a universe's key",
        "tags" : [ "Universe management" ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/setup_universe_2dc" : {
      "put" : {
        "description" : "",
        "operationId" : "resetUniverseVersion",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPSuccess"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Reset universe version",
        "tags" : [ "Universe management" ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/slow_queries" : {
      "delete" : {
        "description" : "",
        "operationId" : "resetSlowQueries",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Reset slow queries for a universe",
        "tags" : [ "Universe information" ]
      },
      "get" : {
        "description" : "",
        "operationId" : "getSlowQueries",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Get slow queries for a universe",
        "tags" : [ "Universe information" ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/status" : {
      "get" : {
        "description" : "This will return a Map of node name to its status in json format",
        "operationId" : "universeStatus",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "additionalProperties" : {
                "type" : "object"
              },
              "type" : "object"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Get a universe's status",
        "tags" : [ "Universe information" ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/support_bundle" : {
      "get" : {
        "description" : "",
        "operationId" : "listSupportBundle",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "items" : {
                "$ref" : "#/definitions/SupportBundle"
              },
              "type" : "array"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "List all support bundles from a universe",
        "tags" : [ "Support Bundle management" ]
      },
      "post" : {
        "description" : "",
        "operationId" : "createSupportBundle",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPTask"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Create support bundle for specific universe",
        "tags" : [ "Support Bundle management" ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/support_bundle/{sbUUID}" : {
      "delete" : {
        "description" : "",
        "operationId" : "deleteSupportBundle",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "sbUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPSuccess"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Delete a support bundle",
        "tags" : [ "Support Bundle management" ]
      },
      "get" : {
        "description" : "",
        "operationId" : "getSupportBundle",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "sbUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SupportBundle"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Get a support bundle from a universe",
        "tags" : [ "Support Bundle management" ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/support_bundle/{sbUUID}/download" : {
      "get" : {
        "description" : "",
        "operationId" : "downloadSupportBundle",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "sbUUID",
          "required" : true,
          "type" : "string"
        } ],
        "produces" : [ "application/x-compressed" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SupportBundle"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Download support bundle",
        "tags" : [ "Support Bundle management" ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/tables" : {
      "get" : {
        "description" : "Get a list of all tables in the specified universe",
        "operationId" : "getAllTables",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        }, {
          "default" : false,
          "in" : "query",
          "name" : "includeParentTableInfo",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "items" : {
                "$ref" : "#/definitions/TableInfoResp"
              },
              "type" : "array"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "List all tables",
        "tags" : [ "Table management" ]
      },
      "post" : {
        "description" : "",
        "operationId" : "createTable",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "Table definition to be created",
          "in" : "body",
          "name" : "Table",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TableDefinitionTaskParams"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPTask"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Create a YugabyteDB table",
        "tags" : [ "Table management" ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/tables/{tableUUID}" : {
      "delete" : {
        "description" : "",
        "operationId" : "dropTable",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "tableUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPTask"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Drop a YugabyteDB table",
        "tags" : [ "Table management" ]
      },
      "get" : {
        "description" : "",
        "operationId" : "describeTable",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "tableUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/TableDefinitionTaskParams"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Describe a table",
        "tags" : [ "Table management" ]
      },
      "put" : {
        "description" : "",
        "operationId" : "alterTable",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "tableUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "additionalProperties" : {
                "type" : "object"
              },
              "type" : "object"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Alter a YugabyteDB table",
        "tags" : [ "Table management" ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/tables/{tableUUID}/bulk_import" : {
      "put" : {
        "description" : "Bulk import data into the specified table. This is currently AWS-only.",
        "operationId" : "bulkImportData",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "tableUUID",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "Bulk data to be imported",
          "in" : "body",
          "name" : "Bulk import",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/BulkImportParams"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPTask"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Bulk import data",
        "tags" : [ "Table management" ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/tables/{tableUUID}/create_backup" : {
      "put" : {
        "description" : "",
        "operationId" : "createSingleTableBackup",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "tableUUID",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "Backup data to be created",
          "in" : "body",
          "name" : "Backup",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/BackupTableParams"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPTask"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Create a single-table backup",
        "tags" : [ "Table management" ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/tablespaces" : {
      "get" : {
        "description" : "Get a list of all tablespaces of a given universe",
        "operationId" : "getAllTableSpaces",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "items" : {
                "$ref" : "#/definitions/TableSpaceInfo"
              },
              "type" : "array"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "List all tablespaces",
        "tags" : [ "Table management" ]
      },
      "post" : {
        "description" : "",
        "operationId" : "createTableSpaces",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "CreateTableSpacesRequest",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CreateTablespaceParams"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPTask"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Create tableSpaces",
        "tags" : [ "Table management" ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/tablet-servers" : {
      "get" : {
        "description" : "",
        "operationId" : "listTabletServers",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "additionalProperties" : {
                "type" : "object"
              },
              "type" : "object"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "List all tablet servers",
        "tags" : [ "Tablet server management" ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/toggle_tls" : {
      "post" : {
        "deprecated" : true,
        "description" : "Enable or disable node-to-node and client-to-node encryption. Supports rolling and non-rolling universe upgrades.",
        "operationId" : "toggleUniverseTLS",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/UniverseResp"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Toggle a universe's TLS state",
        "tags" : [ "Universe management" ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/trigger_health_check" : {
      "get" : {
        "description" : "Trigger a universe health check and return the trigger time.",
        "operationId" : "triggerHealthCheck",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/TriggerHealthCheckResult"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Trigger a universe health check",
        "tags" : [ "Universe information" ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/update_backup_state" : {
      "put" : {
        "description" : "",
        "operationId" : "setUniverseBackupFlag",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "query",
          "name" : "markActive",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPSuccess"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Set a universe's backup flag",
        "tags" : [ "Universe management", "Backups" ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/update_db_credentials" : {
      "post" : {
        "description" : "",
        "operationId" : "setDatabaseCredentials",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPSuccess"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Set a universe's database credentials",
        "tags" : [ "Universe database management" ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/upgrade/certs" : {
      "post" : {
        "description" : "Queues a task to perform certificate rotation and rolling restart in a universe.",
        "operationId" : "upgradeCerts",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "Certs Rotate Params",
          "in" : "body",
          "name" : "certs_rotate_params",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CertsRotateParams"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPTask"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Upgrade Certs",
        "tags" : [ "Universe Upgrades Management" ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/upgrade/gflags" : {
      "post" : {
        "description" : "Queues a task to perform gflags upgrade and rolling restart in a universe.",
        "operationId" : "upgradeGFlags",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "GFlags Upgrade Params",
          "in" : "body",
          "name" : "gflags_upgrade_params",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/GFlagsUpgradeParams"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPTask"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Upgrade GFlags",
        "tags" : [ "Universe Upgrades Management" ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/upgrade/resize_node" : {
      "post" : {
        "description" : "Queues a task to perform node resize and rolling restart in a universe.",
        "operationId" : "resizeNode",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "Resize Node Params",
          "in" : "body",
          "name" : "resize_node_params",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ResizeNodeParams"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPTask"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Resize Node",
        "tags" : [ "Universe Upgrades Management" ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/upgrade/restart" : {
      "post" : {
        "description" : "Queues a task to perform a rolling restart in a universe.",
        "operationId" : "restartUniverse",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "Upgrade Task Params",
          "in" : "body",
          "name" : "upgrade_task_params",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/UpgradeTaskParams"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPTask"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Restart Universe",
        "tags" : [ "Universe Upgrades Management" ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/upgrade/software" : {
      "post" : {
        "description" : "Queues a task to perform software upgrade and rolling restart in a universe.",
        "operationId" : "upgradeSoftware",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "Software Upgrade Params",
          "in" : "body",
          "name" : "software_upgrade_params",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SoftwareUpgradeParams"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPTask"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Upgrade Software",
        "tags" : [ "Universe Upgrades Management" ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/upgrade/systemd" : {
      "post" : {
        "description" : "Queues a task to perform systemd upgrade and rolling restart in a universe.",
        "operationId" : "upgradeSystemd",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "Systemd Upgrade Params",
          "in" : "body",
          "name" : "systemd_upgrade_params",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SystemdUpgradeParams"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPTask"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Upgrade Systemd",
        "tags" : [ "Universe Upgrades Management" ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/upgrade/thirdparty_software" : {
      "post" : {
        "description" : "Queues a task to perform upgrade third-party software in a universe.",
        "operationId" : "upgradeThirdpartySoftware",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "Thirdparty Software Upgrade Params",
          "in" : "body",
          "name" : "thirdparty_software_upgrade_params",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ThirdpartySoftwareUpgradeParams"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPTask"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Upgrade third-party software",
        "tags" : [ "Universe Upgrades Management" ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/upgrade/tls" : {
      "post" : {
        "description" : "Queues a task to perform TLS ugprade and rolling restart in a universe.",
        "operationId" : "upgradeTls",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "TLS Toggle Params",
          "in" : "body",
          "name" : "tls_toggle_params",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TlsToggleParams"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPTask"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Upgrade TLS",
        "tags" : [ "Universe Upgrades Management" ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/upgrade/vm" : {
      "post" : {
        "description" : "Queues a task to perform VM Image upgrade and rolling restart in a universe.",
        "operationId" : "upgradeVMImage",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "VM Image Upgrade Params",
          "in" : "body",
          "name" : "vmimage_upgrade_params",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/VMImageUpgradeParams"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPTask"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Upgrade VM Image",
        "tags" : [ "Universe Upgrades Management" ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/yqlservers" : {
      "get" : {
        "description" : "",
        "operationId" : "getYQLServerAddresses",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "string"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "List a YQL server's addresses",
        "tags" : [ "Universe node metadata (metamaster)" ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/ysqlservers" : {
      "get" : {
        "description" : "",
        "operationId" : "getYSQLServerAddresses",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "string"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "List a YSQL server's addresses",
        "tags" : [ "Universe node metadata (metamaster)" ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{uniUUID}/{nodeName}/download_logs" : {
      "get" : {
        "description" : "Downloads the log files from a given node.",
        "operationId" : "downloadNodeLogs",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uniUUID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "path",
          "name" : "nodeName",
          "required" : true,
          "type" : "string"
        } ],
        "produces" : [ "application/x-compressed" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "string"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Download a node's logs",
        "tags" : [ "Universe information" ]
      }
    },
    "/api/v1/customers/{cUUID}/universes/{universeUUID}/nodes/{nodeName}" : {
      "put" : {
        "description" : "",
        "operationId" : "nodeAction",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "universeUUID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "path",
          "name" : "nodeName",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "Node action data to be updated",
          "in" : "body",
          "name" : "Node action",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NodeActionFormData"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPTask"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Update a node",
        "tags" : [ "Node instances" ]
      }
    },
    "/api/v1/customers/{cUUID}/users" : {
      "get" : {
        "description" : "",
        "operationId" : "listUsers",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "items" : {
                "$ref" : "#/definitions/UserWithFeatures"
              },
              "type" : "array"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "List all users",
        "tags" : [ "User management" ]
      },
      "post" : {
        "description" : "",
        "operationId" : "createUser",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "Details of the new user",
          "in" : "body",
          "name" : "User",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/UserRegistrationData"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/UserWithFeatures"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Create a user",
        "tags" : [ "User management" ]
      }
    },
    "/api/v1/customers/{cUUID}/users/{uUUID}" : {
      "delete" : {
        "description" : "Deletes the specified user. Note that you can't delete a customer's primary user.",
        "operationId" : "deleteUser",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPSuccess"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Delete a user",
        "tags" : [ "User management" ]
      },
      "get" : {
        "description" : "",
        "operationId" : "getUserDetails",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/UserWithFeatures"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Get a user's details",
        "tags" : [ "User management" ]
      },
      "put" : {
        "description" : "",
        "operationId" : "updateUserRole",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uUUID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "query",
          "name" : "role",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPSuccess"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Change a user's role",
        "tags" : [ "User management" ]
      }
    },
    "/api/v1/customers/{cUUID}/users/{uUUID}/audit_trail" : {
      "get" : {
        "description" : "",
        "operationId" : "ListOfAudit",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "items" : {
                "$ref" : "#/definitions/Audit"
              },
              "type" : "array"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "List a user's audit entries",
        "tags" : [ "Audit" ]
      }
    },
    "/api/v1/customers/{cUUID}/users/{uUUID}/change_password" : {
      "put" : {
        "description" : "",
        "operationId" : "updateUserPassword",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uUUID",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "User data containing the new password",
          "in" : "body",
          "name" : "Users",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/UserRegistrationData"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPSuccess"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Change a user's password",
        "tags" : [ "User management" ]
      }
    },
    "/api/v1/customers/{cUUID}/users/{uUUID}/update_profile" : {
      "put" : {
        "description" : "",
        "operationId" : "UpdateUserProfile",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "uUUID",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "User data in profile to be updated",
          "in" : "body",
          "name" : "Users",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/UserProfileData"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Users"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Update a user's profile",
        "tags" : [ "User management" ]
      }
    },
    "/api/v1/customers/{cUUID}/xcluster_configs" : {
      "post" : {
        "description" : "",
        "operationId" : "createXClusterConfig",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "XCluster Replication Create Form Data",
          "in" : "body",
          "name" : "xcluster_replication_create_form_data",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/XClusterConfigCreateFormData"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPTask"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Create xcluster config",
        "tags" : [ "Asynchronous Replication" ]
      }
    },
    "/api/v1/customers/{cUUID}/xcluster_configs/sync" : {
      "post" : {
        "description" : "",
        "operationId" : "syncXClusterConfig",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "default" : "null",
          "format" : "uuid",
          "in" : "query",
          "name" : "targetUniverseUUID",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPTask"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Sync xcluster config",
        "tags" : [ "Asynchronous Replication" ]
      }
    },
    "/api/v1/customers/{cUUID}/xcluster_configs/{xccUUID}" : {
      "delete" : {
        "description" : "",
        "operationId" : "deleteXClusterConfig",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "xccUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPTask"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Delete xcluster config",
        "tags" : [ "Asynchronous Replication" ]
      },
      "get" : {
        "description" : "",
        "operationId" : "getXClusterConfig",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "xccUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/XClusterConfigGetResp"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Get xcluster config",
        "tags" : [ "Asynchronous Replication" ]
      },
      "put" : {
        "description" : "",
        "operationId" : "editXClusterConfig",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "xccUUID",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "XCluster Replication Edit Form Data",
          "in" : "body",
          "name" : "xcluster_replication_edit_form_data",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/XClusterConfigEditFormData"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YBPTask"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Edit xcluster config",
        "tags" : [ "Asynchronous Replication" ]
      }
    },
    "/api/v1/customers/{cUUID}/zones/{azUUID}/nodes" : {
      "post" : {
        "description" : "",
        "operationId" : "createNodeInstance",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "azUUID",
          "required" : true,
          "type" : "string"
        }, {
          "description" : "Node instance data to be created",
          "in" : "body",
          "name" : "Node instance",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NodeInstanceFormData"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "additionalProperties" : {
                "$ref" : "#/definitions/NodeInstance"
              },
              "type" : "object"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Create a node instance",
        "tags" : [ "Node instances" ]
      }
    },
    "/api/v1/customers/{cUUID}/zones/{azUUID}/nodes/list" : {
      "get" : {
        "description" : "",
        "operationId" : "listByZone",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "cUUID",
          "required" : true,
          "type" : "string"
        }, {
          "format" : "uuid",
          "in" : "path",
          "name" : "azUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "items" : {
                "$ref" : "#/definitions/NodeInstance"
              },
              "type" : "array"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "List all of a zone's node instances",
        "tags" : [ "Node instances" ]
      }
    },
    "/api/v1/grafana_dashboard" : {
      "get" : {
        "description" : "",
        "operationId" : "GrafanaDashboard",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "string"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Get Grafana Dashboard",
        "tags" : [ "Grafana Dashboard" ]
      }
    },
    "/api/v1/logging_config" : {
      "post" : {
        "description" : "",
        "operationId" : "setLoggingSettings",
        "parameters" : [ {
          "description" : "Logging config to be updated",
          "in" : "body",
          "name" : "Logging Config",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PlatformLoggingConfig"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PlatformLoggingConfig"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Set Logging Level",
        "tags" : [ "LoggingConfig" ]
      }
    },
    "/api/v1/logs" : {
      "get" : {
        "description" : "",
        "operationId" : "getFilteredLogs",
        "parameters" : [ {
          "default" : 10000,
          "format" : "int32",
          "in" : "query",
          "name" : "maxLines",
          "required" : false,
          "type" : "integer"
        }, {
          "default" : "null",
          "in" : "query",
          "name" : "universeName",
          "required" : false,
          "type" : "string"
        }, {
          "default" : "null",
          "in" : "query",
          "name" : "queryRegex",
          "required" : false,
          "type" : "string"
        } ],
        "produces" : [ "text/plain" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "string"
            }
          }
        },
        "summary" : "getFilteredLogs",
        "tags" : [ "Session management" ]
      }
    },
    "/api/v1/logs/{maxLines}" : {
      "get" : {
        "description" : "",
        "operationId" : "getLogs",
        "parameters" : [ {
          "format" : "int32",
          "in" : "path",
          "name" : "maxLines",
          "required" : true,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/LogData"
            }
          }
        },
        "summary" : "getLogs",
        "tags" : [ "Session management" ]
      }
    },
    "/api/v1/metadata/azu_types" : {
      "get" : {
        "description" : "",
        "operationId" : "getAZUTypes",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "items" : {
                "enum" : [ "IO1", "GP2", "GP3", "Scratch", "Persistent", "StandardSSD_LRS", "Premium_LRS", "UltraSSD_LRS" ],
                "type" : "string"
              },
              "type" : "array"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "List supported Azure disk types",
        "tags" : [ "Instance types" ]
      }
    },
    "/api/v1/metadata/ebs_types" : {
      "get" : {
        "description" : "",
        "operationId" : "getEBSTypes",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "items" : {
                "enum" : [ "IO1", "GP2", "GP3", "Scratch", "Persistent", "StandardSSD_LRS", "Premium_LRS", "UltraSSD_LRS" ],
                "type" : "string"
              },
              "type" : "array"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "List supported EBS volume types",
        "tags" : [ "Instance types" ]
      }
    },
    "/api/v1/metadata/gcp_types" : {
      "get" : {
        "description" : "",
        "operationId" : "getGCPTypes",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "items" : {
                "enum" : [ "IO1", "GP2", "GP3", "Scratch", "Persistent", "StandardSSD_LRS", "Premium_LRS", "UltraSSD_LRS" ],
                "type" : "string"
              },
              "type" : "array"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "List supported GCP disk types",
        "tags" : [ "Instance types" ]
      }
    },
    "/api/v1/metadata/yql_data_types" : {
      "get" : {
        "description" : "Get a list of all defined column types.",
        "operationId" : "getYQLDataTypes",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "items" : {
                "enum" : [ "TINYINT", "SMALLINT", "INT", "BIGINT", "VARCHAR", "BOOLEAN", "FLOAT", "DOUBLE_PRECISION", "BLOB", "TIMESTAMP", "DECIMAL", "VARINT", "INET", "LIST", "MAP", "SET", "UUID", "TIMEUUID", "FROZEN", "DATE", "TIME", "JSONB", "USER_DEFINED_TYPE" ],
                "type" : "string"
              },
              "type" : "array"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "List column types",
        "tags" : [ "Table management" ]
      }
    },
    "/api/v1/prometheus_metrics" : {
      "get" : {
        "description" : "",
        "operationId" : "MetricsDetail",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "string"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Get Prometheus metrics",
        "tags" : [ "Metrics" ]
      }
    },
    "/api/v1/register" : {
      "post" : {
        "description" : "Creates new customer and user",
        "operationId" : "registerCustomer",
        "parameters" : [ {
          "default" : false,
          "in" : "query",
          "name" : "generateApiToken",
          "required" : false,
          "type" : "boolean"
        }, {
          "in" : "body",
          "name" : "CustomerRegisterFormData",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CustomerRegisterFormData"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SessionInfo"
            }
          }
        },
        "summary" : "Register a customer",
        "tags" : [ "Session management" ]
      }
    },
    "/api/v1/runtime_config/mutable_keys" : {
      "get" : {
        "description" : "List all the mutable runtime config keys",
        "operationId" : "listKeys",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "items" : {
                "type" : "string"
              },
              "type" : "array"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "List mutable keys",
        "tags" : [ "Runtime configuration" ]
      }
    },
    "/api/v1/session_info" : {
      "get" : {
        "description" : "",
        "operationId" : "getSessionInfo",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SessionInfo"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "Get current user/customer uuid auth/api token",
        "tags" : [ "Session management" ]
      }
    },
    "/metamaster/universe/{universeUUID}" : {
      "get" : {
        "description" : "",
        "operationId" : "getUniverseMasterNodes",
        "parameters" : [ {
          "format" : "uuid",
          "in" : "path",
          "name" : "universeUUID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/MastersList"
            }
          }
        },
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "summary" : "List a universe's master nodes",
        "tags" : [ "Universe node metadata (metamaster)" ]
      }
    }
  },
  "produces" : [ "application/json" ],
  "schemes" : [ "http", "https" ],
  "securityDefinitions" : {
    "apiKeyAuth" : {
      "description" : "API token passed as header",
      "in" : "header",
      "name" : "X-AUTH-YW-API-TOKEN",
      "type" : "apiKey"
    }
  },
  "swagger" : "2.0",
  "tags" : [ {
    "name" : "Access Keys"
  }, {
    "name" : "Alerts"
  }, {
    "name" : "Asynchronous Replication"
  }, {
    "name" : "Audit"
  }, {
    "name" : "Availability Zones"
  }, {
    "name" : "Backups"
  }, {
    "name" : "Certificate Info"
  }, {
    "name" : "Cloud providers"
  }, {
    "name" : "Customer Configuration"
  }, {
    "name" : "Customer Tasks"
  }, {
    "name" : "Customer management"
  }, {
    "name" : "Encryption at rest"
  }, {
    "name" : "Grafana Dashboard"
  }, {
    "name" : "Instance types"
  }, {
    "name" : "LoggingConfig"
  }, {
    "name" : "Maintenance windows"
  }, {
    "name" : "Metrics"
  }, {
    "name" : "Node instances"
  }, {
    "name" : "Region management"
  }, {
    "name" : "Release management"
  }, {
    "name" : "Runtime configuration"
  }, {
    "name" : "Schedule management"
  }, {
    "name" : "Session management"
  }, {
    "name" : "Support Bundle management"
  }, {
    "name" : "Table management"
  }, {
    "name" : "Tablet server management"
  }, {
    "name" : "Universe Upgrades Management"
  }, {
    "name" : "Universe actions"
  }, {
    "name" : "Universe database management"
  }, {
    "name" : "Universe information"
  }, {
    "name" : "Universe management"
  }, {
    "name" : "Universe node metadata (metamaster)"
  }, {
    "name" : "UniverseClusterMutations"
  }, {
    "name" : "User management"
  } ]
}