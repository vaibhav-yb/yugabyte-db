-- #### nested loop joins ####
CREATE FUNCTION explain_join_tsmall_tlarge() RETURNS SETOF TEXT LANGUAGE plpgsql AS
$$
DECLARE ln TEXT;
BEGIN
    FOR ln IN
        EXPLAIN (ANALYZE, DIST, SUMMARY OFF, TIMING OFF, COSTS OFF)
        SELECT * FROM t_large JOIN t_small ON t_large.a = t_small.a
    LOOP
        ln := regexp_replace(ln, 'Memory: \S*',  'Memory: xxx');
        ln := regexp_replace(ln, 'Disk: \S*',  'Disk: xxx');
        RETURN NEXT ln;
    END LOOP;
END;
$$;
CREATE FUNCTION explain_join_tlarge_tsmall() RETURNS SETOF TEXT LANGUAGE plpgsql AS
$$
DECLARE ln TEXT;
BEGIN
    FOR ln IN
        EXPLAIN (ANALYZE, DIST, SUMMARY OFF, TIMING OFF, COSTS OFF)
        SELECT * FROM t_small JOIN t_large ON t_large.a = t_small.a
    LOOP
        ln := regexp_replace(ln, 'Memory: \S*',  'Memory: xxx');
        ln := regexp_replace(ln, 'Disk: \S*',  'Disk: xxx');
        RETURN NEXT ln;
    END LOOP;
END;
$$;
SET yb_fetch_size_limit = 0;
SET yb_fetch_row_limit = 1024;
SET yb_bnl_batch_size = 1;
-- the default behaviour sends 6 RPCs for the outer table
SELECT explain_join_tsmall_tlarge();
                        explain_join_tsmall_tlarge
---------------------------------------------------------------------------
 Nested Loop (actual rows=5000 loops=1)
   ->  Seq Scan on t_large (actual rows=5000 loops=1)
         Storage Table Read Requests: 6
   ->  Index Scan using t_small_pkey on t_small (actual rows=1 loops=5000)
         Index Cond: (a = t_large.a)
         Storage Table Read Requests: 1
(6 rows)

SELECT explain_join_tlarge_tsmall();
                        explain_join_tlarge_tsmall
---------------------------------------------------------------------------
 Nested Loop (actual rows=5000 loops=1)
   ->  Seq Scan on t_small (actual rows=5000 loops=1)
         Storage Table Read Requests: 6
   ->  Index Scan using t_large_pkey on t_large (actual rows=1 loops=5000)
         Index Cond: (a = t_small.a)
         Storage Table Read Requests: 1
(6 rows)

SET yb_fetch_size_limit = '50kB';
SET yb_fetch_row_limit = 10000;
-- we require more requests to collect the rows of the outer table when it is large.
-- the inner table is unchanged at 1 RPC per row.
SELECT explain_join_tsmall_tlarge();
                        explain_join_tsmall_tlarge
---------------------------------------------------------------------------
 Nested Loop (actual rows=5000 loops=1)
   ->  Seq Scan on t_large (actual rows=5000 loops=1)
         Storage Table Read Requests: 99
   ->  Index Scan using t_small_pkey on t_small (actual rows=1 loops=5000)
         Index Cond: (a = t_large.a)
         Storage Table Read Requests: 1
(6 rows)

SELECT explain_join_tlarge_tsmall();
                        explain_join_tlarge_tsmall
---------------------------------------------------------------------------
 Nested Loop (actual rows=5000 loops=1)
   ->  Seq Scan on t_small (actual rows=5000 loops=1)
         Storage Table Read Requests: 6
   ->  Index Scan using t_large_pkey on t_large (actual rows=1 loops=5000)
         Index Cond: (a = t_small.a)
         Storage Table Read Requests: 1
(6 rows)

-- #### batch nested loop joins ####
SET yb_bnl_batch_size = 1024;
-- now we can request large amounts of rows from the inner table - these are still bound by the size limit
SELECT explain_join_tsmall_tlarge();
                        explain_join_tsmall_tlarge
---------------------------------------------------------------------------
 YB Batched Nested Loop Join (actual rows=5000 loops=1)
   Join Filter: (t_large.a = t_small.a)
   ->  Seq Scan on t_large (actual rows=5000 loops=1)
         Storage Table Read Requests: 99
   ->  Index Scan using t_small_pkey on t_small (actual rows=1000 loops=5)
         Index Cond: (a = ANY (ARRAY[t_large.a, $1, $2, ..., $1023]))
         Storage Table Read Requests: 1
(7 rows)

SELECT explain_join_tlarge_tsmall();
                        explain_join_tlarge_tsmall
---------------------------------------------------------------------------
 YB Batched Nested Loop Join (actual rows=5000 loops=1)
   Join Filter: (t_small.a = t_large.a)
   ->  Seq Scan on t_small (actual rows=5000 loops=1)
         Storage Table Read Requests: 6
   ->  Index Scan using t_large_pkey on t_large (actual rows=1000 loops=5)
         Index Cond: (a = ANY (ARRAY[t_small.a, $1, $2, ..., $1023]))
         Storage Table Read Requests: 18
(7 rows)

SET yb_fetch_size_limit = '500kB';
SELECT explain_join_tsmall_tlarge();
                        explain_join_tsmall_tlarge
---------------------------------------------------------------------------
 YB Batched Nested Loop Join (actual rows=5000 loops=1)
   Join Filter: (t_large.a = t_small.a)
   ->  Seq Scan on t_large (actual rows=5000 loops=1)
         Storage Table Read Requests: 12
   ->  Index Scan using t_small_pkey on t_small (actual rows=1000 loops=5)
         Index Cond: (a = ANY (ARRAY[t_large.a, $1, $2, ..., $1023]))
         Storage Table Read Requests: 1
(7 rows)

SELECT explain_join_tlarge_tsmall();
                        explain_join_tlarge_tsmall
---------------------------------------------------------------------------
 YB Batched Nested Loop Join (actual rows=5000 loops=1)
   Join Filter: (t_small.a = t_large.a)
   ->  Seq Scan on t_small (actual rows=5000 loops=1)
         Storage Table Read Requests: 3
   ->  Index Scan using t_large_pkey on t_large (actual rows=1000 loops=5)
         Index Cond: (a = ANY (ARRAY[t_small.a, $1, $2, ..., $1023]))
         Storage Table Read Requests: 2
(7 rows)

SET yb_bnl_batch_size = 1; -- disable BNLJ
-- #### merge joins ####
SET yb_fetch_row_limit = 1024;
SET yb_fetch_size_limit = 0;
-- the default behaviour sends 6 RPCs per table
SELECT /*+ MergeJoin(t_small t_large) */ explain_join_tsmall_tlarge();
                 explain_join_tsmall_tlarge
------------------------------------------------------------
 Merge Join (actual rows=5000 loops=1)
   Merge Cond: (t_large.a = t_small.a)
   ->  Sort (actual rows=5000 loops=1)
         Sort Key: t_large.a
         Sort Method: external merge  Disk: xxx
         ->  Seq Scan on t_large (actual rows=5000 loops=1)
               Storage Table Read Requests: 6
   ->  Sort (actual rows=5000 loops=1)
         Sort Key: t_small.a
         Sort Method: quicksort  Memory: xxx
         ->  Seq Scan on t_small (actual rows=5000 loops=1)
               Storage Table Read Requests: 6
(12 rows)

SET yb_fetch_row_limit = 0;
-- size limit affects both tables in a Merge Join
SET yb_fetch_size_limit = '500kB';
SELECT /*+ MergeJoin(t_small t_large) */ explain_join_tsmall_tlarge();
                 explain_join_tsmall_tlarge
------------------------------------------------------------
 Merge Join (actual rows=5000 loops=1)
   Merge Cond: (t_large.a = t_small.a)
   ->  Sort (actual rows=5000 loops=1)
         Sort Key: t_large.a
         Sort Method: external merge  Disk: xxx
         ->  Seq Scan on t_large (actual rows=5000 loops=1)
               Storage Table Read Requests: 12
   ->  Sort (actual rows=5000 loops=1)
         Sort Key: t_small.a
         Sort Method: quicksort  Memory: xxx
         ->  Seq Scan on t_small (actual rows=5000 loops=1)
               Storage Table Read Requests: 3
(12 rows)

SET yb_fetch_size_limit = '50kB';
SELECT /*+ MergeJoin(t_small t_large) */ explain_join_tsmall_tlarge();
                 explain_join_tsmall_tlarge
------------------------------------------------------------
 Merge Join (actual rows=5000 loops=1)
   Merge Cond: (t_large.a = t_small.a)
   ->  Sort (actual rows=5000 loops=1)
         Sort Key: t_large.a
         Sort Method: external merge  Disk: xxx
         ->  Seq Scan on t_large (actual rows=5000 loops=1)
               Storage Table Read Requests: 99
   ->  Sort (actual rows=5000 loops=1)
         Sort Key: t_small.a
         Sort Method: quicksort  Memory: xxx
         ->  Seq Scan on t_small (actual rows=5000 loops=1)
               Storage Table Read Requests: 6
(12 rows)

-- #### hash joins ####
SET yb_fetch_row_limit = 1024;
SET yb_fetch_size_limit = 0;
-- the default behaviour sends 6 RPCs per table
SELECT /*+ HashJoin(t_small t_large) */ explain_join_tlarge_tsmall();
                                explain_join_tlarge_tsmall
------------------------------------------------------------------------------------------
 Hash Join (actual rows=5000 loops=1)
   Hash Cond: (t_small.a = t_large.a)
   ->  Seq Scan on t_small (actual rows=5000 loops=1)
         Storage Table Read Requests: 6
   ->  Hash (actual rows=5000 loops=1)
         Buckets: 4096 (originally 1024)  Batches: 2 (originally 1)  Memory Usage: 4065kB
         ->  Seq Scan on t_large (actual rows=5000 loops=1)
               Storage Table Read Requests: 6
(8 rows)

SELECT /*+ HashJoin(t_small t_large) */ explain_join_tsmall_tlarge();
                               explain_join_tsmall_tlarge
-----------------------------------------------------------------------------------------
 Hash Join (actual rows=5000 loops=1)
   Hash Cond: (t_large.a = t_small.a)
   ->  Seq Scan on t_large (actual rows=5000 loops=1)
         Storage Table Read Requests: 6
   ->  Hash (actual rows=5000 loops=1)
         Buckets: 8192 (originally 1024)  Batches: 1 (originally 1)  Memory Usage: 367kB
         ->  Seq Scan on t_small (actual rows=5000 loops=1)
               Storage Table Read Requests: 6
(8 rows)

SET yb_fetch_row_limit = 0;
-- size limit affects both tables in a HashJoin
SET yb_fetch_size_limit = '500kB';
SELECT /*+ HashJoin(t_small t_large) */ explain_join_tlarge_tsmall();
                                explain_join_tlarge_tsmall
------------------------------------------------------------------------------------------
 Hash Join (actual rows=5000 loops=1)
   Hash Cond: (t_small.a = t_large.a)
   ->  Seq Scan on t_small (actual rows=5000 loops=1)
         Storage Table Read Requests: 3
   ->  Hash (actual rows=5000 loops=1)
         Buckets: 4096 (originally 1024)  Batches: 2 (originally 1)  Memory Usage: 4065kB
         ->  Seq Scan on t_large (actual rows=5000 loops=1)
               Storage Table Read Requests: 12
(8 rows)

SELECT /*+ HashJoin(t_small t_large) */ explain_join_tsmall_tlarge();
                               explain_join_tsmall_tlarge
-----------------------------------------------------------------------------------------
 Hash Join (actual rows=5000 loops=1)
   Hash Cond: (t_large.a = t_small.a)
   ->  Seq Scan on t_large (actual rows=5000 loops=1)
         Storage Table Read Requests: 12
   ->  Hash (actual rows=5000 loops=1)
         Buckets: 8192 (originally 1024)  Batches: 1 (originally 1)  Memory Usage: 367kB
         ->  Seq Scan on t_small (actual rows=5000 loops=1)
               Storage Table Read Requests: 3
(8 rows)

SET yb_fetch_size_limit = '50kB';
SELECT /*+ HashJoin(t_small t_large) */ explain_join_tlarge_tsmall();
                                explain_join_tlarge_tsmall
------------------------------------------------------------------------------------------
 Hash Join (actual rows=5000 loops=1)
   Hash Cond: (t_small.a = t_large.a)
   ->  Seq Scan on t_small (actual rows=5000 loops=1)
         Storage Table Read Requests: 6
   ->  Hash (actual rows=5000 loops=1)
         Buckets: 4096 (originally 1024)  Batches: 2 (originally 1)  Memory Usage: 4065kB
         ->  Seq Scan on t_large (actual rows=5000 loops=1)
               Storage Table Read Requests: 99
(8 rows)

SELECT /*+ HashJoin(t_small t_large) */ explain_join_tsmall_tlarge();
                               explain_join_tsmall_tlarge
-----------------------------------------------------------------------------------------
 Hash Join (actual rows=5000 loops=1)
   Hash Cond: (t_large.a = t_small.a)
   ->  Seq Scan on t_large (actual rows=5000 loops=1)
         Storage Table Read Requests: 99
   ->  Hash (actual rows=5000 loops=1)
         Buckets: 8192 (originally 1024)  Batches: 1 (originally 1)  Memory Usage: 367kB
         ->  Seq Scan on t_small (actual rows=5000 loops=1)
               Storage Table Read Requests: 6
(8 rows)
