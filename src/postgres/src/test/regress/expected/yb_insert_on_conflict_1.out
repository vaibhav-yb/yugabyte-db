CREATE TABLE ab_tab (a int, b int);
INSERT INTO ab_tab SELECT g, g + 10 FROM generate_series(1, 10) g;
--- Basic
CREATE UNIQUE INDEX NONCONCURRENTLY ah_idx ON ab_tab (a HASH);
-- Ending with no conflict.
INSERT INTO ab_tab VALUES (generate_series(-4, 5)) ON CONFLICT DO NOTHING;
SELECT * FROM ab_tab WHERE a < 1 OR a > 10 ORDER BY a, b;
 a  | b
----+---
 -4 |
 -3 |
 -2 |
 -1 |
  0 |
(5 rows)

-- Ending with conflict.
INSERT INTO ab_tab VALUES (generate_series(6, 15)) ON CONFLICT DO NOTHING;
SELECT * FROM ab_tab WHERE a < 1 OR a > 10 ORDER BY a, b;
 a  | b
----+---
 -4 |
 -3 |
 -2 |
 -1 |
  0 |
 11 |
 12 |
 13 |
 14 |
 15 |
(10 rows)

-- Reset.
DELETE FROM ab_tab WHERE a < 1 OR a > 10;
--- RETURNING
INSERT INTO ab_tab VALUES (generate_series(-3, 13)) ON CONFLICT DO NOTHING RETURNING (a % 5);
 ?column?
----------
       -3
       -2
       -1
        0
        1
        2
        3
(7 rows)

SELECT * FROM ab_tab WHERE a < 1 OR a > 10 ORDER BY a, b;
 a  | b
----+---
 -3 |
 -2 |
 -1 |
  0 |
 11 |
 12 |
 13 |
(7 rows)

-- Reset.
DELETE FROM ab_tab WHERE a < 1 OR a > 10;
--- DO UPDATE
BEGIN;
INSERT INTO ab_tab VALUES (generate_series(-3, 13)) ON CONFLICT (a) DO UPDATE SET b = EXCLUDED.a;
SELECT * FROM ab_tab ORDER BY a, b;
 a  | b
----+----
 -3 |
 -2 |
 -1 |
  0 |
  1 |  1
  2 |  2
  3 |  3
  4 |  4
  5 |  5
  6 |  6
  7 |  7
  8 |  8
  9 |  9
 10 | 10
 11 |
 12 |
 13 |
(17 rows)

-- Reset.
ROLLBACK;
--- Multiple arbiter indexes
CREATE UNIQUE INDEX NONCONCURRENTLY br_idx ON ab_tab (b ASC);
-- No constraint specification.
-- (1, 1): conflict on i
-- (10, 10): conflict on both i and j
-- (15, 15): conflict on j
INSERT INTO ab_tab VALUES (1, 1), (-30, -30), (10, 10), (15, 15), (30, 30) ON CONFLICT DO NOTHING;
SELECT * FROM ab_tab WHERE a < 1 OR a > 10 ORDER BY a, b;
  a  |  b
-----+-----
 -30 | -30
  30 |  30
(2 rows)

-- Yes constraint specification.
INSERT INTO ab_tab VALUES (2, 2) ON CONFLICT (a) DO NOTHING;
INSERT INTO ab_tab VALUES (2, 2) ON CONFLICT (b) DO NOTHING;
ERROR:  duplicate key value violates unique constraint "ah_idx"
SELECT * FROM ab_tab WHERE a < 1 OR a > 10 ORDER BY a, b;
  a  |  b
-----+-----
 -30 | -30
  30 |  30
(2 rows)

-- Reset.
DELETE FROM ab_tab WHERE a < 1 OR a > 10;
DROP INDEX ah_idx;
DROP INDEX br_idx;
--- Multicolumn index
CREATE UNIQUE INDEX NONCONCURRENTLY bharbr_idx ON ab_tab (b HASH, a DESC, b ASC);
BEGIN;
INSERT INTO ab_tab VALUES (0, 10), (1, 11), (2, 12), (2, 13) ON CONFLICT DO NOTHING;
SELECT * FROM ab_tab WHERE a < 1 OR a > 10 ORDER BY a, b;
 a | b
---+----
 0 | 10
(1 row)

-- Reset.
ROLLBACK;
DROP INDEX bharbr_idx;
--- Many-to-one expression index
CREATE UNIQUE INDEX NONCONCURRENTLY expr_idx ON ab_tab (((a + b) % 100));
-- Conflicts:
-- 12: existing (1, 11), several values mapping to that are inserted
-- 77: two such values are inserted, only one goes through
-- 98: no conflict
BEGIN;
INSERT INTO ab_tab VALUES (12, 0), (112, 0), (99, 99), (100, 12), (77, 0), (78, -1) ON CONFLICT (((a + b) % 100)) DO NOTHING;
SELECT * FROM ab_tab WHERE a < 1 OR a > 10 ORDER BY a, b;
 a  | b
----+----
 77 |  0
 99 | 99
(2 rows)

ROLLBACK;
-- Same with DO UPDATE.
BEGIN;
INSERT INTO ab_tab VALUES (12, 0), (112, 0), (99, 99), (100, 12), (77, 0), (78, -1) ON CONFLICT (((a + b) % 100)) DO UPDATE SET b = 1010 + EXCLUDED.b;
ERROR:  ON CONFLICT DO UPDATE command cannot affect row a second time
HINT:  Ensure that no rows proposed for insertion within the same command have duplicate constrained values.
SELECT * FROM ab_tab WHERE a < 1 OR a > 10 ORDER BY a, b;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
ROLLBACK;
-- Reset.
DROP INDEX expr_idx;
--- Partial indexes
CREATE UNIQUE INDEX NONCONCURRENTLY b1_idx ON ab_tab (b) WHERE a % 10 = 1;
CREATE UNIQUE INDEX NONCONCURRENTLY b2_idx ON ab_tab (b) WHERE a % 10 = 2;
-- Conflicts:
-- b1_idx: existing (1, 11), conflicts with (101, 11)
-- b2_idx: existing (2, 12), conflicts with (202, 12)
INSERT INTO ab_tab VALUES (100, 11), (101, 11), (102, 11), (201, 201), (202, 12) ON CONFLICT DO NOTHING;
SELECT * FROM ab_tab WHERE a < 1 OR a > 10 ORDER BY a, b;
  a  |  b
-----+-----
 100 |  11
 102 |  11
 201 | 201
(3 rows)

-- No partial index matches.
INSERT INTO ab_tab VALUES (55, 55), (66, 66), (77, 77), (88, 88) ON CONFLICT DO NOTHING;
SELECT * FROM ab_tab WHERE a < 1 OR a > 10 ORDER BY a, b;
  a  |  b
-----+-----
  55 |  55
  66 |  66
  77 |  77
  88 |  88
 100 |  11
 102 |  11
 201 | 201
(7 rows)

-- Reset.
DELETE FROM ab_tab WHERE a < 1 OR a > 10;
DROP INDEX b1_idx;
DROP INDEX b2_idx;
--- Nulls
-- NULLS DISTINCT
CREATE UNIQUE INDEX NONCONCURRENTLY ah_idx ON ab_tab (a HASH);
INSERT INTO ab_tab VALUES (null, null);
INSERT INTO ab_tab VALUES (null, null) ON CONFLICT DO NOTHING;
SELECT * FROM ab_tab WHERE a IS NULL ORDER BY b;
 a | b
---+---
   |
   |
(2 rows)

-- Reset.
DELETE FROM ab_tab WHERE a IS null;
-- NULLS NOT DISTINCT
DROP INDEX ah_idx;
/* TODO(jason): uncomment when NULLS NOT DISTINCT is either supported or blocked
CREATE UNIQUE INDEX NONCONCURRENTLY ah_idx ON ab_tab (a HASH) NULLS NOT DISTINCT;
INSERT INTO ab_tab VALUES (null, null);
INSERT INTO ab_tab VALUES (null, null) ON CONFLICT DO NOTHING;
SELECT * FROM ab_tab WHERE a IS NULL ORDER BY b;
*/
--- Partitioned table
CREATE TABLE pp (i serial, j int, UNIQUE (j)) PARTITION BY RANGE (j);
CREATE TABLE pp1 PARTITION OF pp FOR VALUES FROM (0) TO (10);
CREATE TABLE pp2 PARTITION OF pp FOR VALUES FROM (10) TO (20);
CREATE TABLE pp3 PARTITION OF pp FOR VALUES FROM (20) TO (30);
CREATE TABLE pp4 (i serial, j int, UNIQUE (j)) PARTITION BY RANGE (j);
CREATE TABLE pp44 PARTITION OF pp4 FOR VALUES FROM (30) TO (35);
CREATE TABLE pp49 PARTITION OF pp4 FOR VALUES FROM (35) TO (40);
ALTER TABLE pp ATTACH PARTITION pp4 FOR VALUES FROM (30) TO (40);
INSERT INTO pp (j) SELECT g * 17 % 40 FROM generate_series(1, 20) g;
SELECT * FROM pp ORDER BY i;
 i  | j
----+----
  1 | 17
  2 | 34
  3 | 11
  4 | 28
  5 |  5
  6 | 22
  7 | 39
  8 | 16
  9 | 33
 10 | 10
 11 | 27
 12 |  4
 13 | 21
 14 | 38
 15 | 15
 16 | 32
 17 |  9
 18 | 26
 19 |  3
 20 | 20
(20 rows)

BEGIN;
INSERT INTO pp (j) SELECT g * 7 % 40 FROM generate_series(1, 40) g ON CONFLICT DO NOTHING;
SELECT * FROM pp ORDER BY i;
 i  | j
----+----
  1 | 17
  2 | 34
  3 | 11
  4 | 28
  5 |  5
  6 | 22
  7 | 39
  8 | 16
  9 | 33
 10 | 10
 11 | 27
 12 |  4
 13 | 21
 14 | 38
 15 | 15
 16 | 32
 17 |  9
 18 | 26
 19 |  3
 20 | 20
 21 |  7
 22 | 14
 25 | 35
 26 |  2
 29 | 23
 30 | 30
 31 | 37
 34 | 18
 35 | 25
 38 |  6
 39 | 13
 43 |  1
 44 |  8
 47 | 29
 48 | 36
 52 | 24
 53 | 31
 56 | 12
 57 | 19
 60 |  0
(40 rows)

ABORT;
INSERT INTO pp (j) SELECT g * 7 % 40 FROM generate_series(1, 40) g ON CONFLICT (j) DO UPDATE SET i = EXCLUDED.i + 100;
SELECT * FROM pp ORDER BY i % 100;
  i  | j
-----+----
 100 |  0
  61 |  7
  62 | 14
 163 | 21
 164 | 28
  65 | 35
  66 |  2
 167 |  9
 168 | 16
  69 | 23
  70 | 30
  71 | 37
 172 |  4
 173 | 11
  74 | 18
  75 | 25
 176 | 32
 177 | 39
  78 |  6
  79 | 13
 180 | 20
 181 | 27
 182 | 34
  83 |  1
  84 |  8
 185 | 15
 186 | 22
  87 | 29
  88 | 36
 189 |  3
 190 | 10
 191 | 17
  92 | 24
  93 | 31
 194 | 38
 195 |  5
  96 | 12
  97 | 19
 198 | 26
 199 | 33
(40 rows)

--- Complex types
CREATE TYPE complex_enum AS ENUM ('bob', 'cob', 'hob');
CREATE TABLE complex_table (t timestamp UNIQUE,
                            b box,
                            v1 varchar(5) UNIQUE,
                            v2 varchar UNIQUE,
                            x text,
                            n numeric UNIQUE,
                            d decimal,
                            e complex_enum,
                            PRIMARY KEY (d, x, e DESC));
CREATE UNIQUE INDEX NONCONCURRENTLY ON complex_table (n, e);
INSERT INTO complex_table VALUES ('2024-08-22 07:00:00+07'::timestamptz,
                                  '(1, 2, 3, 4)',
                                  'abc',
                                  'def',
                                  'hij',
                                  12.34,
                                  56.78,
                                  'cob');
INSERT INTO complex_table VALUES ('2024-08-22 06:00:00+06'::timestamptz,
                                  '(5, 6, 7, 8)',
                                  'def',
                                  'hij',
                                  'abc',
                                  56.78,
                                  12.34,
                                  'bob') ON CONFLICT DO NOTHING;
SELECT count(*) FROM complex_table;
 count
-------
     1
(1 row)

--- ON CONFLICT DO UPDATE varlen type
CREATE TABLE varlen (t text, b bytea GENERATED ALWAYS AS (bytea(t)) STORED, UNIQUE (t));
CREATE INDEX NONCONCURRENTLY ON varlen (b);
INSERT INTO varlen VALUES ('a');
INSERT INTO varlen VALUES ('a'), ('a') ON CONFLICT (t) DO UPDATE SET t = 'b';
SELECT * FROM varlen ORDER BY t;
 t |  b
---+------
 a | \x61
 b | \x62
(2 rows)

--- ON CONFLICT DO UPDATE edge cases
CREATE TABLE ioc (i int, PRIMARY KEY (i ASC));
BEGIN;
INSERT INTO ioc VALUES (1), (1) ON CONFLICT (i) DO UPDATE SET i = EXCLUDED.i + 20;
ERROR:  ON CONFLICT DO UPDATE command cannot affect row a second time
HINT:  Ensure that no rows proposed for insertion within the same command have duplicate constrained values.
ROLLBACK;
INSERT INTO ioc VALUES (1);
BEGIN;
INSERT INTO ioc VALUES (1), (1) ON CONFLICT (i) DO UPDATE SET i = EXCLUDED.i + 20;
TABLE ioc;
 i
----
  1
 21
(2 rows)

ROLLBACK;
BEGIN;
INSERT INTO ioc VALUES (20), (20) ON CONFLICT (i) DO UPDATE SET i = EXCLUDED.i + 20;
ERROR:  ON CONFLICT DO UPDATE command cannot affect row a second time
HINT:  Ensure that no rows proposed for insertion within the same command have duplicate constrained values.
ROLLBACK;
BEGIN;
INSERT INTO ioc VALUES (20), (1) ON CONFLICT (i) DO UPDATE SET i = 20;
ERROR:  duplicate key value violates unique constraint "ioc_pkey"
ROLLBACK;
BEGIN;
INSERT INTO ioc VALUES (1), (20) ON CONFLICT (i) DO UPDATE SET i = 20;
ERROR:  ON CONFLICT DO UPDATE command cannot affect row a second time
HINT:  Ensure that no rows proposed for insertion within the same command have duplicate constrained values.
ROLLBACK;
--- UPDATE SET edge case
CREATE TABLE texts (t text PRIMARY KEY);
CREATE FUNCTION agg_texts() RETURNS text AS $$SELECT 'agg=[' || string_agg(t, ',') || ']' FROM texts$$ LANGUAGE sql;
INSERT INTO texts VALUES ('i'), ('j') ON CONFLICT (t) DO UPDATE SET t = agg_texts();
INSERT INTO texts VALUES ('i'), ('j') ON CONFLICT (t) DO UPDATE SET t = agg_texts();
SELECT * FROM texts ORDER BY t;
         t
-------------------
 agg=[j,agg=[j,i]]
 agg=[j,i]
(2 rows)

--- ON CONFLICT DO UPDATE YbExecDoUpdateIndexTuple
CREATE TABLE index_update (a int PRIMARY KEY, b int);
INSERT INTO index_update VALUES (1, 2);
INSERT INTO index_update VALUES (1, 3) ON CONFLICT (a) DO UPDATE SET b = EXCLUDED.b;
--- After row triggers
CREATE TABLE trigger_test (i int2, PRIMARY KEY (i ASC));
-- This test is derived from TestPgUpdatePrimaryKey.java.
CREATE TABLE triggers_fired (name text, fired int, PRIMARY KEY (name));
CREATE OR REPLACE FUNCTION log_trigger() RETURNS trigger AS $$
    BEGIN
        UPDATE triggers_fired SET fired = triggers_fired.fired + 1 WHERE name = TG_NAME;
    RETURN NEW;
    END;
$$ LANGUAGE plpgsql;
CREATE TRIGGER ai AFTER INSERT ON trigger_test FOR EACH ROW EXECUTE PROCEDURE log_trigger();
CREATE TRIGGER au AFTER UPDATE ON trigger_test FOR EACH ROW EXECUTE PROCEDURE log_trigger();
INSERT INTO triggers_fired VALUES ('ai', 0), ('au', 0);
INSERT INTO trigger_test VALUES (1);
INSERT INTO trigger_test VALUES (1), (2), (1), (3) ON CONFLICT DO NOTHING;
TABLE triggers_fired;
 name | fired
------+-------
 au   |     0
 ai   |     3
(2 rows)

TABLE trigger_test;
 i
---
 1
 2
 3
(3 rows)

INSERT INTO trigger_test VALUES (1), (2), (1), (3) ON CONFLICT (i) DO UPDATE SET i = EXCLUDED.i + 10;
TABLE triggers_fired;
 name | fired
------+-------
 au   |     3
 ai   |     4
(2 rows)

TABLE trigger_test;
 i
----
  1
 11
 12
 13
(4 rows)

--- Foreign key
CREATE TABLE parent_table (n numeric, t text, b bool, PRIMARY KEY (t, n));
CREATE TABLE child_table (b bool PRIMARY KEY, n numeric, t text, FOREIGN KEY (t, n) REFERENCES parent_table);
INSERT INTO parent_table VALUES (1, '1', true), (2, '2', true);
INSERT INTO child_table VALUES (false, 1, '1') ON CONFLICT DO NOTHING;
INSERT INTO child_table VALUES (false, 1, '1') ON CONFLICT (b) DO UPDATE SET b = true;
TABLE child_table;
 b | n | t
---+---+---
 t | 1 | 1
(1 row)

INSERT INTO child_table VALUES (false, 2, '1') ON CONFLICT (b) DO UPDATE SET b = true;
ERROR:  insert or update on table "child_table" violates foreign key constraint "child_table_t_n_fkey"
DETAIL:  Key (t, n)=(1, 2) is not present in table "parent_table".
INSERT INTO child_table VALUES (true, 2, '1') ON CONFLICT (b) DO UPDATE SET t = '2';
ERROR:  insert or update on table "child_table" violates foreign key constraint "child_table_t_n_fkey"
DETAIL:  Key (t, n)=(2, 1) is not present in table "parent_table".
TABLE child_table;
 b | n | t
---+---+---
 t | 1 | 1
(1 row)

--- WITH
CREATE TABLE with_a (i int, PRIMARY KEY (i DESC));
CREATE TABLE with_b (i int, PRIMARY KEY (i ASC));
INSERT INTO with_a VALUES (generate_series(1, 10));
INSERT INTO with_b VALUES (generate_series(11, 20));
BEGIN;
WITH w(i) AS (
    INSERT INTO with_a VALUES (generate_series(1, 11)) ON CONFLICT (i) DO NOTHING RETURNING i
) INSERT INTO with_b VALUES (generate_series(1, 15)) ON CONFLICT (i) DO UPDATE SET i = EXCLUDED.i + (SELECT i FROM w);
TABLE with_a;
 i
----
 11
 10
  9
  8
  7
  6
  5
  4
  3
  2
  1
(11 rows)

TABLE with_b;
 i
----
  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 16
 17
 18
 19
 20
 22
 23
 24
 25
 26
(20 rows)

ABORT;
BEGIN;
WITH w(i) AS (
    INSERT INTO with_a VALUES (generate_series(1, 11)) ON CONFLICT (i) DO NOTHING RETURNING i
) INSERT INTO with_a VALUES (generate_series(1, 15)) ON CONFLICT (i) DO UPDATE SET i = EXCLUDED.i + (SELECT i FROM w);
TABLE with_a;
 i
----
 26
 25
 24
 23
 22
 21
 20
 19
 18
 17
 16
(11 rows)

ABORT;
BEGIN;
WITH w(i) AS (
    INSERT INTO with_a VALUES (generate_series(6, 11)) ON CONFLICT (i) DO NOTHING RETURNING i
) INSERT INTO with_a VALUES (generate_series(10, 15)) ON CONFLICT (i) DO UPDATE SET i = EXCLUDED.i + (SELECT i FROM w);
ERROR:  duplicate key value violates unique constraint "with_a_pkey"
TABLE with_a;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
ABORT;
BEGIN;
WITH w(i) AS (
    DELETE FROM with_a WHERE i = 10 RETURNING i
) INSERT INTO with_a VALUES (generate_series(9, 15)) ON CONFLICT (i) DO UPDATE SET i = EXCLUDED.i + (SELECT i FROM w);
TABLE with_a;
 i
----
 20
 19
 15
 14
 13
 12
 11
  8
  7
  6
  5
  4
  3
  2
  1
(15 rows)

ABORT;
