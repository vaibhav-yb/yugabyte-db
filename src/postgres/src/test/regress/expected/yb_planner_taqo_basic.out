CREATE DATABASE taqo_basic with colocation = true;
\c taqo_basic
CREATE TABLE t1(k1 int,k2 text,v1 int,v2 text,PRIMARY KEY(k1 ASC, k2 ASC)) WITH (colocation = true);
CREATE INDEX ON t1(v1 ASC, k2 ASC);
CREATE TABLE t2(k1 int,k2 text,v1 int,v2 text,PRIMARY KEY(k1 ASC, k2 ASC)) WITH (colocation = true);
CREATE INDEX ON t2(v1 ASC, k2 ASC);
CREATE TABLE t3(k1 int,k2 text,v1 int,v2 text,PRIMARY KEY(k1 ASC, k2 ASC)) WITH (colocation = true);
CREATE INDEX ON t3(v1 ASC, k2 ASC);
CREATE TABLE ts2(k1 int, k2 text, v1 int, v2 text, PRIMARY KEY(k1 DESC, k2 DESC)) WITH (colocation = true);
CREATE TABLE ts3(k1 int, k2 text, v1 int, v2 text, PRIMARY KEY(k1 DESC)) WITH (colocation = true);
SET yb_non_ddl_txn_for_sys_tables_allowed = ON;
UPDATE pg_class SET reltuples = 500000, relpages = 0 WHERE relnamespace = 'public'::regnamespace AND (relname = 't1' OR relname = 't1_pkey');
UPDATE pg_class SET reltuples = 500000, relpages = 0 WHERE relnamespace = 'public'::regnamespace AND (relname = 't1_pkey' OR relname = 't1_pkey_pkey');
UPDATE pg_class SET reltuples = 500000, relpages = 0 WHERE relnamespace = 'public'::regnamespace AND (relname = 't1_v1_k2_idx' OR relname = 't1_v1_k2_idx_pkey');
UPDATE pg_class SET reltuples = 500000, relpages = 0 WHERE relnamespace = 'public'::regnamespace AND (relname = 't2' OR relname = 't2_pkey');
UPDATE pg_class SET reltuples = 500000, relpages = 0 WHERE relnamespace = 'public'::regnamespace AND (relname = 't2_pkey' OR relname = 't2_pkey_pkey');
UPDATE pg_class SET reltuples = 500000, relpages = 0 WHERE relnamespace = 'public'::regnamespace AND (relname = 't2_v1_k2_idx' OR relname = 't2_v1_k2_idx_pkey');
UPDATE pg_class SET reltuples = 500000, relpages = 0 WHERE relnamespace = 'public'::regnamespace AND (relname = 't3' OR relname = 't3_pkey');
UPDATE pg_class SET reltuples = 500000, relpages = 0 WHERE relnamespace = 'public'::regnamespace AND (relname = 't3_pkey' OR relname = 't3_pkey_pkey');
UPDATE pg_class SET reltuples = 500000, relpages = 0 WHERE relnamespace = 'public'::regnamespace AND (relname = 't3_v1_k2_idx' OR relname = 't3_v1_k2_idx_pkey');
UPDATE pg_class SET reltuples = 200000, relpages = 0 WHERE relnamespace = 'public'::regnamespace AND (relname = 'ts2' OR relname = 'ts2_pkey');
UPDATE pg_class SET reltuples = 200000, relpages = 0 WHERE relnamespace = 'public'::regnamespace AND (relname = 'ts2_pkey' OR relname = 'ts2_pkey_pkey');
UPDATE pg_class SET reltuples = 50000, relpages = 0 WHERE relnamespace = 'public'::regnamespace AND (relname = 'ts3' OR relname = 'ts3_pkey');
UPDATE pg_class SET reltuples = 50000, relpages = 0 WHERE relnamespace = 'public'::regnamespace AND (relname = 'ts3_pkey' OR relname = 'ts3_pkey_pkey');
DELETE FROM pg_statistic WHERE starelid = 'public.ts3'::regclass AND staattnum = 1;
INSERT INTO pg_statistic VALUES ('public.ts3'::regclass, 1, False::boolean, 0::real, 4::integer, -1::real, 2::smallint, 3::smallint, 0::smallint, 0::smallint, 0::smallint, 97::oid, 97::oid, 0::oid, 0::oid, 0::oid, NULL::real[], '{-0.359194636}'::real[], NULL::real[], NULL::real[], NULL::real[], array_in('{0, 502, 995, 1467, 1984, 2474, 2960, 3469, 3975, 4487, 4964, 5461, 5945, 6447, 6944, 7418, 7933, 8438, 8942, 9428, 9913, 10394, 10911, 11412, 11927, 12406, 12929, 13458, 13969, 14463, 14935, 15480, 15986, 16443, 16934, 17451, 17963, 18475, 18994, 19453, 19945, 20443, 20948, 21443, 21915, 22402, 22944, 23450, 23958, 24484, 25006, 25527, 26048, 26543, 27053, 27544, 28031, 28515, 29034, 29545, 30068, 30570, 31039, 31540, 32027, 32519, 32986, 33464, 33939, 34425, 34912, 35398, 35898, 36407, 36933, 37468, 37977, 38473, 38976, 39481, 39989, 40500, 41034, 41512, 42013, 42493, 43005, 43502, 43996, 44496, 45001, 45495, 45999, 46508, 46992, 47472, 47938, 48478, 48985, 49468, 49999}', 'int4'::regtype, -1)::anyarray, NULL, NULL, NULL);
DELETE FROM pg_statistic WHERE starelid = 'public.ts3'::regclass AND staattnum = 3;
INSERT INTO pg_statistic VALUES ('public.ts3'::regclass, 3, False::boolean, 0.397100002::real, 4::integer, -0.602900028::real, 2::smallint, 3::smallint, 0::smallint, 0::smallint, 0::smallint, 97::oid, 97::oid, 0::oid, 0::oid, 0::oid, NULL::real[], '{-0.0565304868}'::real[], NULL::real[], NULL::real[], NULL::real[], array_in('{0, 313, 600, 917, 1188, 1477, 1793, 2089, 2398, 2680, 2970, 3268, 3583, 3890, 4204, 4510, 4791, 5099, 5396, 5689, 5979, 6300, 6576, 6883, 7172, 7451, 7758, 8081, 8386, 8695, 8990, 9273, 9565, 9871, 10151, 10443, 10771, 11068, 11365, 11681, 11982, 12273, 12573, 12891, 13226, 13517, 13837, 14121, 14432, 14711, 15018, 15352, 15651, 15968, 16247, 16513, 16827, 17115, 17432, 17762, 18050, 18364, 18673, 18984, 19258, 19535, 19836, 30133, 30446, 30727, 31012, 31318, 31594, 31894, 32198, 32495, 32787, 33062, 33351, 33629, 33920, 34207, 34501, 34801, 35102, 35382, 35690, 35982, 36289, 36610, 36928, 37230, 37567, 37874, 38172, 38473, 38790, 39073, 39386, 39680, 39998}', 'int4'::regtype, -1)::anyarray, NULL, NULL, NULL);
DELETE FROM pg_statistic WHERE starelid = 'public.ts2'::regclass AND staattnum = 1;
INSERT INTO pg_statistic VALUES ('public.ts2'::regclass, 1, False::boolean, 0::real, 4::integer, -1::real, 2::smallint, 3::smallint, 0::smallint, 0::smallint, 0::smallint, 97::oid, 97::oid, 0::oid, 0::oid, 0::oid, NULL::real[], '{-0.0140148979}'::real[], NULL::real[], NULL::real[], NULL::real[], array_in('{0, 2053, 3992, 6014, 7951, 10016, 12146, 14090, 16079, 17905, 19895, 21899, 23758, 25830, 27973, 30000, 32052, 33912, 35702, 37620, 39542, 41550, 43574, 45689, 47737, 49747, 51617, 53639, 55567, 57811, 59905, 61969, 64129, 65953, 67946, 70059, 71805, 73760, 75674, 77645, 79627, 81661, 83707, 85756, 87820, 89765, 91631, 93698, 95625, 97844, 99808, 101839, 103846, 105659, 107699, 109668, 111895, 114030, 116002, 117865, 119713, 121594, 123466, 125519, 127503, 129332, 131403, 133538, 135587, 137530, 139486, 141437, 143549, 145568, 147446, 149475, 151464, 153456, 155284, 157275, 159277, 161465, 163565, 165431, 167271, 169138, 171055, 173071, 174965, 176973, 179071, 181168, 183383, 185249, 187470, 189504, 191394, 193467, 195773, 197877, 199989}', 'int4'::regtype, -1)::anyarray, NULL, NULL, NULL);
DELETE FROM pg_statistic WHERE starelid = 'public.ts2'::regclass AND staattnum = 3;
INSERT INTO pg_statistic VALUES ('public.ts2'::regclass, 3, False::boolean, 0.0973666683::real, 4::integer, -0.902633309::real, 2::smallint, 3::smallint, 0::smallint, 0::smallint, 0::smallint, 97::oid, 97::oid, 0::oid, 0::oid, 0::oid, NULL::real[], '{0.000627084693}'::real[], NULL::real[], NULL::real[], NULL::real[], array_in('{0, 1875, 3618, 5461, 7269, 9087, 10964, 12796, 14493, 16328, 17972, 19741, 21566, 23361, 24989, 26963, 28850, 30679, 32526, 34150, 35818, 37555, 39229, 41059, 42917, 44766, 46726, 48425, 50241, 51967, 53791, 55542, 57611, 59401, 61358, 63247, 65009, 66699, 68559, 70362, 72006, 73765, 75515, 77248, 79096, 80838, 82921, 84582, 86438, 88291, 89980, 91682, 93572, 95329, 97227, 99055, 100938, 102760, 104500, 106180, 108010, 109796, 111823, 113719, 115446, 117270, 118906, 120633, 122311, 124077, 125889, 127684, 129325, 131146, 133070, 134920, 136705, 138488, 140276, 142128, 143981, 145764, 147480, 149272, 151136, 152953, 154651, 156330, 158113, 159996, 161921, 163790, 165505, 167111, 168859, 180633, 182479, 184361, 186306, 188210, 189998}', 'int4'::regtype, -1)::anyarray, NULL, NULL, NULL);
DELETE FROM pg_statistic WHERE starelid = 'public.t3'::regclass AND staattnum = 1;
INSERT INTO pg_statistic VALUES ('public.t3'::regclass, 1, False::boolean, 0::real, 4::integer, -1::real, 2::smallint, 3::smallint, 0::smallint, 0::smallint, 0::smallint, 97::oid, 97::oid, 0::oid, 0::oid, 0::oid, NULL::real[], '{-0.00368085247}'::real[], NULL::real[], NULL::real[], NULL::real[], array_in('{26, 5405, 10493, 15309, 19898, 24788, 29504, 34545, 39502, 44857, 49914, 55115, 60167, 65385, 70294, 74992, 79903, 84415, 89065, 94032, 99255, 104475, 109293, 113688, 118107, 122962, 127862, 133051, 138437, 143281, 148343, 152936, 157614, 162071, 166568, 171679, 176655, 181828, 186975, 191993, 196448, 201575, 206649, 211459, 216702, 222654, 227520, 232701, 237716, 242304, 247089, 252018, 257172, 262411, 267224, 272149, 277138, 282050, 286999, 292026, 296796, 301986, 307444, 312696, 318013, 323140, 328383, 333217, 338548, 343230, 348185, 353105, 358314, 363039, 368276, 373541, 378631, 383445, 388248, 393179, 398158, 403301, 408204, 413003, 418261, 423137, 428262, 433031, 438613, 443953, 448891, 454171, 459278, 464551, 469186, 474555, 479323, 484626, 489849, 494800, 499990}', 'int4'::regtype, -1)::anyarray, NULL, NULL, NULL);
DELETE FROM pg_statistic WHERE starelid = 'public.t3'::regclass AND staattnum = 3;
INSERT INTO pg_statistic VALUES ('public.t3'::regclass, 3, False::boolean, 0::real, 4::integer, -1::real, 2::smallint, 3::smallint, 0::smallint, 0::smallint, 0::smallint, 97::oid, 97::oid, 0::oid, 0::oid, 0::oid, NULL::real[], '{-0.00368085247}'::real[], NULL::real[], NULL::real[], NULL::real[], array_in('{26, 5405, 10493, 15309, 19898, 24788, 29504, 34545, 39502, 44857, 49914, 55115, 60167, 65385, 70294, 74992, 79903, 84415, 89065, 94032, 99255, 104475, 109293, 113688, 118107, 122962, 127862, 133051, 138437, 143281, 148343, 152936, 157614, 162071, 166568, 171679, 176655, 181828, 186975, 191993, 196448, 201575, 206649, 211459, 216702, 222654, 227520, 232701, 237716, 242304, 247089, 252018, 257172, 262411, 267224, 272149, 277138, 282050, 286999, 292026, 296796, 301986, 307444, 312696, 318013, 323140, 328383, 333217, 338548, 343230, 348185, 353105, 358314, 363039, 368276, 373541, 378631, 383445, 388248, 393179, 398158, 403301, 408204, 413003, 418261, 423137, 428262, 433031, 438613, 443953, 448891, 454171, 459278, 464551, 469186, 474555, 479323, 484626, 489849, 494800, 499990}', 'int4'::regtype, -1)::anyarray, NULL, NULL, NULL);
DELETE FROM pg_statistic WHERE starelid = 'public.t2'::regclass AND staattnum = 1;
INSERT INTO pg_statistic VALUES ('public.t2'::regclass, 1, False::boolean, 0::real, 4::integer, -1::real, 2::smallint, 3::smallint, 0::smallint, 0::smallint, 0::smallint, 97::oid, 97::oid, 0::oid, 0::oid, 0::oid, NULL::real[], '{0.00327013782}'::real[], NULL::real[], NULL::real[], NULL::real[], array_in('{14, 5052, 10525, 15471, 20529, 25628, 30314, 35809, 41064, 46088, 50763, 55682, 60113, 65174, 69694, 74615, 79421, 84508, 89023, 93445, 98256, 103687, 108728, 113316, 118313, 123608, 128368, 132699, 137485, 142393, 147620, 152666, 157401, 162416, 167562, 172801, 177876, 182917, 187854, 192941, 197872, 202857, 208039, 212476, 217408, 222608, 227718, 232881, 238140, 243262, 248185, 253309, 258402, 263847, 268721, 273711, 278984, 283719, 289205, 294455, 299847, 304725, 309518, 314915, 320149, 324684, 329724, 334578, 339528, 344387, 348973, 354456, 359423, 364198, 369387, 373846, 379045, 384053, 388816, 393862, 399431, 404500, 409585, 414334, 419571, 424226, 429716, 434842, 439613, 444444, 449717, 454538, 459869, 464402, 469842, 474817, 479720, 485047, 489760, 494642, 499987}', 'int4'::regtype, -1)::anyarray, NULL, NULL, NULL);
DELETE FROM pg_statistic WHERE starelid = 'public.t2'::regclass AND staattnum = 3;
INSERT INTO pg_statistic VALUES ('public.t2'::regclass, 3, False::boolean, 0::real, 4::integer, -1::real, 2::smallint, 3::smallint, 0::smallint, 0::smallint, 0::smallint, 97::oid, 97::oid, 0::oid, 0::oid, 0::oid, NULL::real[], '{0.00327013782}'::real[], NULL::real[], NULL::real[], NULL::real[], array_in('{14, 5052, 10525, 15471, 20529, 25628, 30314, 35809, 41064, 46088, 50763, 55682, 60113, 65174, 69694, 74615, 79421, 84508, 89023, 93445, 98256, 103687, 108728, 113316, 118313, 123608, 128368, 132699, 137485, 142393, 147620, 152666, 157401, 162416, 167562, 172801, 177876, 182917, 187854, 192941, 197872, 202857, 208039, 212476, 217408, 222608, 227718, 232881, 238140, 243262, 248185, 253309, 258402, 263847, 268721, 273711, 278984, 283719, 289205, 294455, 299847, 304725, 309518, 314915, 320149, 324684, 329724, 334578, 339528, 344387, 348973, 354456, 359423, 364198, 369387, 373846, 379045, 384053, 388816, 393862, 399431, 404500, 409585, 414334, 419571, 424226, 429716, 434842, 439613, 444444, 449717, 454538, 459869, 464402, 469842, 474817, 479720, 485047, 489760, 494642, 499987}', 'int4'::regtype, -1)::anyarray, NULL, NULL, NULL);
DELETE FROM pg_statistic WHERE starelid = 'public.t1'::regclass AND staattnum = 1;
INSERT INTO pg_statistic VALUES ('public.t1'::regclass, 1, False::boolean, 0::real, 4::integer, -1::real, 2::smallint, 3::smallint, 0::smallint, 0::smallint, 0::smallint, 97::oid, 97::oid, 0::oid, 0::oid, 0::oid, NULL::real[], '{0.00588776404}'::real[], NULL::real[], NULL::real[], NULL::real[], array_in('{10, 4862, 9603, 15006, 20062, 25296, 30661, 36074, 40777, 45433, 50397, 55032, 60175, 65745, 70794, 75711, 80953, 85634, 90443, 95668, 100651, 105888, 110226, 115487, 120711, 125590, 130241, 135107, 139969, 144844, 149379, 154318, 158838, 163717, 168666, 173170, 178585, 183690, 188332, 193037, 198461, 203327, 208648, 213798, 218768, 223698, 229111, 234050, 239374, 243799, 248363, 253554, 258386, 263310, 268402, 273117, 277769, 282294, 287219, 292235, 297245, 302461, 307472, 313254, 317945, 323331, 328407, 333259, 338323, 343545, 348247, 353413, 358399, 363381, 368894, 373689, 378553, 383926, 388336, 393211, 398237, 403339, 408724, 413764, 418905, 424120, 429400, 434521, 439509, 444702, 449792, 454711, 459639, 464719, 469307, 474239, 479573, 484472, 489153, 494417, 499987}', 'int4'::regtype, -1)::anyarray, NULL, NULL, NULL);
DELETE FROM pg_statistic WHERE starelid = 'public.t1'::regclass AND staattnum = 3;
INSERT INTO pg_statistic VALUES ('public.t1'::regclass, 3, False::boolean, 0::real, 4::integer, -1::real, 2::smallint, 3::smallint, 0::smallint, 0::smallint, 0::smallint, 97::oid, 97::oid, 0::oid, 0::oid, 0::oid, NULL::real[], '{0.00588776404}'::real[], NULL::real[], NULL::real[], NULL::real[], array_in('{10, 4862, 9603, 15006, 20062, 25296, 30661, 36074, 40777, 45433, 50397, 55032, 60175, 65745, 70794, 75711, 80953, 85634, 90443, 95668, 100651, 105888, 110226, 115487, 120711, 125590, 130241, 135107, 139969, 144844, 149379, 154318, 158838, 163717, 168666, 173170, 178585, 183690, 188332, 193037, 198461, 203327, 208648, 213798, 218768, 223698, 229111, 234050, 239374, 243799, 248363, 253554, 258386, 263310, 268402, 273117, 277769, 282294, 287219, 292235, 297245, 302461, 307472, 313254, 317945, 323331, 328407, 333259, 338323, 343545, 348247, 353413, 358399, 363381, 368894, 373689, 378553, 383926, 388336, 393211, 398237, 403339, 408724, 413764, 418905, 424120, 429400, 434521, 439509, 444702, 449792, 454711, 459639, 464719, 469307, 474239, 479573, 484472, 489153, 494417, 499987}', 'int4'::regtype, -1)::anyarray, NULL, NULL, NULL);
DELETE FROM pg_statistic WHERE starelid = 'public.ts3'::regclass AND staattnum = 2;
INSERT INTO pg_statistic VALUES ('public.ts3'::regclass, 2, False::boolean, 0::real, 8::integer, -1::real, 2::smallint, 3::smallint, 0::smallint, 0::smallint, 0::smallint, 664::oid, 664::oid, 0::oid, 0::oid, 0::oid, NULL::real[], '{-0.399756938}'::real[], NULL::real[], NULL::real[], NULL::real[], array_in('{"k2-0", "k2-10439", "k2-10899", "k2-11346", "k2-11802", "k2-12253", "k2-12695", "k2-13175", "k2-13644", "k2-14079", "k2-14524", "k2-1497", "k2-1547", "k2-15926", "k2-16353", "k2-16796", "k2-17237", "k2-1771", "k2-18148", "k2-18621", "k2-19079", "k2-19492", "k2-19936", "k2-20372", "k2-20824", "k2-21280", "k2-21703", "k2-22147", "k2-22610", "k2-2311", "k2-23557", "k2-24008", "k2-24477", "k2-24936", "k2-25404", "k2-25849", "k2-26329", "k2-26781", "k2-27217", "k2-27684", "k2-28098", "k2-28548", "k2-28999", "k2-29474", "k2-29940", "k2-30401", "k2-3082", "k2-31266", "k2-31690", "k2-32141", "k2-32584", "k2-33016", "k2-33448", "k2-33890", "k2-34322", "k2-34773", "k2-35203", "k2-35658", "k2-36096", "k2-36562", "k2-37019", "k2-37511", "k2-37971", "k2-38417", "k2-38883", "k2-39326", "k2-39778", "k2-40241", "k2-40705", "k2-41160", "k2-41600", "k2-42051", "k2-42494", "k2-4296", "k2-43404", "k2-43851", "k2-44295", "k2-44739", "k2-45182", "k2-45642", "k2-46087", "k2-46539", "k2-46978", "k2-47409", "k2-47831", "k2-48278", "k2-48768", "k2-49218", "k2-49657", "k2-5129", "k2-5555", "k2-5998", "k2-6442", "k2-6894", "k2-7326", "k2-7776", "k2-8249", "k2-8709", "k2-915", "k2-9572", "k2-9999"}', 'text'::regtype, -1)::anyarray, NULL, NULL, NULL);
DELETE FROM pg_statistic WHERE starelid = 'public.ts3'::regclass AND staattnum = 4;
INSERT INTO pg_statistic VALUES ('public.ts3'::regclass, 4, False::boolean, 0.401433319::real, 17::integer, -0.598566651::real, 2::smallint, 3::smallint, 0::smallint, 0::smallint, 0::smallint, 664::oid, 664::oid, 0::oid, 0::oid, 0::oid, NULL::real[], '{-0.000815479434}'::real[], NULL::real[], NULL::real[], NULL::real[], array_in('{"007ULXKNC70NE6WK", "0D1VZ3JOZM8Q3OOX", "0QBL7OUFA2B70C2U", "13K1LF6VT16AMJLS", "1HAKGLXVNJ5DDOMG", "1UAJED5J8Y0EQG9N", "2738607XL03FXVUT", "2J0UATLE4KT6BHZA", "2V0G726JS7JU9D00", "37ZGWGM3F75PZ3QC", "3LMTUDM8FSVXDUGD", "3ZXIT168WTLSKSMV", "4D6UFOU8ED5FGXZG", "4PM00EJTPGU1PIS9", "54AF0MEEI6RQOUJB", "5FV5YQAD8DZ1GECA", "5RV9SP7ZPZ4M2X0L", "63QSNSZABMSL5757", "6FDATK1AIAII52VX", "6QD1K0CEFW0MK5SV", "73X1N054CC3BFCJH", "7IPWNOJ92ZRGOIZP", "7XYFFVWECJTM497W", "8B5JKIGG6758TJY1", "8N4CU181QUJF9IMC", "90MSQUMMR6M9LPE2", "9F6MASDEXHUNS8KP", "9S7WLQPXY95QL3MA", "A41OYJEPERD8CUWZ", "AHFP04RMLWNBG5YK", "AUS85YIDHU83GEIN", "B7RMJ5XZIEROH24S", "BL91N2JCKPWS2PYD", "BZ20AXEPE2KVE0SZ", "CDAJ263PV4HZ6Q44", "CPW72XS26PLN1VFK", "D1RZV3A36J002LI2", "DDVCUIRY5J4J4XSS", "DRFN38V6QOBZBUGZ", "E5Y4VP9476LR4WBZ", "EH7NRS6BQ8R7LHEN", "ETEH2VDDEJL4C78M", "F688KNHEF2P7FHI6", "FI3HNRYPGXC2NBQH", "FV65ONMFLRXCREWO", "G70Q5BG8UWM7H21X", "GKEADD6DPFHNFY26", "GXTT26FVM6NJKLHW", "H9G4XZWCWEA2IX7I", "HN8KZ4WTAJCJ5DX8", "I0EFVO0G3A0LJUTC", "IBT8U4H7UPSDLAFV", "INV81OV4JJ2ZJIS1", "J06PAPL1OK2OU8PA", "JE3T4AIXPGK3WNWT", "JS7ZKJ3EU7PE3WXF", "K2X6QBGINT9962TV", "KFLQ5SNJUDD622S1", "KQRWZTVGFO6PTLDU", "L4VXZQUH5U9QFXXC", "LK12AN5PP6W7G5RQ", "LW8NSSNULMDETTRM", "M83K56NFOEW6VMPA", "MJ7SYBK5UYX4OADK", "MWF2AJ7EXKLH9I47", "N91NLTQOLSHK4Y74", "NJV10VBMIRDIA1ZR", "NXU1ZCQP52DDQ9F6", "OC1KZ42GYVYUKC0L", "OQ00CPE8XRGWMZEN", "P239RIX60I0G0MNX", "PEB7E8IY182PDSFJ", "PRTVPC5Q76OR8SNM", "Q3B034ADPQX1AQ3N", "QGF48MKBJQA0857V", "QVP4016LXXGTP3VI", "R7FVA7CEQANT1VQV", "RLLDJZ2V41WE4UY1", "RZ45AD3CNXDEO1AB", "SCZZFYXGFUC9DWP9", "SPXL9J90L9VINTTV", "T3TXD48VVNAF796S", "TGRQV83ZVQ36WT2U", "TVGO2RA42BVKHQAG", "U8K2V50EMPMHMMVN", "UKLRPNIGKFTFHUAG", "UXRCQKXWVCDO6SPD", "VA0Y9RE028RIKFS5", "VKS1D97ES1DJALQP", "VXUZMXGA75K2UBGL", "WA3HNVPNVTEMMEQ6", "WOY20H4VLL1MSC3Q", "X34QOZ905F1RRXST", "XI24T5AWCEFANHN8", "XU606PSW092M0RDH", "Y8117GLSZKQQRJJD", "YLFOL7C94Y3ITGFK", "YY5PWYMPS1MKHCBO", "ZADS7E71MI7IJ9VH", "ZMOUY8W2GXY5ERYS", "ZZZDIGBKJJBHEZRB"}', 'text'::regtype, -1)::anyarray, NULL, NULL, NULL);
DELETE FROM pg_statistic WHERE starelid = 'public.ts2'::regclass AND staattnum = 2;
INSERT INTO pg_statistic VALUES ('public.ts2'::regclass, 2, False::boolean, 0::real, 9::integer, -1::real, 2::smallint, 3::smallint, 0::smallint, 0::smallint, 0::smallint, 664::oid, 664::oid, 0::oid, 0::oid, 0::oid, NULL::real[], '{-0.0215560459}'::real[], NULL::real[], NULL::real[], NULL::real[], array_in('{"k2-0", "k2-101865", "k2-103711", "k2-105320", "k2-107123", "k2-108973", "k2-110904", "k2-112806", "k2-114565", "k2-116424", "k2-118150", "k2-119893", "k2-121550", "k2-123269", "k2-125101", "k2-126939", "k2-128536", "k2-130233", "k2-13213", "k2-134052", "k2-13586", "k2-137633", "k2-139331", "k2-141118", "k2-142963", "k2-144730", "k2-146453", "k2-148286", "k2-150137", "k2-151890", "k2-153715", "k2-155359", "k2-157123", "k2-158902", "k2-160848", "k2-162724", "k2-164467", "k2-166206", "k2-167937", "k2-169585", "k2-171281", "k2-173138", "k2-17472", "k2-176597", "k2-178432", "k2-180264", "k2-18220", "k2-184034", "k2-185835", "k2-187796", "k2-189632", "k2-191336", "k2-193193", "k2-195193", "k2-19709", "k2-198975", "k2-20815", "k2-22507", "k2-24142", "k2-26163", "k2-28038", "k2-29856", "k2-31664", "k2-33407", "k2-3504", "k2-36737", "k2-38429", "k2-40218", "k2-42003", "k2-43929", "k2-45834", "k2-47692", "k2-49523", "k2-5114", "k2-53005", "k2-5480", "k2-56671", "k2-58549", "k2-60416", "k2-62321", "k2-64178", "k2-65836", "k2-67574", "k2-69557", "k2-7122", "k2-72961", "k2-7476", "k2-76485", "k2-78185", "k2-79969", "k2-8177", "k2-83615", "k2-85491", "k2-87421", "k2-8918", "k2-90921", "k2-92664", "k2-94499", "k2-96234", "k2-9818", "k2-99997"}', 'text'::regtype, -1)::anyarray, NULL, NULL, NULL);
DELETE FROM pg_statistic WHERE starelid = 'public.ts2'::regclass AND staattnum = 4;
INSERT INTO pg_statistic VALUES ('public.ts2'::regclass, 4, False::boolean, 0.0953666642::real, 17::integer, -0.904633343::real, 2::smallint, 3::smallint, 0::smallint, 0::smallint, 0::smallint, 664::oid, 664::oid, 0::oid, 0::oid, 0::oid, NULL::real[], '{-0.00539669814}'::real[], NULL::real[], NULL::real[], NULL::real[], array_in('{"00042M25SA9M78IP", "0CUFI66YIPU39SLJ", "0P5T3LHETZGO5817", "1021YU5XIGYPMZD6", "1DKW2I0QMMRQ8NUR", "1QOPVHEO1SZ8HCCR", "229D4VSO304K6TOF", "2E77R8DIVQ23WI67", "2RDP6UWSMRO6DR5D", "35F5K9KOFAPO6L3Q", "3IBJYPRFCF1CGEAW", "3WN4TUFBO8FY07T3", "49HOZ3AAL6SFGSLR", "4MAIKFNJQ3WKOQ9S", "4ZAAMV4CWNY610VM", "5CMPE5YMWA6HH4IF", "5P0NGVQ17WGG2EBD", "62G2UPKXW3845ZUU", "6FEXJMOM8OGJJ85W", "6SDRK17163HYOV5A", "75H3JTPK9PH9HQGJ", "7H9XS59DEV620X1W", "7UAEYV2RAQ1AS8H1", "86JS5RX6DMLDPXT2", "8KJ2UHAH9KX4IRY6", "8YEQEBJ4TCRUZBSN", "9BWUKXFAS4ARNMSM", "9OHD204FC8ZESJ8N", "A1ES7WRFN758K0NU", "AGGNQOYMSTWBBHDH", "ASJ9B9XH82T2QA8W", "B6RDROP84MV27IPG", "BJ41LIXUPDQZJQR7", "BVHXPYYDBE0RHNEG", "C854DDX9ERF4XXFR", "CLDLKEXBWXFHQFVZ", "CXRQAYQOTMUJX2AU", "DCMSMGE0ZQPQ80LL", "DQEF6UETMDE1PK8E", "E3NAMC1UFSVHY5ZL", "EH2JV9LID1BPTEBM", "ESQHI4IA2V69MUT8", "F5FJDJL0BXHOX729", "FI3ADBL0ER0LU05R", "FU1RQNEQUTKYP4KD", "G8FW5DXDYNPHKEHR", "GK2TBSLBJ21M4CYV", "GYVRFPOKBIXXKFXH", "HCAHG4R51X2PU3AF", "HQ4SGQ08NTS3MR1W", "I3VV8Y5MT2RS0SN0", "IGBSI943ER6K11KQ", "IRHUXG3Y6F261YFG", "J4YZJNJQORB1YSWK", "JHF6E93R0ZRGOA3V", "JT4VMON4WSZC4IAY", "K5LF9HCS7XODNF0B", "KJCV3YN7H7RJRDF3", "KV7C03HJ2HTF44GR", "L89NWKNZAIGYJ46S", "LLE2YAKMV5ICYMGX", "LXUKUA9936Y2YXHP", "MAVELJRR9AS23A8A", "MN87SRT3SOOE6ES0", "MZXSKXNAES2QZIGG", "NEO6WJEXV7226XHL", "NRPJAIDCQ2G33KLN", "O5UPFZPFYLF6D8D4", "OIRYD2CCNH9FNZUG", "OV2OBW8G4F9LQX1Y", "P7UYEALX1XVHLVM0", "PJXWV9SI9YGXFJKR", "PX2O0ZQLCHTMCD7J", "QA79S7FW5E333XEG", "QNNHQOPEXL6LIKVD", "R17Y57SRD0LJO3QD", "REB4OTC2DSC2D96B", "RR7QWR7RQ4SXQN5I", "S4H5PSLI0PXOWOQ1", "SHJ1VKY3LGZW4PLV", "SUGBO6WIBTUZB3RO", "T5KRIS8HGKHHXFS2", "THSDUWHJX0Q24T5W", "TUC4JCV05CYBU148", "U6UF6X0JFYA89NB2", "UJMTKZHS1Q9RKM0E", "UWGJJ381Y1G6LZCI", "V9VXY57JHKVDJ3ZG", "VNUFF9FN299BPQ6Z", "VZTUKY5Q4H8E5QF2", "WCULUFP0WSLS3CKQ", "WPFFWJPH8GBPQ2ZV", "X3MTJ5MK8OLFKMMD", "XICW2RTBWIJS528L", "XVD1NVNVAPG4I039", "Y869DH2ATMQZGRPT", "YM2ZBIDM0HS3UNZX", "YZF80U9E3WEI6EMT", "ZC6SNYTXTHP0I7U3", "ZNNGY3F2MO06RMS3", "ZZXQKATMYXOD0IIA"}', 'text'::regtype, -1)::anyarray, NULL, NULL, NULL);
DELETE FROM pg_statistic WHERE starelid = 'public.t3'::regclass AND staattnum = 2;
INSERT INTO pg_statistic VALUES ('public.t3'::regclass, 2, False::boolean, 0::real, 9::integer, -1::real, 2::smallint, 3::smallint, 0::smallint, 0::smallint, 0::smallint, 664::oid, 664::oid, 0::oid, 0::oid, 0::oid, NULL::real[], '{-0.0203118306}'::real[], NULL::real[], NULL::real[], NULL::real[], array_in('{"k2-100003", "k2-104639", "k2-109073", "k2-113083", "k2-117145", "k2-121315", "k2-12584", "k2-130361", "k2-13535", "k2-139793", "k2-144026", "k2-148471", "k2-152608", "k2-156903", "k2-160900", "k2-164957", "k2-169368", "k2-173738", "k2-178035", "k2-182672", "k2-187406", "k2-191798", "k2-195706", "k2-200408", "k2-205104", "k2-209746", "k2-214192", "k2-219032", "k2-223894", "k2-228456", "k2-232968", "k2-237446", "k2-241649", "k2-245923", "k2-250138", "k2-254982", "k2-25943", "k2-263863", "k2-268391", "k2-27279", "k2-277278", "k2-281863", "k2-286089", "k2-290561", "k2-29517", "k2-299506", "k2-304200", "k2-308854", "k2-313787", "k2-318215", "k2-322961", "k2-327887", "k2-332380", "k2-337145", "k2-341375", "k2-345827", "k2-350597", "k2-354760", "k2-359475", "k2-363903", "k2-368642", "k2-373482", "k2-37799", "k2-381984", "k2-386681", "k2-390842", "k2-395384", "k2-399772", "k2-404506", "k2-408862", "k2-41320", "k2-417965", "k2-422541", "k2-427017", "k2-431429", "k2-436414", "k2-441072", "k2-445905", "k2-450128", "k2-455129", "k2-459911", "k2-464489", "k2-468499", "k2-473378", "k2-477869", "k2-482618", "k2-48728", "k2-491819", "k2-496178", "k2-50832", "k2-55372", "k2-59923", "k2-64823", "k2-69288", "k2-73617", "k2-78168", "k2-82339", "k2-86671", "k2-90783", "k2-95298", "k2-9998"}', 'text'::regtype, -1)::anyarray, NULL, NULL, NULL);
DELETE FROM pg_statistic WHERE starelid = 'public.t3'::regclass AND staattnum = 4;
INSERT INTO pg_statistic VALUES ('public.t3'::regclass, 4, False::boolean, 0::real, 516::integer, -1::real, 2::smallint, 3::smallint, 0::smallint, 0::smallint, 0::smallint, 664::oid, 664::oid, 0::oid, 0::oid, 0::oid, NULL::real[], '{0.000505192031}'::real[], NULL::real[], NULL::real[], NULL::real[], array_in('{}', 'text'::regtype, -1)::anyarray, NULL, NULL, NULL);
DELETE FROM pg_statistic WHERE starelid = 'public.t2'::regclass AND staattnum = 2;
INSERT INTO pg_statistic VALUES ('public.t2'::regclass, 2, False::boolean, 0::real, 9::integer, -1::real, 2::smallint, 3::smallint, 0::smallint, 0::smallint, 0::smallint, 664::oid, 664::oid, 0::oid, 0::oid, 0::oid, NULL::real[], '{-0.0183708128}'::real[], NULL::real[], NULL::real[], NULL::real[], array_in('{"k2-100017", "k2-104831", "k2-109561", "k2-113646", "k2-118186", "k2-122884", "k2-127200", "k2-131060", "k2-135301", "k2-139812", "k2-144312", "k2-148810", "k2-1532", "k2-157460", "k2-161911", "k2-16666", "k2-171394", "k2-176049", "k2-180682", "k2-184917", "k2-189572", "k2-19405", "k2-198580", "k2-202926", "k2-207553", "k2-211775", "k2-216103", "k2-220752", "k2-225222", "k2-229783", "k2-234802", "k2-239478", "k2-244181", "k2-248362", "k2-253058", "k2-257389", "k2-262228", "k2-267004", "k2-271155", "k2-275511", "k2-280106", "k2-284642", "k2-28960", "k2-294485", "k2-299337", "k2-303673", "k2-308115", "k2-312744", "k2-317335", "k2-322006", "k2-326042", "k2-330863", "k2-335372", "k2-33980", "k2-344211", "k2-348426", "k2-353463", "k2-357828", "k2-362300", "k2-366948", "k2-371400", "k2-375622", "k2-380250", "k2-384641", "k2-388974", "k2-393542", "k2-398457", "k2-403173", "k2-407863", "k2-412104", "k2-416987", "k2-421294", "k2-425386", "k2-430197", "k2-434904", "k2-439211", "k2-443634", "k2-447992", "k2-452906", "k2-457456", "k2-462060", "k2-466417", "k2-471275", "k2-475463", "k2-479966", "k2-484727", "k2-48909", "k2-493181", "k2-497854", "k2-52444", "k2-56813", "k2-61135", "k2-65753", "k2-69670", "k2-74127", "k2-78575", "k2-83024", "k2-87103", "k2-91102", "k2-95362", "k2-99984"}', 'text'::regtype, -1)::anyarray, NULL, NULL, NULL);
DELETE FROM pg_statistic WHERE starelid = 'public.t2'::regclass AND staattnum = 4;
INSERT INTO pg_statistic VALUES ('public.t2'::regclass, 4, False::boolean, 0::real, 132::integer, -1::real, 2::smallint, 3::smallint, 0::smallint, 0::smallint, 0::smallint, 664::oid, 664::oid, 0::oid, 0::oid, 0::oid, NULL::real[], '{-0.0061623971}'::real[], NULL::real[], NULL::real[], NULL::real[], array_in('{"0003OX9K28G6IBGDPY11OB5OU67TZJ5I7ED52JHTK1AUQKNCSYIIMF6F9IOU71RWWKP74JPQ53R1KPSLJKTMKZJE8TEO4CUNBRVCDKNMFBIVOPJKPC179J8HYIWKNEQI", "0EE5GII4O8DERGHYGZAB3YB9VBU4Q7TNVVZ1SVPAH8DRZE03OEVA37NGF8DQX21NEJSYA50TPLXN3KE9UOEN6G06FI5ZTP2DEWZD9O5K8DI5239ATP6SAVWIP4U6GIWR", "0RC4P8J1RSS9IBPOKAG873ODRVV70SGYRJ2NBBRV0A4675OOR4A94JJ4SDWXJBG3PTWEF17VSXYTZBS2UIC1O199W6GCVL98PI1O604H7UMVAE4VXN44TN6TFGPNNHKI", "12M4DJHC3IDQ3ORX0JNHUWEHTYDTNJV8KVSZWG6RYRQ4ZNMY8SMSJXFSTEC5VU2GJWK780LCGFEGDGNZZA16FJMSX4YBIPF3RWCLXN7SS2VLJNQ0JP0TVY2NS49373FW", "1ESHAXKMA030MFL561JC8R9PS5MD6LL2UXCS9J3S4B1TXZ40LTBLPCSZPGIAJ9H5JL9DBKXTSMJF3OVCHX9QMRGB648KLR5Z7W5PZKHCJF8RGIQ8MTZK8UTZM0HHA7JC", "1SGM832SP47N941KZSXHJ93IRVN0SAJIM7E11I545XYHVU73R59VLCHI8NPTSNLA528NACIX2S0PG2KV9A13WL56E8TY5FM5F4MWB59F0HGSEJ339PN1L7DA3GD6H8IF", "24MIIN8ZLN7IR9MVAT4OGF5PBG1TMIF2ZB1YFIHNY57JAUUCSONW74S05PZ68I71RLGYO053ORJW371PTLUHIIAW4HRX0N7FY1Z8CMP1ZEY0JRKVJR046KKLCD6IBCA5", "2HXHPNRFYZO785820F214WDIYL8705XNT3KWBI2EKVTGMNRHBKU0KDNROG6XQ45K0QNV9P7ZL1I6WXGT8QBDSC1VGEP9Y9GQZ70H3F92XP2SU096HJVLU3KIWRLT8HN8", "2V8JW9OCH8HV5FKDCEBYVICMYCU4ZFEMJI4UA1EMLI2DL13CZTUM2WVPEP3GV7X5OJN2VUKBGTG0C4JH0Q38EJNT1JEE0JAXP3YT5M5G8P93PDHW5BY3XEKLWJSJWJGF", "380IAGLZXJ8MAITHGQQR6EBMCA6L6J2DOUQLN5X8Q6ZQQEKPGIY1JQKNUBYBZKKUJ4V2IEE1XX89EGAQ0IIQRTTA6HFTOPTML791FYGWQ3VT9C4NIU9E2SZI1LLM1NAG", "3KAVDR3X6ERERWCB65TD2K4TF77E3YA479JPDL40TTVKY07EYAMSW6ZY5K3BSMCIQQ25LBQ8YGOITZNJH4QUBKZXR7D9RYZCF3QER7G4TL2M7YZFMMUUKLW6TLRCHA47", "3WOMYNU1ATEA612K6FZSLJCWF0XMZGESE8FEF7QTYK6XZ8TQOWN02UEQRU21U4ABYAW8G5P2Y5FP4U9F0Y9C8DKY9I8P7ZHY8UKCG6K5M5UZTRYPZW00P4XW1MLVEL47", "4A1CHUP0FHD5Q1MHI1S3RFGIYLQ1LSUZJJ2H3UC6YHJANULWIT70PXVN3YBYSCS98GLPIJIJIPYCMLJOOCA2U8P7QGN3WVITWJRQUUXJG0AP28YI5XPS57XKRHYJDOQE", "4MTTXUHOLG0XB8S0B5Y1SMC2JFTD3X2R7IM3DQPEJWYQM1XQSMYBORNGWQ7UCL9JNE85TY4IWKL0CJ1CUK0XOVEJQV6W463CQ3BLJAJWITR7T4Y4JJT0RP1L2WISXMKY", "52S61KH9DKEWZKZWKYEOJR0ZV19V75738QCXM48A1NOV81UD0PSHKTKTD9EXJFL1FWVGNEBTICPB81RXMH1BACJ684J677MI08IWFCJJJQC5VL4U1GOVGU5635BCMWKL", "5EWX8T9Q14J6UUZCRMKS338HG7E31SOSQ8LY6WS6FDBTPVMG4HK34OHX1GZONG4AXSPN34ZBVTZM3R9FT3WG5M0XGYSV8OLYXDKB4F0ATGXHX9YU56AMTU0JZV3VGFMV", "5T8BJ945AKUHZV1Z6J0KE7IBY5NJAJSYUF31NTQMP0YCJBA9QY4NYJ1P1R5WURST8095QEMHA6BPG0VAJ787ND76AQ3KL5614M5KJ47UQS36K57J5JB7DZMFVLM9O94D", "67CS2933RSN5TKH49BO7932AS2H3EXU7OIY5HEFT1YROWUWQ2N3W8S8PB0L3GMI0MIG9XLRJ1POOYXW3NTILKUXESZOW26GZJGYX6YB7GJ6Q8BLZ2BHTAFIR1USOEB16", "6JTKYFUJIU5NMF30ECKYGVCDKKV9ZJYDKKLCRGN8W61MH38FR9PEE1EKV863HAYVX4F84LS3I9U8EF3CB07ESV3GBR2IPETJQTFNDKXF5DB2V9QWP8O0J4X8KOII5C56", "6VXEJII3OC1KS6Y9AN7RTPDIWTRRZL1SH18CR5G7J17ZCTHNA3SDU3TJL9O03UF68G8T5MAOSHKZY0PPLPDWSRLON5FXX69M89Q7UCM1VNIQU6SDQ0H9R0419H6IH9HY", "797VFTMVK4IQS1JDA9AYAX41CGDGGMAPY44B7PUDHH2VXT7QY03MN0DVLE9Z3PWDQQDSWJTFE6JIFRRUPDDUEGQUNWIIO8YJAD2PP3DKW6NC22N6QL6PX8Q7F71MASF5", "7LON0LG3GZ6RH4SWLE0BB35K0IHJXS4GVIKM8M2CRSY4Z77EKOVJ062TW1L4PST6OD9QZCORADGAQW5DCL1E5QE4NGUVL05RHOZ06SR5ANT4TJ3E7FPMK14GOERHG5QS", "7X6VDXJMDFVXL3RLML2DBIWKY2MW4N2G8YJLQNWU08XNHTA08DP4FKDBC2QE7O499JBFZH4H9N1IEHUVFH9HPBVC948TU2Y2B7Z4WYXSRP43A6U11K563PDP336WP3HA", "8ABF88HVCLRG2D333ZZMC7UHN7O16VZCPG0PGRLIIQD2MKN8WD5HBO3R0DWFPXVYXPX1ORCEJ8SKH3NUJCJRC86277JSYNZJAIH77OSR2J73M6XYZSD5BJLY5IZIJRIJ", "8M5WI3X4DX55YF92MAQH8XT4IFS6L2RMQGHYUZDLZ3E5TDT41TL6WBNKJ6IK26EUSVXJSD4731ADMR7QEDZ04D42SKHSOWF15BN2FKV4AQ90RUXTZMM5M1LTGJ6XDSNK", "8XWC09B7PLOPPPHNEZAYMPPTXIGQ92IXCKUJQN5LQB2EGWJEDOLLP83CI9UVHWB4WYJBXNAVGNXJL6JE54KXBJ5WX861EU4WW1F1OLQ7H57XIPBTSKH6DTTRPZB94LJU", "9AI2ZWBJAK9EKHCBWUL1WI64H1Y8ALIPBU7CM0BXTTFTY5A2225FG24GGJRMWLW01Q4GY86P28DHWPX0XLM8L3UIQTMUQIV0XFGY9M1L2ANN3IA42I3U2Z2MAX1X35I2", "9N8PVLZAO4E3SBVPYHEU76ZG20ZCG2P1YQBS2HGAQMXZN16P42DN2TP5OI4UHDZIKLJHO9JQVSKLUB378RYHX3POA0DNORIUL6EDZ0V9RS4HY05BPF0TYQW1L2CA8Q4C", "A00P6OQE2SGOY7NTH7K895VSHOGH338XSOD4OIRPSII7BK84QWV53230KU6TAAJINH9ICXSL0IVDNWWY3MWX8MF4MIR75U1CF73OA7M3TV08XAPK42TIM7DFHC9AY4LO", "ADE1KUGKGDFGS8MKD0EV3NUUZM2PYOBC2PM0P9RDU23I3JUTFNUHQSD3PK1SJCT087BP39IMLEAUOV6YHFXP9SGR5L9C6IPZDDIYQBE2KSU46UHN4HQG1D31LI3ZVZID", "AOI9WRKBQ6LMGMCOZ88936H79R23D1N5ELQNHG7MNG5AOWGH23NF1IRVVZI4YEH861ZJ3BB7SH2980UNSTJHJHAJR0UBRK3KZNYYCYQG2ZD2Z2ALIW4YEYSYA4BMKZDV", "B0WWZMPVYVIPZ3NX10G6SZQ8TLLOKD68EGZ88AI94W41T92WDZLTXIQRRCJFEJ8N4F99145UL1TOG6LNUIL0PRQF5BBREJW68LVNQB2YIIK6YV0MVOUUPZWJSW6QA1X5", "BCO6AXKGPJWTSFG634B4LT8Q8H0ZC7HYF6QJOZHUO41IGIBW54ESUNYCXXE0G9Z3TMHFZ6BLA1Z9M1UVQVH6ANZJPX58X58TMRHEYQCMI6NAPAQAORWP7A5SVBTTWHL6", "BP4I94CVZK5Z09AS79L7HLYOLVDVOPIF2CIU1EPU2D3Y473WKDSZWR21JX0JTOLARH0K6O5ZKIQRO5O94HT1WXHDCJR1VXLYH4U25I8COMIRA7ZH085SGLQ1D8P5TBCZ", "C2U4FN0ATQMI3UD179DQ8UFBXOHH4V2N2NACBKHOUM4CPIU5W1RV9867JGOINN8IQC9ZKHHIZ5MEKYXAL0TF7Z0413M64RHIG4Y1W3ASR90WKU6Q3D5NXC4I7JDHM2VA", "CG52LFXQVRPCVOELPRA0BNB0CB9FWCT0KXXGYKPZJVR3SB64N5VCCPLG9BU283DSRRRGT6620SLK8H9GTSYP5HTD21V3LIHLVH0EQ8DULZZC5H0FKWAEXQUSIBLOSP5P", "CSSCC4P9SSFUM484MACJAWWIHM1UQQS5L6R2NX48AKKYIQMXXZ305O5PYHQWXJAVOUXN4RG7T3PNWXONUZBXSQ4USXJGDZA81KW8L28CXXD49BNLYIW2BLPUXQGNFQ0Y", "D600PX52I60FFZQ6F0Z4X9UY350MF5SS8OUS1ZPI710PRA4N3UVF5FVIMJ5KHGX0H4WLW5ZSTHRXZKYJIJ5V9IFJEB90CSTDPICWGPMKG0UM1ODZL6QIAF7EZBHCF83W", "DJQ9HW1NYRBQSN5G5KCB3KXTTH88NPNBVMLR6HZXTDIIFVVR3AXB0WPMSJ2W1VSKDQRMR781RX5ZQIKYKM4K7YQOJGL3JHIG3MEHBJEFISIEHO7W5QKL72Z6LHNGF1MA", "DXHGDEJ34AM51MNC8PPQ9IIDOUCAOH3J7TT7EF161GRIKX28YLK83LJVZPT1HX9JF6XLRC667XER1D04RVU7E00BHJ672RNSX634R8BT1OLTHGL8XH57UQJAM52ZRK2S", "EAP0WTR1WEVR4B0LSQLWC26VKC8YD1IE33GKIYMK4VV5Q6W083DKG3443PD335HT3GNFGN3Y96ASLSFEV8PHXPH249KRJJGLN6AW6Y0O65U4R6LZQP8E4JAQCQ630KQL", "ENMRPYWS8F2ECXS3B66PN8HL8YUZSEK6F873C4K49Y63U9RNI14B8139J36LQTMYMADY3PJQ2UQ887113T0JH88ZWK5CGHEQZWUZHSPRYZ4Y3T952V6VX87QVZR1CHAR", "F03FTQ08MLRFZJLQJ6KWXRR3T0SBK0QN9WQTD4IPZ2V12D63XTMLM416T91ZT06WYZEXH5UCOTB4UQ1AHAYE4SCOB1VVTZ9TMQXPMGADUN2EI63C7LG6NOW4E6R5G7RH", "FCBAJGDUTISGZMPLK9VI7SG8D1USMJPIGKPQJQEF97I31EF91PCBS969CE6HEQBBBM4HZ01YC49EQ9TKWJ3Z90OV0XTPWJ5AUIP89WXX8I1ZMB2EQZ6G1YQDWY75Y91O", "FOITORE0N26RSDDO1YG4S5G3K5Q0R3W9H1SKGTSP5H4ENGXU0P4XZW7Q0FJFW1FODIIZ5Z33E0CI1SIHYV8AP3RN2F78U7M39NWMOVMRII5PL82F2CF0CNXYFKAWV6GK", "G1P0HPS8WQRQJL7N7KXUKFTYVFCHPF9XCX7YYIZ2CDRV1ZV6TQLZF655QI0F22N7RS4JPJEV5IVF5YRN2K66O9JSCJB0FZJZEJQVGG5E0HI9FD79P6ZA14LPUXV9ZJ2O", "GFH2OZL3M7DM7K8PURWL7ZMVHIE7ITNZFWQV4GZSKQH2LZDCU7LQSUQGG9T695YLRNMXFS8SYAMI7ZSSOT6UY12Q3SCPNJTZN4D7YD9D1IY90263SKLCFVQTE8NKQYER", "GSNNVZ2A0GD55GWM83K72QQ0Y0OEFKXLOF3PJTBO98A1WGW3KDXECFCSJ019WV1BIM07Q4W5VODBZ8S5DU2L5B9L5MCYHM5LQ6Y1I2F2UV03CBZ71KVEK9QDGX4P7IW4", "H5SGK1834LU2OBIQRVEUO4DGLHQO1WSS5H6FE7FMVS99GAU8KHTQBEFXVSZ8AS21Y59TXGZ3O8QAPEOG8TBTLB1PTA4FA1L0JAKYX8K7FM10T8SAZNT9XVKLMMPMK7ZQ", "HJZBAIR7IAQOYTLT6NUTN0IJXA48A2IOECQ4A7BWUUQ447NMUYOWW4RU2U57AY5X2DGKUTVPW3UZDB0UJ1WUC56F97TF811CT07GJ95OV4HF5W9P6I73XDGOI77LCQGK", "HXCXZJV45WWBHI51LUYZRCUVJOT5HN7MDR2ZLYGK6R3BZDLYFOI0RVZT9VKQICSRY8HGREGEAM4VHDH57ZESTTWYLQ65G3OH3EYGY1BUVYR672PS5U1X4PRMED0U25S1", "I8HFNTNSUGLPYH0N9255MPG751HHICVYVJTYOKQ0P7OTKZR4UN8UL83KVM2KNAVAXFHP7D5784NI67PH1IQ41LTE4TXRK8Z82U2G9JK8AOIL44ANAV3TZT8NURMKWLMH", "IMDSGJR4HD2O9TH0URY6WC31D345PAY07HCRFP94V4USDUE4RHWHNF5NVSEUWLT70SKJ09F8BCDCZGHIVCHUX53OVHWX7XWY6CUP6D0LQXE8IOQNK0SOZXI1BOY4RWG4", "IZEG4MF2KKE939M6GBXM5ZLI90SQESWJTEVFWKEV6C8EFAGW5R8U6FSZ59WT8YHGAM9D2LDL5NS61MBA36A807E59O46R7GRNU27E331EL0B3O79FF7AC8JLS27PECHL", "JD3K6D60VO29ENHG9GJE1U1O4AGB1EU94EH10KX08KW3FK53IVJHMVQ4XV7N8YX0SKWD7777XXR57Y27FXLUBKT27KT8WITBCU04I1XDG95SVEM2JNUI2VBJ1AK5S8FK", "JQ03NFG1QEIAHBYBG6HKQJ7QXCEDORZA0H84DC6CK707XUTUQP6DW68IC9VMHDGEK477DNHCVJCOR9T06QBMSQ5LPKNO9RZKRNYU339ZST9VH9ALFLA2HEBMQL0D2KQ7", "K2MVMA39A33M18P95AHWCYDMWN2C9P2A3SLV0BHHSPP6EFG7D8I7TF5PNYKALYCB76RS3NWLWTBF5R4X0BA9I26AD464APWNZAJWCU6TK3R9COC3OYZPR4VLJ9GCHNFJ", "KG4PAGHEXZS102TKF05DWWWT2A12LO8E3MOX4A8Y5PUOGLA5K936NW3JAZ0SOVNFBAGXCFNLTLM2KYV3ZQ19R9089RRVKQLM2NQNVCRXTY00A7NPMOV1YR18SKRZV78X", "KSKB425XDDAOYYG16JJCTE5Y35F3E4XBOTKX93XQQJ1ZUVH23C4FI41L9KCWIW5BHQTC2ZZOU9ZSFXLKYEK4440TTX526P14KPDDKOW9S12HU9LQ6Z27NOQQK3TN1W1Z", "L62YR3LBJI1NW4E96QTTO63M8IPSTHGOEXD68JIXFQZKJ0R7NJX9DF5NHX39A6RN8RL2X7I53CLYQ3K6V8BPG8YA5QAPPAIYIOS76T1D7SD17336XE7W077T4QYK6GT4", "LHHA1ZIYVEMFGZVGTQTWTHD81Y6N0NAJT5MH1CEB9RC4A6LF1BYUYZ9MUCQQNYDW38ZI7ZU1THXXKH9G9CIE6XJJGTJF5ZTNABZ8WPQHE6M2WZN6ZNSMJ52TCBLX18NG", "LURFHB2H3JM4BMNYU13O163L37NUOBNLBHFEZ1KRLG2P7TWHWHEK2MNV8CZVMKD02A8C3BPCHO53A3CN24MOHAP8SB0B06PYJHLE8N0SSP5KB9Z6P0QIO2Q5AGA5PYQD", "M7TMRUN9M6N1G2PY65SIU0AVHYNF43ERSURALDB15BKK5PVS7V3CDEJOV8PLCBQ05VPTOSJV8YR953DXACGPYM2TY4YJUMFYPZV2STJOHVTZ60G3WA610V5837VUTEBW", "MLF7GMRV7H2RSPII55ZY3YNFO3G842PDY2F3ADMTJ4JG1S35GKG027MYCVB073V7HC69YR2JSSMTGVWOJ9NBVQRMOVVQU8EVHAOHAKDB105GGJ5JO312JHOHAUM9GJTT", "MYW8X374FOLOD7E31DLTY61LSM605ZL42I4ECZHVZ60O62OFXEDMA99TK8FEJC0I0PQG5BQPLHZINYLO85UHRJ0YJ35GEEFBFZD77RSFCVUI36MTT7FOA91H0VCOFEPA", "NBPYA6X9G4S9U7LQXJ2DA4MX1Z6ZH11179THKP987AQJ4O36SNGM580H8W065WZH2FAKGKVQXSN9QCRQINDL1JPS5ROHUBPRBS2D0HXTQ6IRMPSLIHSYD78I59OJYHCR", "NOPUHIP2JDIZKFIKXL1XSFPHFD1CYARB9GN72MP1OR22IXSYY0817LTJ4LYGGCSKPGO7RRRHTA2GLLDK5L693PRFCLO6DN6UQ99385YVU7M0FL8TUJ2Y5CEWAZ3LJ1JT", "O1PPEER4PW37HLOJH4UDD05L7PDJ7A0XVZMGXITD5XVF9ORB74K6P63GC17EVNWLLEU88WCNGH84DU6K4F1UECBNB0JCXWZZVMSQHYXBFDGQLZ15GEBKWULXN6YNXN7G", "OE4CC7BP8086J24W8KEV6MWPPA2939YQNT1VY6B2RER72WGD94JLTWZMGRX9UDVGERJ3E6PDPGJKEZSYA0GITGDYSBM27PJJD33GV3LDMR5GY1QFJKTRFQ44K815XIQV", "OS1DM4ZXHS59Y7WRDMAOZ3Z1HLM11AV5W659CP3G48CDEM17XN7FAPI4E5LPIJI0SANLBUD5RC8SXIHFUOV2U8447GFXRNDI96KNFA3VW6XQEK46GJMTP75IVJ9HW453", "P5PL3I2AUYKQ4MW6X50RGVXXZJXZ6RC19A7BQ55B2L3KTNS2TY5GV1B9BUTK6O8CXXFKUUV4ZEM7BMB4278L3U1RF9NKEGL1I53EC9XW0DTASX1Y548SFCLBJZID43JC", "PGBY4N78JC0WC3BSES2BXLJXCBED4M4AP0LHYZPHHKXNTOC7AKDKKR5YSXM2XVLBFD4TN28XJC0GE8K5BLKIY8ZGVZSI3YR6JWU8PJB2BTE8CRIQ11O1RRE0AL8K4ZZQ", "PT74HR6MMOLR655K61WKY44KO1DJTQSY5QZB28N06Z5JBLXHDU57DOK0OSVSO1EEQQIQF1WOGGXDKO0ZIIFLSP92QI6W6ZOD2CYUW4BE0654B8S4AATU3PQZDV5LMJ6I", "Q5T7FHT1E19MSO9NKCZROCER9CFVW92EE52JVPGTLFZV9XV9F772YDS06SZMT8UOFRW5PBERKC3Y2YWDTAEU6KI7KLWTDV411G41W5U5I117EDZV3KJ9SJHV4S52NZTO", "QILN10IR2LH67CMFTIYF6OY3TRJ5JFOR9ZX978QXNGGEEPRHDDU8LV136ULU57SYO7LV1GO6SSV4HM0VW57N0P3MIXJMQ3X064Y5IQMR0Z1WM8OVNYBIV2K63NB7PX63", "QVI1RN6PCQ0X2DJH29HOYZFQLBF1VCWLAWD37JTI68YT0K3KZWRY743B4HA98E0ES3GOZSZHKPRURVJJHDJ7AGZLOZRRK5TBZPF1GPQIGTAQOKRJWYZMFF2ICNXOPVO3", "R7VU92OCJIKY6V8YOOI9C64CLPLURWRJT6TW8ROLDPZFN1XQUZK2A0GXP1J2UBU94OJ3A1WGPP3AZ2JBSHZPEZZMQTF8A3FNDVXFE7OP5QR0LUZPMNEP5QYFS7Q6CHQS", "RL71ZOTJ6O494EIBTCCXPHEOZWL40C42UMOMXI6RFYHPZ98L5DBNEP6YP0T47K4RRUZS9TYSYJUJP767OZJ68TFD6UYCQ6CNSNOZWJUWI0I6D6SBYYDISLIKB4V6VDMD", "RWNU7D41HBJK0UPSRA4DWTET90PODKMWD1RZHRBNKRWGF2XZNNRM6EB73WJO3J3LDJMVJJTAYVBFHH4D151M1ZT6YR517GDSHPJP59BNCEYS7WHMS3FOE8H9Q4R1IZBH", "SAIP42QH8HKZXDW3NAEQH2AX6UG1SARQTFBKFXMGFNLUG8XA81IMF9UNEO8ZFNNGK5YRAMO5U896VJYPQKIBSE1MYAT2L9Y9XW1AN63GYCPYWD30W98FOL0ON3369VDS", "SNFXTJN4WO7IHY3BJ8SIBRH541OQ9GFRGZ1MBBR3LTA36PKCHLAQZBMP6NQ82Q3KDPIJEQXNKHTSDPTIV4H4LDIKC1B1TFQ9AXSFTF1B1HQ9AFVSQJFF08SAZPVYI2MN", "SZSL458NWKE0E5KX4RALKSPXXQAM3VJVZOVO0VTF44ZIFFKNKGC2KQNI2CV1JYN32XD73API6TRCAUIAN71PA93FE3NDYIYRX4HL9P9PBRYP7FEGQ7TGU074RJF23CEC", "TCM2FS0KR82Y9TAUO7HRGFB08ITO6O3SF627KOH4G7LXU3U30KI9LA60GQZF0KDKE8RVOZMI37J6VW2X46ZMH5XZMC6NP4O3XPLHN9VSSR9S22M46CBM5N9JX8W3TG2A", "TR58TODDG9MLCSSDQCRQWNJ5RMEQIMSCPCT1BXIAOB797IAHJSSY42GIX9T4BIC9MHJMNUSTYI8HO5EN4W96UMCN9CWDG0534KH0V1AVKVBR0DQ12W4R6MSIEV1U3L85", "U4J7ZRIDK9PMRW0D31FN1Q4XRSYILHZ38OM2950JMTXDM09D6REGOEOEAUBISCDE1O32WQ0O2DJ74X5CPHB946HCBJ3BR66EBW0NGAO8Q934UQMUWCE6PANS3DN24XWK", "UGHNQFKF60ES2JC5D8HOCMF00YFLKNAQRIYJ9LOD3T6H28V0K7G0EKBS6VC2KE4XRTAPR50E307BYGN8EIVIEMO5BGDQ94OE6VR6VM7JCWX3FIXYO9BY2UDDZO59BDI7", "UVPJ5WCLQWFY5XPETMOVHIO0I0D769DYL0DWCDDZ1W7QI4W66777HRK2MVZOUGFC57M0OLZKOHJAD6DEBIJMQHH3FQ094DP371IA1S37S4JAEOOPYA3UZB637DBE0GQ1", "V7R3JZ2JV6DGRIXRSQ76BCOWU3WXYOB5XTWBNLYYWHJXNVWZO6O2P6FT867Q7GICN0XPQK9SNWXE6D0AJKOJ2PFUYYRAWY7ZVMRDX1PBFQSEH0AGR7I2HORQ32I2Z120", "VLJVGMED5B7NK2KFH231MJE4LED7EYT8OAN9D0FQCF0OJWI75VNA602K4C61YKRU0U4RIWKGY1L0DVSAVM9U76YEURPOH1TCEYE6F827PRV2PVOAQBPYFNN8BOX9UEPT", "VYRIY2Y1USG81IIWIJ6R7ARJY070SL4OCATORWHJIPBSE00O0XTJ2T1JQ0V4TKBKZQ06N84XJUJ3KEYQDSQIY6RZANWI9Y3R3RUC8VH68D3W6P4KKK5YB8YBFVDN7VTZ", "WBJT7D5GAVKCG81LT38EECL9KDIP28YLWOERUZG2X5B6IVXAQJE8A4IBYBECMKZ8RAKI5X1402LBXCLR3LLDKO71LVY509J9I0QOCUT08KNBHE0OYDSW0YL1LB6BMORT", "WOUVRNPRN9WV91YXSUGPMPKY8AU7DLRQXT6JBWQN9TU4A6F166QZVJ69Y3O6DAZBWBAG2EXHRS16SP4NM3YJCWZWDRYK94PEESOTA5VRLRM111MQIUBD8FFUELK7XFWN", "X170A30OV8VQ9UT1XJ3E3376GCXIIUPVTJ558LWKX4N8OTYM51ZDF9OMIJU8MIAZY6C9FRWRLDPL9H3SX0U55WZ4IRRGP6B1LA50QXCFHCN62OEU0UMJQ4YTKEK11Z0D", "XE3NRKQDS2A1QNA6IGYZEE53W90Q20QOQBCTSOSY7EQQNSGLZ40TSL9WF9W40BJIPQZ4RX1JJQ895B05NTF2V3NF2O0IJZNF7PI456Y90C1EIK0TD9C6H5S8LONGV4M8", "XSZW0RFKXUOCR2SK19WZZ1GCUISPSIGJIKUVVZXI9IOGDRGB8RPJI9R4VSK9BUIE4SS9LPXKRYHTPFSJVJRZBA5FD9KJHQCIV50FJFYQOO3O0Z3TIA0DRBA8404W395V", "Y6K9IDP6IPPGV9OXHRJISMYSLI4Z6K2JVDZ3IKT0ZSZGF4ZKC8NTCE1H1W94VYWID1Q6XPUP8A0HUT4I1EZJ4G9HEWVPQRENZAGHFYO2B32VK82I48ZFYZM1SLJC2QK8", "YJDPO3L3GD4JKDBVW78JVFTMS487AMYKQ4R39HX5EIF1F8H6FKLZWTM3B4JP5L0UNB0YWEJW5T9XLE9UA7YLCSL4458AVF0KQA1IP6DVGMVIMCXN05LP5785W0656BV1", "YWTMDVFJLHWTXEXSTSTF0M0RFS6Q8PSI22PNST4B04U1T2VEIHSUP115YQ4GLVIW76FQVPQSAXK01QK81VD05L518PCALTQMLI0WDEMRFUA4M6WS3WCTFAQB3RYUWK9Q", "ZA7ZSA9CR0Z69WXN37Q88R5ZU5233BJNRMMVY3FIF9PCWCUOJTNUU69BGJZJ9MM0VWD8LEKRUH6V50KFVA8VWU080H6SMQOA2PHVQPJY47R579JJEP4Z4ABSOBM0CKXQ", "ZNVOE6UCXLZR6XIR53L7PGT84YYKX7LSRE84LLJ7Y6ZEZKMG9WK81OLIXAK445CF364YBXSBK22W2KT6YQTTW4Q4IIUISZD5XTKCAIK5LX20N0LUZWB44P4SR8HPCPM0", "ZZZPJVTYX1PSAUNDS5K1HI6VHZNCMB596NDA3S1WDURYOR7AI44M1IVPDV7VL00FZBNZNLBNJG7AIAWNRCJQ5ENAHGQPANIRQLTOL039UL0WPG5LFYVBQX9UJRHICZXM"}', 'text'::regtype, -1)::anyarray, NULL, NULL, NULL);
DELETE FROM pg_statistic WHERE starelid = 'public.t1'::regclass AND staattnum = 2;
INSERT INTO pg_statistic VALUES ('public.t1'::regclass, 2, False::boolean, 0::real, 9::integer, -1::real, 2::smallint, 3::smallint, 0::smallint, 0::smallint, 0::smallint, 664::oid, 664::oid, 0::oid, 0::oid, 0::oid, NULL::real[], '{-0.0346043073}'::real[], NULL::real[], NULL::real[], NULL::real[], array_in('{"k2-10", "k2-104745", "k2-108758", "k2-113296", "k2-117924", "k2-122829", "k2-127238", "k2-131615", "k2-136174", "k2-140397", "k2-144704", "k2-148614", "k2-153091", "k2-157463", "k2-1618", "k2-166346", "k2-170475", "k2-174746", "k2-179681", "k2-184099", "k2-188403", "k2-192655", "k2-197355", "k2-202002", "k2-206755", "k2-21143", "k2-215655", "k2-220251", "k2-224792", "k2-229872", "k2-234309", "k2-238919", "k2-24313", "k2-24712", "k2-2517", "k2-256327", "k2-260499", "k2-265355", "k2-269638", "k2-274017", "k2-278309", "k2-282355", "k2-286916", "k2-291534", "k2-2960", "k2-300531", "k2-305321", "k2-3097", "k2-314868", "k2-318976", "k2-323889", "k2-328569", "k2-333159", "k2-337648", "k2-342305", "k2-34666", "k2-350857", "k2-355724", "k2-360433", "k2-364723", "k2-36958", "k2-373862", "k2-378355", "k2-383186", "k2-387084", "k2-391371", "k2-395783", "k2-400496", "k2-405224", "k2-409580", "k2-414108", "k2-418623", "k2-423398", "k2-428193", "k2-43272", "k2-437087", "k2-441542", "k2-446452", "k2-450892", "k2-455223", "k2-459707", "k2-46433", "k2-468412", "k2-47294", "k2-477542", "k2-482036", "k2-486324", "k2-490684", "k2-495436", "k2-50459", "k2-54761", "k2-59305", "k2-64344", "k2-68675", "k2-73327", "k2-77536", "k2-82185", "k2-86672", "k2-91072", "k2-95480", "k2-99994"}', 'text'::regtype, -1)::anyarray, NULL, NULL, NULL);
DELETE FROM pg_statistic WHERE starelid = 'public.t1'::regclass AND staattnum = 4;
INSERT INTO pg_statistic VALUES ('public.t1'::regclass, 4, False::boolean, 0::real, 17::integer, -1::real, 2::smallint, 3::smallint, 0::smallint, 0::smallint, 0::smallint, 664::oid, 664::oid, 0::oid, 0::oid, 0::oid, NULL::real[], '{-0.010885518}'::real[], NULL::real[], NULL::real[], NULL::real[], array_in('{"000ASFQ9KPQPWBCQ", "0DNX4XC3E7GEDDDN", "0Q16IZZTHNPPXLC5", "12WHJPHNPEN2OCEW", "1GKNYZHY0B1CVIET", "1TC5HGV6LOHLQTPV", "26TNF6BUW4EKS8DX", "2K7B1RIBAWFLY8V5", "2XC41II3WW3B2XGM", "3A9Q8W1NYWRFAM3C", "3M65HLMXJ1H33O5G", "3YRKK47PLYVN6G7R", "4A7XS2LQ9P5X8YZ0", "4O8MOZCYXJ5T5IYF", "52C00QSK7QC63UJL", "5EX18Z2LW03QOII0", "5R3B7680PLKHCSRD", "64T0GLMSOQIHEFDD", "6GJHW2AJPDDWMR30", "6TAJA50TLESR4BQW", "75L4F6TXKGALFHDC", "7IOD0XY6VKZTRT7A", "7WG3ONC3CZSOWZK4", "88T0KGGG6UZA24O7", "8KXBEVKX1I8M2YVW", "8XHPQKBGYQS9UGIP", "99MLZHP6EXPLR7KA", "9LXGJ575N3ONF8S1", "9ZPNVKKZMOB4XOY9", "AB6IHYQD13REDV2H", "AN2LYP44G3H66A1X", "AZXSBUD2IPQTYI9A", "BEU76BEZQU2EL1PN", "BRGRH53WRMGLQORI", "C4N5E1IUS7POP4EJ", "CHU6UQ2U2C4LZGI9", "CUU7VD3XRVHCMYDW", "D7J97SJEPUWJYTER", "DKQNODKIDOFJ2LET", "DW9TOFINT79V15WT", "E9MH19KYDHRCEIDH", "ELM0H3OQYNZZ9Z7T", "EZ4ZPXTTTRKI3AE9", "FC3AN8G4WXSA885L", "FOHY7EUS7QIEQLK0", "G00MC0WRJ3RSXW8Y", "GC2ZF2BZ8165O8FS", "GO74T8UYCYYJIPNO", "H17LEBY3HEWPBQDC", "HDQPOC3VGSU41TZN", "HS2HDXMQGR3KQ2F5", "I5BOWCVE6XBYMVZE", "IIG7LNENAK14Y1JK", "IVNT4BM7QSOBRFTS", "J8KE87F9NSV90MJZ", "JLG0JH7ZK8EC8I5G", "JYJQP0RPU4QDXV4J", "KAO2XVABRSS35DMW", "KN6AFRHMEUE51K76", "L056OHC72325XJT5", "LCSI7CWW52WSCCAX", "LQ8YRNFBYVZPCPFS", "M4OGWNTOR9XS5I46", "MHTJ85BQOOOM9O1I", "MV1ROR45N0D2PRE0", "N70I7DX802C1RRL2", "NKSA8PLN57AD6NGO", "NYCV9LX1EHGADYD3", "OBBGQABCWOH9NC3Q", "ONHL3539LQWZITZZ", "P1G3NZM41PUHJ12Q", "PG5QFHRGBOP9XOKE", "PS6R9ZDZMTEECKAE", "Q6IB3Y3QHHX2JBDH", "QJ0Q629FGI0AJ4O9", "QV0CV0VN3VWNH2LY", "R7Y391U1E9NGIPUZ", "RLJLE4W1J8BCNWJP", "RYNQ1V6QTMPXA0DR", "SD2HVV76CPM7Q5XQ", "SQSCGSRR60DV9MJ4", "T3JOGKG7J3MT2XU4", "TFPY6VKIA6KVI1WT", "TU5KJPK5D9RZY5LY", "U6FMTWTOFKZ4ZPH2", "UIVK4XXQE1X8ICUJ", "UWEV98MRAC9GWATO", "V9XXE7DV614OCFAX", "VNMIC57U8DHYFT21", "VZ9VGL1HAUFARNJO", "WCMA5DCNLL8EBE9J", "WP88OQ9TRH2YJANZ", "X2BAI9W1VM0LRR61", "XFAZHTTNOG1KUA5V", "XSBMO07EXE1VR4VL", "Y6UN1OZBBBTTEGTO", "YJJA9IGENDOTVCZN", "YVRSKS5Y0T3GRHHW", "Z85X39RVMQ03MXI5", "ZM3FVZNSU99G486X", "ZZZU3EISUFEMAIH1"}', 'text'::regtype, -1)::anyarray, NULL, NULL, NULL);
update pg_yb_catalog_version set current_version=current_version+1 where db_oid=1;
SET yb_non_ddl_txn_for_sys_tables_allowed = OFF;
SET yb_enable_base_scans_cost_model = ON;
SET yb_bnl_batch_size = 1024;
SET yb_enable_optimizer_statistics = ON;
EXPLAIN (costs off) SELECT count(*) from t1;
                   QUERY PLAN
------------------------------------------------
 Finalize Aggregate
   ->  Index Only Scan using t1_v1_k2_idx on t1
         Partial Aggregate: true
(3 rows)
  
EXPLAIN (costs off) SELECT sum(v1) from t1;
                   QUERY PLAN
------------------------------------------------
 Finalize Aggregate
   ->  Index Only Scan using t1_v1_k2_idx on t1
         Partial Aggregate: true
(3 rows)
  
EXPLAIN (costs off) SELECT avg(v1) from t1;
                   QUERY PLAN
------------------------------------------------
 Finalize Aggregate
   ->  Index Only Scan using t1_v1_k2_idx on t1
         Partial Aggregate: true
(3 rows)

EXPLAIN (costs off) SELECT count(*) from ts2;
           QUERY PLAN
---------------------------------
 Finalize Aggregate
   ->  Seq Scan on ts2
         Partial Aggregate: true
(3 rows)

EXPLAIN (costs off) SELECT sum(v1) from ts2;
           QUERY PLAN
---------------------------------
 Finalize Aggregate
   ->  Seq Scan on ts2
         Partial Aggregate: true
(3 rows)

EXPLAIN (costs off) SELECT avg(v1) from ts2;
           QUERY PLAN
---------------------------------
 Finalize Aggregate
   ->  Seq Scan on ts2
         Partial Aggregate: true
(3 rows)

EXPLAIN (costs off) SELECT count(*) from ts3;
           QUERY PLAN
---------------------------------
 Finalize Aggregate
   ->  Seq Scan on ts3
         Partial Aggregate: true
(3 rows)

EXPLAIN (costs off) SELECT sum(v1) from ts3;
           QUERY PLAN
---------------------------------
 Finalize Aggregate
   ->  Seq Scan on ts3
         Partial Aggregate: true
(3 rows)

EXPLAIN (costs off) SELECT avg(v1) from ts3;
           QUERY PLAN
---------------------------------
 Finalize Aggregate
   ->  Seq Scan on ts3
         Partial Aggregate: true
(3 rows)

EXPLAIN (costs off) SELECT t1.k1, t1.k2, t1.v1, t1.v2 FROM t1 GROUP BY t1.k1, t1.k2, t1.v1, t1.v2 LIMIT 100000;
                 QUERY PLAN
--------------------------------------------
 Limit
   ->  Group
         Group Key: k1, k2
         ->  Index Scan using t1_pkey on t1
(4 rows)

EXPLAIN (costs off) SELECT t1.k1, t1.k2, t1.v1, t1.v2 FROM t1 GROUP BY t1.k1, t1.k2, t1.v1, t1.v2 LIMIT 1000000;
                 QUERY PLAN
--------------------------------------------
 Limit
   ->  Group
         Group Key: k1, k2
         ->  Index Scan using t1_pkey on t1
(4 rows)

EXPLAIN (costs off) SELECT t2.k1, t2.k2, t2.v1, t2.v2 FROM t2 GROUP BY t2.k1, t2.k2, t2.v1, t2.v2 LIMIT 100000;
                 QUERY PLAN
--------------------------------------------
 Limit
   ->  Group
         Group Key: k1, k2
         ->  Index Scan using t2_pkey on t2
(4 rows)

EXPLAIN (costs off) SELECT t2.k1, t2.k2, t2.v1, t2.v2 FROM t2 GROUP BY t2.k1, t2.k2, t2.v1, t2.v2 LIMIT 1000000;
                 QUERY PLAN
--------------------------------------------
 Limit
   ->  Group
         Group Key: k1, k2
         ->  Index Scan using t2_pkey on t2
(4 rows)

EXPLAIN (costs off) SELECT t3.k1, t3.k2, t3.v1, t3.v2 FROM t3 GROUP BY t3.k1, t3.k2, t3.v1, t3.v2 LIMIT 100000;
                 QUERY PLAN
--------------------------------------------
 Limit
   ->  Group
         Group Key: k1, k2
         ->  Index Scan using t3_pkey on t3
(4 rows)

EXPLAIN (costs off) SELECT t3.k1, t3.k2, t3.v1, t3.v2 FROM t3 GROUP BY t3.k1, t3.k2, t3.v1, t3.v2 LIMIT 1000000;
                 QUERY PLAN
--------------------------------------------
 Limit
   ->  Group
         Group Key: k1, k2
         ->  Index Scan using t3_pkey on t3
(4 rows)

EXPLAIN (costs off) SELECT ts2.k1, ts2.k2, ts2.v1, ts2.v2 FROM ts2 GROUP BY ts2.k1, ts2.k2, ts2.v1, ts2.v2 LIMIT 100000;
            QUERY PLAN
-----------------------------------
 Limit
   ->  Group
         Group Key: k1, k2
         ->  Sort
               Sort Key: k1, k2
               ->  Seq Scan on ts2
(6 rows)

EXPLAIN (costs off) SELECT ts2.k1, ts2.k2, ts2.v1, ts2.v2 FROM ts2 GROUP BY ts2.k1, ts2.k2, ts2.v1, ts2.v2 LIMIT 1000000;
            QUERY PLAN
-----------------------------------
 Limit
   ->  Group
         Group Key: k1, k2
         ->  Sort
               Sort Key: k1, k2
               ->  Seq Scan on ts2
(6 rows)

EXPLAIN (costs off) SELECT ts3.k1, ts3.k2, ts3.v1, ts3.v2 FROM ts3 GROUP BY ts3.k1, ts3.k2, ts3.v1, ts3.v2 LIMIT 100000;
         QUERY PLAN
-----------------------------
 Limit
   ->  HashAggregate
         Group Key: k1
         ->  Seq Scan on ts3
(4 rows)

EXPLAIN (costs off) SELECT ts3.k1, ts3.k2, ts3.v1, ts3.v2 FROM ts3 GROUP BY ts3.k1, ts3.k2, ts3.v1, ts3.v2 LIMIT 1000000;
         QUERY PLAN
-----------------------------
 Limit
   ->  HashAggregate
         Group Key: k1
         ->  Seq Scan on ts3
(4 rows)

EXPLAIN (costs off) SELECT t1.k1, t1.k2, t2.v1, t2.v2 FROM t1 JOIN t2 ON t1.v1 = t2.v1 WHERE t1.k1 >= (8180) AND t1.k1 < (8190) AND t2.k1 >= (8180) AND t2.k1 < (8190) GROUP BY t1.k1, t1.k2, t2.v1, t2.v2;
                              QUERY PLAN
----------------------------------------------------------------------
 Group
   Group Key: t1.k1, t1.k2, t2.v1, t2.v2
   ->  Sort
         Sort Key: t1.k1, t1.k2, t2.v1, t2.v2
         ->  Hash Join
               Hash Cond: (t1.v1 = t2.v1)
               ->  Index Scan using t1_pkey on t1
                     Index Cond: ((k1 >= 8180) AND (k1 < 8190))
               ->  Hash
                     ->  Index Scan using t2_pkey on t2
                           Index Cond: ((k1 >= 8180) AND (k1 < 8190))
(11 rows)

EXPLAIN (costs off) SELECT t1.k1, t1.k2, t2.v1, t2.v2 FROM t1 JOIN t2 ON t1.v1 = t2.v1 WHERE t1.k1 >= (8100) AND t1.k1 < (8190) AND t2.k1 >= (8180) AND t2.k1 < (8400) GROUP BY t1.k1, t1.k2, t2.v1, t2.v2;
                              QUERY PLAN
----------------------------------------------------------------------
 Group
   Group Key: t1.k1, t1.k2, t2.v1, t2.v2
   ->  Sort
         Sort Key: t1.k1, t1.k2, t2.v1, t2.v2
         ->  Hash Join
               Hash Cond: (t2.v1 = t1.v1)
               ->  Index Scan using t2_pkey on t2
                     Index Cond: ((k1 >= 8180) AND (k1 < 8400))
               ->  Hash
                     ->  Index Scan using t1_pkey on t1
                           Index Cond: ((k1 >= 8100) AND (k1 < 8190))
(11 rows)

EXPLAIN (costs off) SELECT ts2.k1, ts2.k2, ts3.v1, ts3.v2 FROM ts2 JOIN ts3 ON ts2.v1 = ts3.v1 WHERE ts2.k1 >= (17180) AND ts2.k1 < (17190) AND ts3.k1 >= (2180) AND ts3.k1 < (2190) GROUP BY ts2.k1, ts2.k2, ts3.v1, ts3.v2;
                              QUERY PLAN
----------------------------------------------------------------------
 Group
   Group Key: ts2.k1, ts2.k2, ts3.v1, ts3.v2
   ->  Sort
         Sort Key: ts2.k1, ts2.k2, ts3.v1, ts3.v2
         ->  Hash Join
               Hash Cond: (ts2.v1 = ts3.v1)
               ->  Index Scan using ts2_pkey on ts2
                     Index Cond: ((k1 >= 17180) AND (k1 < 17190))
               ->  Hash
                     ->  Index Scan using ts3_pkey on ts3
                           Index Cond: ((k1 >= 2180) AND (k1 < 2190))
(11 rows)

EXPLAIN (costs off) SELECT ts2.k1, ts2.k2, ts3.v1, ts3.v2 FROM ts2 JOIN ts3 ON ts2.v1 = ts3.v1 WHERE ts2.k1 >= (17100) AND ts2.k1 < (17190) AND ts3.k1 >= (2180) AND ts3.k1 < (2400) GROUP BY ts2.k1, ts2.k2, ts3.v1, ts3.v2;
                               QUERY PLAN
------------------------------------------------------------------------
 Group
   Group Key: ts2.k1, ts2.k2, ts3.v1, ts3.v2
   ->  Sort
         Sort Key: ts2.k1, ts2.k2, ts3.v1, ts3.v2
         ->  Hash Join
               Hash Cond: (ts3.v1 = ts2.v1)
               ->  Index Scan using ts3_pkey on ts3
                     Index Cond: ((k1 >= 2180) AND (k1 < 2400))
               ->  Hash
                     ->  Index Scan using ts2_pkey on ts2
                           Index Cond: ((k1 >= 17100) AND (k1 < 17190))
(11 rows)

EXPLAIN (costs off) SELECT t1.k1, t1.k2, t2.v1, t2.v2 FROM t1 JOIN t2 on t1.k1 = t2.k1 WHERE t1.k1 >= (2500) AND t1.k1 < (25100) AND t2.k1 >= (2500) AND t2.k1 < (25100) GROUP BY t1.k1, t1.k2, t2.v1, t2.v2;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Group
   Group Key: t1.k1, t1.k2, t2.v1, t2.v2
   ->  Sort
         Sort Key: t1.k1, t1.k2, t2.v1, t2.v2
         ->  Merge Join
               Merge Cond: (t1.k1 = t2.k1)
               ->  Index Scan using t1_pkey on t1
                     Index Cond: ((k1 >= 2500) AND (k1 < 25100))
               ->  Materialize
                     ->  Index Scan using t2_pkey on t2
                           Index Cond: ((k1 >= 2500) AND (k1 < 25100))
(11 rows)

EXPLAIN (costs off) SELECT t1.k1, t1.k2, t2.v1, t2.v2 FROM t1 JOIN t2 on t1.k1 = t2.k1 WHERE t1.k1 >= (24800) AND t1.k1 < (25100) AND t2.k1 >= (2500) AND t2.k1 < (25300) GROUP BY t1.k1, t1.k2, t2.v1, t2.v2;
                                                    QUERY PLAN
-------------------------------------------------------------------------------------------------------------------
 Group
   Group Key: t1.k1, t1.k2, t2.v1, t2.v2
   ->  Sort
         Sort Key: t1.k1, t1.k2, t2.v1, t2.v2
         ->  YB Batched Nested Loop Join
               Join Filter: (t1.k1 = t2.k1)
               ->  Index Scan using t1_pkey on t1
                     Index Cond: ((k1 >= 24800) AND (k1 < 25100))
               ->  Index Scan using t2_pkey on t2
                     Index Cond: ((k1 = ANY (ARRAY[t1.k1, $1, $2, ..., $1023])) AND (k1 >= 2500) AND (k1 < 25300))
(10 rows)

EXPLAIN (costs off) SELECT ts2.k1, ts2.k2, ts3.v1, ts3.v2 FROM ts2 JOIN ts3 on ts2.k1 = ts3.k1 WHERE ts2.k1 >= (300) AND ts2.k1 < (3100) AND ts3.k1 >= (300) AND ts3.k1 < (3100) GROUP BY ts2.k1, ts2.k2, ts3.v1, ts3.v2;
                                                    QUERY PLAN
------------------------------------------------------------------------------------------------------------------
 Group
   Group Key: ts2.k1, ts2.k2, ts3.v1, ts3.v2
   ->  Sort
         Sort Key: ts2.k1, ts2.k2, ts3.v1, ts3.v2
         ->  YB Batched Nested Loop Join
               Join Filter: (ts2.k1 = ts3.k1)
               ->  Index Scan using ts2_pkey on ts2
                     Index Cond: ((k1 >= 300) AND (k1 < 3100))
               ->  Index Scan using ts3_pkey on ts3
                     Index Cond: ((k1 = ANY (ARRAY[ts2.k1, $1, $2, ..., $1023])) AND (k1 >= 300) AND (k1 < 3100))
(10 rows)

EXPLAIN (costs off) SELECT ts2.k1, ts2.k2, ts3.v1, ts3.v2 FROM ts2 JOIN ts3 on ts2.k1 = ts3.k1 WHERE ts2.k1 >= (2800) AND ts2.k1 < (3100) AND ts3.k1 >= (300) AND ts3.k1 < (3300) GROUP BY ts2.k1, ts2.k2, ts3.v1, ts3.v2;
                                                    QUERY PLAN
------------------------------------------------------------------------------------------------------------------
 Group
   Group Key: ts2.k1, ts2.k2, ts3.v1, ts3.v2
   ->  Sort
         Sort Key: ts2.k1, ts2.k2, ts3.v1, ts3.v2
         ->  YB Batched Nested Loop Join
               Join Filter: (ts2.k1 = ts3.k1)
               ->  Index Scan using ts2_pkey on ts2
                     Index Cond: ((k1 >= 2800) AND (k1 < 3100))
               ->  Index Scan using ts3_pkey on ts3
                     Index Cond: ((k1 = ANY (ARRAY[ts2.k1, $1, $2, ..., $1023])) AND (k1 >= 300) AND (k1 < 3300))
(10 rows)

EXPLAIN (costs off) SELECT t1.k1, t1.k2, t2.v1, t2.v2 FROM t1 JOIN t2 ON t1.k1 = t2.k1 AND t1.k2 = t2.k2 WHERE t1.k1 > (1200) AND t1.k1 <= (1300) GROUP BY t1.k1, t1.k2, t2.v1, t2.v2;
                                                               QUERY PLAN
----------------------------------------------------------------------------------------------------------------------------------------
 Group
   Group Key: t1.k1, t1.k2, t2.v1, t2.v2
   ->  Sort
         Sort Key: t1.k1, t1.k2, t2.v1, t2.v2
         ->  YB Batched Nested Loop Join
               Join Filter: ((t1.k1 = t2.k1) AND (t1.k2 = t2.k2))
               ->  Index Scan using t1_pkey on t1
                     Index Cond: ((k1 > 1200) AND (k1 <= 1300))
               ->  Index Scan using t2_pkey on t2
                     Index Cond: (ROW(k1, k2) = ANY (ARRAY[ROW(t1.k1, t1.k2), ROW($1, $1025), ROW($2, $1026), ..., ROW($1023, $2047)]))
(10 rows)

EXPLAIN (costs off) SELECT t1.k1, t1.k2, t2.v1, t2.v2 FROM t1 JOIN t2 ON t1.k1 = t2.k1 AND t1.k2 = t2.k2 WHERE t1.k1 > (1200) AND t1.k1 <= (1500) GROUP BY t1.k1, t1.k2, t2.v1, t2.v2;
                                                               QUERY PLAN
----------------------------------------------------------------------------------------------------------------------------------------
 Group
   Group Key: t1.k1, t1.k2, t2.v1, t2.v2
   ->  Sort
         Sort Key: t1.k1, t1.k2, t2.v1, t2.v2
         ->  YB Batched Nested Loop Join
               Join Filter: ((t1.k1 = t2.k1) AND (t1.k2 = t2.k2))
               ->  Index Scan using t1_pkey on t1
                     Index Cond: ((k1 > 1200) AND (k1 <= 1500))
               ->  Index Scan using t2_pkey on t2
                     Index Cond: (ROW(k1, k2) = ANY (ARRAY[ROW(t1.k1, t1.k2), ROW($1, $1025), ROW($2, $1026), ..., ROW($1023, $2047)]))
(10 rows)

EXPLAIN (costs off) SELECT ts2.k1, ts2.k2, ts3.v1, ts3.v2 FROM ts2 JOIN ts3 ON ts2.k1 = ts3.k1 AND ts2.k2 = ts3.k2 WHERE ts2.k1 > (1200) AND ts2.k1 <= (1300) GROUP BY ts2.k1, ts2.k2, ts3.v1, ts3.v2;
                           QUERY PLAN
----------------------------------------------------------------
 Group
   Group Key: ts2.k1, ts2.k2, ts3.v1, ts3.v2
   ->  Sort
         Sort Key: ts2.k1, ts2.k2, ts3.v1, ts3.v2
         ->  Nested Loop
               ->  Index Scan using ts2_pkey on ts2
                     Index Cond: ((k1 > 1200) AND (k1 <= 1300))
               ->  Index Scan using ts3_pkey on ts3
                     Index Cond: (k1 = ts2.k1)
                     Filter: (ts2.k2 = k2)
(10 rows)

EXPLAIN (costs off) SELECT ts2.k1, ts2.k2, ts3.v1, ts3.v2 FROM ts2 JOIN ts3 ON ts2.k1 = ts3.k1 AND ts2.k2 = ts3.k2 WHERE ts2.k1 > (1200) AND ts2.k1 <= (1400) GROUP BY ts2.k1, ts2.k2, ts3.v1, ts3.v2;
                           QUERY PLAN
----------------------------------------------------------------
 Group
   Group Key: ts2.k1, ts2.k2, ts3.v1, ts3.v2
   ->  Sort
         Sort Key: ts2.k1, ts2.k2, ts3.v1, ts3.v2
         ->  Nested Loop
               ->  Index Scan using ts2_pkey on ts2
                     Index Cond: ((k1 > 1200) AND (k1 <= 1400))
               ->  Index Scan using ts3_pkey on ts3
                     Index Cond: (k1 = ts2.k1)
                     Filter: (ts2.k2 = k2)
(10 rows)

EXPLAIN (costs off) SELECT * FROM t1 WHERE k1 > (3000) ORDER BY k1 ASC LIMIT 100000;
              QUERY PLAN
--------------------------------------
 Limit
   ->  Index Scan using t1_pkey on t1
         Index Cond: (k1 > 3000)
(3 rows)

EXPLAIN (costs off) SELECT * FROM t1 WHERE k1 > (3000) ORDER BY k1 ASC LIMIT 1000000;
              QUERY PLAN
--------------------------------------
 Limit
   ->  Index Scan using t1_pkey on t1
         Index Cond: (k1 > 3000)
(3 rows)

EXPLAIN (costs off) SELECT * FROM t2 WHERE k1 > (3000) ORDER BY k1 ASC LIMIT 100000;
              QUERY PLAN
--------------------------------------
 Limit
   ->  Index Scan using t2_pkey on t2
         Index Cond: (k1 > 3000)
(3 rows)

EXPLAIN (costs off) SELECT * FROM t2 WHERE k1 > (3000) ORDER BY k1 ASC LIMIT 1000000;
              QUERY PLAN
--------------------------------------
 Limit
   ->  Index Scan using t2_pkey on t2
         Index Cond: (k1 > 3000)
(3 rows)

EXPLAIN (costs off) SELECT * FROM t3 WHERE k1 > (3000) ORDER BY k1 ASC LIMIT 100000;
              QUERY PLAN
--------------------------------------
 Limit
   ->  Index Scan using t3_pkey on t3
         Index Cond: (k1 > 3000)
(3 rows)

EXPLAIN (costs off) SELECT * FROM t3 WHERE k1 > (3000) ORDER BY k1 ASC LIMIT 1000000;
              QUERY PLAN
--------------------------------------
 Limit
   ->  Index Scan using t3_pkey on t3
         Index Cond: (k1 > 3000)
(3 rows)

EXPLAIN (costs off) SELECT * FROM ts2 WHERE k1 > (3000) ORDER BY k1 ASC LIMIT 100000;
                  QUERY PLAN
----------------------------------------------
 Limit
   ->  Sort
         Sort Key: k1
         ->  Index Scan using ts2_pkey on ts2
               Index Cond: (k1 > 3000)
(5 rows)

EXPLAIN (costs off) SELECT * FROM ts2 WHERE k1 > (3000) ORDER BY k1 ASC LIMIT 1000000;
                  QUERY PLAN
----------------------------------------------
 Limit
   ->  Sort
         Sort Key: k1
         ->  Index Scan using ts2_pkey on ts2
               Index Cond: (k1 > 3000)
(5 rows)

EXPLAIN (costs off) SELECT * FROM ts3 WHERE k1 > (3000) ORDER BY k1 ASC LIMIT 100000;
                  QUERY PLAN
----------------------------------------------
 Limit
   ->  Sort
         Sort Key: k1
         ->  Index Scan using ts3_pkey on ts3
               Index Cond: (k1 > 3000)
(5 rows)

EXPLAIN (costs off) SELECT * FROM ts3 WHERE k1 > (3000) ORDER BY k1 ASC LIMIT 1000000;
                  QUERY PLAN
----------------------------------------------
 Limit
   ->  Sort
         Sort Key: k1
         ->  Index Scan using ts3_pkey on ts3
               Index Cond: (k1 > 3000)
(5 rows)

EXPLAIN (costs off) SELECT v1,k2 FROM t1 WHERE v1 <= (3500) ORDER BY v1 DESC LIMIT 100000;
                      QUERY PLAN
------------------------------------------------------
 Limit
   ->  Sort
         Sort Key: v1 DESC
         ->  Index Only Scan using t1_v1_k2_idx on t1
               Index Cond: (v1 <= 3500)
(5 rows)

EXPLAIN (costs off) SELECT v1,k2 FROM t1 WHERE v1 <= (3500) ORDER BY v1 DESC LIMIT 1000000;
                      QUERY PLAN
------------------------------------------------------
 Limit
   ->  Sort
         Sort Key: v1 DESC
         ->  Index Only Scan using t1_v1_k2_idx on t1
               Index Cond: (v1 <= 3500)
(5 rows)

EXPLAIN (costs off) SELECT v1,k2 FROM t2 WHERE v1 <= (3500) ORDER BY v1 DESC LIMIT 100000;
                      QUERY PLAN
------------------------------------------------------
 Limit
   ->  Sort
         Sort Key: v1 DESC
         ->  Index Only Scan using t2_v1_k2_idx on t2
               Index Cond: (v1 <= 3500)
(5 rows)

EXPLAIN (costs off) SELECT v1,k2 FROM t2 WHERE v1 <= (3500) ORDER BY v1 DESC LIMIT 1000000;
                      QUERY PLAN
------------------------------------------------------
 Limit
   ->  Sort
         Sort Key: v1 DESC
         ->  Index Only Scan using t2_v1_k2_idx on t2
               Index Cond: (v1 <= 3500)
(5 rows)

EXPLAIN (costs off) SELECT v1,k2 FROM ts2 WHERE v1 <= (3500) ORDER BY v1 DESC LIMIT 100000;
                QUERY PLAN
-------------------------------------------
 Limit
   ->  Sort
         Sort Key: v1 DESC
         ->  Seq Scan on ts2
               Remote Filter: (v1 <= 3500)
(5 rows)

EXPLAIN (costs off) SELECT v1,k2 FROM ts2 WHERE v1 <= (3500) ORDER BY v1 DESC LIMIT 1000000;
                QUERY PLAN
-------------------------------------------
 Limit
   ->  Sort
         Sort Key: v1 DESC
         ->  Seq Scan on ts2
               Remote Filter: (v1 <= 3500)
(5 rows)

EXPLAIN (costs off) SELECT v1,k2 FROM ts3 WHERE v1 <= (3500) ORDER BY v1 DESC LIMIT 100000;
                QUERY PLAN
-------------------------------------------
 Limit
   ->  Sort
         Sort Key: v1 DESC
         ->  Seq Scan on ts3
               Remote Filter: (v1 <= 3500)
(5 rows)

EXPLAIN (costs off) SELECT v1,k2 FROM ts3 WHERE v1 <= (3500) ORDER BY v1 DESC LIMIT 1000000;
                QUERY PLAN
-------------------------------------------
 Limit
   ->  Sort
         Sort Key: v1 DESC
         ->  Seq Scan on ts3
               Remote Filter: (v1 <= 3500)
(5 rows)

EXPLAIN (costs off) SELECT * FROM t1 WHERE v1 IS NOT NULL ORDER BY k1 ASC LIMIT 100000;
               QUERY PLAN
-----------------------------------------
 Limit
   ->  Index Scan using t1_pkey on t1
         Remote Filter: (v1 IS NOT NULL)
(3 rows)

EXPLAIN (costs off) SELECT * FROM t1 WHERE v1 IS NOT NULL ORDER BY k1 ASC LIMIT 1000000;
               QUERY PLAN
-----------------------------------------
 Limit
   ->  Index Scan using t1_pkey on t1
         Remote Filter: (v1 IS NOT NULL)
(3 rows)

EXPLAIN (costs off) SELECT * FROM t2 WHERE v1 IS NOT NULL ORDER BY k1 ASC LIMIT 100000;
               QUERY PLAN
-----------------------------------------
 Limit
   ->  Index Scan using t2_pkey on t2
         Remote Filter: (v1 IS NOT NULL)
(3 rows)

EXPLAIN (costs off) SELECT * FROM t2 WHERE v1 IS NOT NULL ORDER BY k1 ASC LIMIT 1000000;
               QUERY PLAN
-----------------------------------------
 Limit
   ->  Index Scan using t2_pkey on t2
         Remote Filter: (v1 IS NOT NULL)
(3 rows)

EXPLAIN (costs off) SELECT * FROM t3 WHERE v1 IS NOT NULL ORDER BY k1 ASC LIMIT 100000;
               QUERY PLAN
-----------------------------------------
 Limit
   ->  Index Scan using t3_pkey on t3
         Remote Filter: (v1 IS NOT NULL)
(3 rows)

EXPLAIN (costs off) SELECT * FROM t3 WHERE v1 IS NOT NULL ORDER BY k1 ASC LIMIT 1000000;
               QUERY PLAN
-----------------------------------------
 Limit
   ->  Index Scan using t3_pkey on t3
         Remote Filter: (v1 IS NOT NULL)
(3 rows)

EXPLAIN (costs off) SELECT * FROM ts2 WHERE v1 IS NOT NULL ORDER BY k1 ASC LIMIT 100000;
                  QUERY PLAN
-----------------------------------------------
 Limit
   ->  Sort
         Sort Key: k1
         ->  Seq Scan on ts2
               Remote Filter: (v1 IS NOT NULL)
(5 rows)

EXPLAIN (costs off) SELECT * FROM ts2 WHERE v1 IS NOT NULL ORDER BY k1 ASC LIMIT 1000000;
                  QUERY PLAN
-----------------------------------------------
 Limit
   ->  Sort
         Sort Key: k1
         ->  Seq Scan on ts2
               Remote Filter: (v1 IS NOT NULL)
(5 rows)

EXPLAIN (costs off) SELECT * FROM ts3 WHERE v1 IS NOT NULL ORDER BY k1 ASC LIMIT 100000;
                  QUERY PLAN
-----------------------------------------------
 Limit
   ->  Sort
         Sort Key: k1
         ->  Seq Scan on ts3
               Remote Filter: (v1 IS NOT NULL)
(5 rows)

EXPLAIN (costs off) SELECT * FROM ts3 WHERE v1 IS NOT NULL ORDER BY k1 ASC LIMIT 1000000;
                  QUERY PLAN
-----------------------------------------------
 Limit
   ->  Sort
         Sort Key: k1
         ->  Seq Scan on ts3
               Remote Filter: (v1 IS NOT NULL)
(5 rows)

EXPLAIN (costs off) SELECT * FROM t1 WHERE v1 IS NOT NULL AND k1 >= (5500) ORDER BY k1 ASC LIMIT 10000;
               QUERY PLAN
-----------------------------------------
 Limit
   ->  Index Scan using t1_pkey on t1
         Index Cond: (k1 >= 5500)
         Remote Filter: (v1 IS NOT NULL)
(4 rows)

EXPLAIN (costs off) SELECT * FROM t1 WHERE v1 IS NOT NULL AND k1 >= (5500) ORDER BY k1 ASC LIMIT 100000;
               QUERY PLAN
-----------------------------------------
 Limit
   ->  Index Scan using t1_pkey on t1
         Index Cond: (k1 >= 5500)
         Remote Filter: (v1 IS NOT NULL)
(4 rows)

EXPLAIN (costs off) SELECT * FROM t2 WHERE v1 IS NOT NULL AND k1 >= (5500) ORDER BY k1 ASC LIMIT 10000;
               QUERY PLAN
-----------------------------------------
 Limit
   ->  Index Scan using t2_pkey on t2
         Index Cond: (k1 >= 5500)
         Remote Filter: (v1 IS NOT NULL)
(4 rows)

EXPLAIN (costs off) SELECT * FROM t2 WHERE v1 IS NOT NULL AND k1 >= (5500) ORDER BY k1 ASC LIMIT 100000;
               QUERY PLAN
-----------------------------------------
 Limit
   ->  Index Scan using t2_pkey on t2
         Index Cond: (k1 >= 5500)
         Remote Filter: (v1 IS NOT NULL)
(4 rows)

EXPLAIN (costs off) SELECT * FROM t3 WHERE v1 IS NOT NULL AND k1 >= (5500) ORDER BY k1 ASC LIMIT 10000;
               QUERY PLAN
-----------------------------------------
 Limit
   ->  Index Scan using t3_pkey on t3
         Index Cond: (k1 >= 5500)
         Remote Filter: (v1 IS NOT NULL)
(4 rows)

EXPLAIN (costs off) SELECT * FROM t3 WHERE v1 IS NOT NULL AND k1 >= (5500) ORDER BY k1 ASC LIMIT 100000;
               QUERY PLAN
-----------------------------------------
 Limit
   ->  Index Scan using t3_pkey on t3
         Index Cond: (k1 >= 5500)
         Remote Filter: (v1 IS NOT NULL)
(4 rows)

EXPLAIN (costs off) SELECT * FROM ts2 WHERE v1 IS NOT NULL AND k1 >= (5500) ORDER BY k1 ASC LIMIT 10000;
                   QUERY PLAN
-------------------------------------------------
 Limit
   ->  Index Scan Backward using ts2_pkey on ts2
         Index Cond: (k1 >= 5500)
         Remote Filter: (v1 IS NOT NULL)
(4 rows)

EXPLAIN (costs off) SELECT * FROM ts2 WHERE v1 IS NOT NULL AND k1 >= (5500) ORDER BY k1 ASC LIMIT 100000;
                  QUERY PLAN
-----------------------------------------------
 Limit
   ->  Sort
         Sort Key: k1
         ->  Index Scan using ts2_pkey on ts2
               Index Cond: (k1 >= 5500)
               Remote Filter: (v1 IS NOT NULL)
(6 rows)

EXPLAIN (costs off) SELECT * FROM ts3 WHERE v1 IS NOT NULL AND k1 >= (5500) ORDER BY k1 ASC LIMIT 10000;
                  QUERY PLAN
-----------------------------------------------
 Limit
   ->  Sort
         Sort Key: k1
         ->  Index Scan using ts3_pkey on ts3
               Index Cond: (k1 >= 5500)
               Remote Filter: (v1 IS NOT NULL)
(6 rows)

EXPLAIN (costs off) SELECT * FROM ts3 WHERE v1 IS NOT NULL AND k1 >= (5500) ORDER BY k1 ASC LIMIT 100000;
                  QUERY PLAN
-----------------------------------------------
 Limit
   ->  Sort
         Sort Key: k1
         ->  Index Scan using ts3_pkey on ts3
               Index Cond: (k1 >= 5500)
               Remote Filter: (v1 IS NOT NULL)
(6 rows)

EXPLAIN (costs off) SELECT * FROM t1 WHERE v1 IS NULL ORDER BY k1 ASC LIMIT 100000;
                   QUERY PLAN
-------------------------------------------------
 Limit
   ->  Sort
         Sort Key: k1
         ->  Index Scan using t1_v1_k2_idx on t1
               Index Cond: (v1 IS NULL)
(5 rows)

EXPLAIN (costs off) SELECT * FROM t1 WHERE v1 IS NULL ORDER BY k1 ASC LIMIT 1000000;
                   QUERY PLAN
-------------------------------------------------
 Limit
   ->  Sort
         Sort Key: k1
         ->  Index Scan using t1_v1_k2_idx on t1
               Index Cond: (v1 IS NULL)
(5 rows)

EXPLAIN (costs off) SELECT * FROM t2 WHERE v1 IS NULL ORDER BY k1 ASC LIMIT 100000;
                   QUERY PLAN
-------------------------------------------------
 Limit
   ->  Sort
         Sort Key: k1
         ->  Index Scan using t2_v1_k2_idx on t2
               Index Cond: (v1 IS NULL)
(5 rows)

EXPLAIN (costs off) SELECT * FROM t2 WHERE v1 IS NULL ORDER BY k1 ASC LIMIT 1000000;
                   QUERY PLAN
-------------------------------------------------
 Limit
   ->  Sort
         Sort Key: k1
         ->  Index Scan using t2_v1_k2_idx on t2
               Index Cond: (v1 IS NULL)
(5 rows)

EXPLAIN (costs off) SELECT * FROM t3 WHERE v1 IS NULL ORDER BY k1 ASC LIMIT 100000;
                   QUERY PLAN
-------------------------------------------------
 Limit
   ->  Sort
         Sort Key: k1
         ->  Index Scan using t3_v1_k2_idx on t3
               Index Cond: (v1 IS NULL)
(5 rows)

EXPLAIN (costs off) SELECT * FROM t3 WHERE v1 IS NULL ORDER BY k1 ASC LIMIT 1000000;
                   QUERY PLAN
-------------------------------------------------
 Limit
   ->  Sort
         Sort Key: k1
         ->  Index Scan using t3_v1_k2_idx on t3
               Index Cond: (v1 IS NULL)
(5 rows)

EXPLAIN (costs off) SELECT * FROM ts2 WHERE v1 IS NULL ORDER BY k1 ASC LIMIT 100000;
                QUERY PLAN
-------------------------------------------
 Limit
   ->  Sort
         Sort Key: k1
         ->  Seq Scan on ts2
               Remote Filter: (v1 IS NULL)
(5 rows)

EXPLAIN (costs off) SELECT * FROM ts2 WHERE v1 IS NULL ORDER BY k1 ASC LIMIT 1000000;
                QUERY PLAN
-------------------------------------------
 Limit
   ->  Sort
         Sort Key: k1
         ->  Seq Scan on ts2
               Remote Filter: (v1 IS NULL)
(5 rows)

EXPLAIN (costs off) SELECT * FROM ts3 WHERE v1 IS NULL ORDER BY k1 ASC LIMIT 100000;
                QUERY PLAN
-------------------------------------------
 Limit
   ->  Sort
         Sort Key: k1
         ->  Seq Scan on ts3
               Remote Filter: (v1 IS NULL)
(5 rows)

EXPLAIN (costs off) SELECT * FROM ts3 WHERE v1 IS NULL ORDER BY k1 ASC LIMIT 1000000;
                QUERY PLAN
-------------------------------------------
 Limit
   ->  Sort
         Sort Key: k1
         ->  Seq Scan on ts3
               Remote Filter: (v1 IS NULL)
(5 rows)

EXPLAIN (costs off) SELECT * FROM t1 WHERE v1 IS NULL AND k1 >= (5500) ORDER BY k1 ASC LIMIT 10000;
                   QUERY PLAN
-------------------------------------------------
 Limit
   ->  Sort
         Sort Key: k1
         ->  Index Scan using t1_v1_k2_idx on t1
               Index Cond: (v1 IS NULL)
               Remote Filter: (k1 >= 5500)
(6 rows)

EXPLAIN (costs off) SELECT * FROM t1 WHERE v1 IS NULL AND k1 >= (5500) ORDER BY k1 ASC LIMIT 100000;
                   QUERY PLAN
-------------------------------------------------
 Limit
   ->  Sort
         Sort Key: k1
         ->  Index Scan using t1_v1_k2_idx on t1
               Index Cond: (v1 IS NULL)
               Remote Filter: (k1 >= 5500)
(6 rows)

EXPLAIN (costs off) SELECT * FROM t2 WHERE v1 IS NULL AND k1 >= (5500) ORDER BY k1 ASC LIMIT 10000;
                   QUERY PLAN
-------------------------------------------------
 Limit
   ->  Sort
         Sort Key: k1
         ->  Index Scan using t2_v1_k2_idx on t2
               Index Cond: (v1 IS NULL)
               Remote Filter: (k1 >= 5500)
(6 rows)

EXPLAIN (costs off) SELECT * FROM t2 WHERE v1 IS NULL AND k1 >= (5500) ORDER BY k1 ASC LIMIT 100000;
                   QUERY PLAN
-------------------------------------------------
 Limit
   ->  Sort
         Sort Key: k1
         ->  Index Scan using t2_v1_k2_idx on t2
               Index Cond: (v1 IS NULL)
               Remote Filter: (k1 >= 5500)
(6 rows)

EXPLAIN (costs off) SELECT * FROM t3 WHERE v1 IS NULL AND k1 >= (5500) ORDER BY k1 ASC LIMIT 10000;
                   QUERY PLAN
-------------------------------------------------
 Limit
   ->  Sort
         Sort Key: k1
         ->  Index Scan using t3_v1_k2_idx on t3
               Index Cond: (v1 IS NULL)
               Remote Filter: (k1 >= 5500)
(6 rows)

EXPLAIN (costs off) SELECT * FROM t3 WHERE v1 IS NULL AND k1 >= (5500) ORDER BY k1 ASC LIMIT 100000;
                   QUERY PLAN
-------------------------------------------------
 Limit
   ->  Sort
         Sort Key: k1
         ->  Index Scan using t3_v1_k2_idx on t3
               Index Cond: (v1 IS NULL)
               Remote Filter: (k1 >= 5500)
(6 rows)

EXPLAIN (costs off) SELECT * FROM ts2 WHERE v1 IS NULL AND k1 >= (5500) ORDER BY k1 ASC LIMIT 10000;
                  QUERY PLAN
----------------------------------------------
 Limit
   ->  Sort
         Sort Key: k1
         ->  Index Scan using ts2_pkey on ts2
               Index Cond: (k1 >= 5500)
               Remote Filter: (v1 IS NULL)
(6 rows)

EXPLAIN (costs off) SELECT * FROM ts2 WHERE v1 IS NULL AND k1 >= (5500) ORDER BY k1 ASC LIMIT 100000;
                  QUERY PLAN
----------------------------------------------
 Limit
   ->  Sort
         Sort Key: k1
         ->  Index Scan using ts2_pkey on ts2
               Index Cond: (k1 >= 5500)
               Remote Filter: (v1 IS NULL)
(6 rows)

EXPLAIN (costs off) SELECT * FROM ts3 WHERE v1 IS NULL AND k1 >= (5500) ORDER BY k1 ASC LIMIT 10000;
                  QUERY PLAN
----------------------------------------------
 Limit
   ->  Sort
         Sort Key: k1
         ->  Index Scan using ts3_pkey on ts3
               Index Cond: (k1 >= 5500)
               Remote Filter: (v1 IS NULL)
(6 rows)

EXPLAIN (costs off) SELECT * FROM ts3 WHERE v1 IS NULL AND k1 >= (5500) ORDER BY k1 ASC LIMIT 100000;
                  QUERY PLAN
----------------------------------------------
 Limit
   ->  Sort
         Sort Key: k1
         ->  Index Scan using ts3_pkey on ts3
               Index Cond: (k1 >= 5500)
               Remote Filter: (v1 IS NULL)
(6 rows)

EXPLAIN (costs off) SELECT * FROM t1 JOIN t2 ON t1.v1 = t2.v1 WHERE t1.k1 >= (8180) AND t1.k1 < (8190) AND t2.k1 >= (8180) AND t2.k1 < (8190);
                        QUERY PLAN
----------------------------------------------------------
 Hash Join
   Hash Cond: (t1.v1 = t2.v1)
   ->  Index Scan using t1_pkey on t1
         Index Cond: ((k1 >= 8180) AND (k1 < 8190))
   ->  Hash
         ->  Index Scan using t2_pkey on t2
               Index Cond: ((k1 >= 8180) AND (k1 < 8190))
(7 rows)

EXPLAIN (costs off) SELECT * FROM t1 JOIN t2 ON t1.v1 = t2.v1 WHERE t1.k1 >= (8100) AND t1.k1 < (8190) AND t2.k1 >= (8180) AND t2.k1 < (8400);
                        QUERY PLAN                        
----------------------------------------------------------
 Hash Join
   Hash Cond: (t2.v1 = t1.v1)
   ->  Index Scan using t2_pkey on t2
         Index Cond: ((k1 >= 8180) AND (k1 < 8400))
   ->  Hash
         ->  Index Scan using t1_pkey on t1
               Index Cond: ((k1 >= 8100) AND (k1 < 8190))
(7 rows)

EXPLAIN (costs off) SELECT * FROM t2 JOIN ts2 ON t2.v1 = ts2.v1 WHERE t2.k1 >= (17180) AND t2.k1 < (17190) AND ts2.k1 >= (2180) AND ts2.k1 < (2190);
                        QUERY PLAN
----------------------------------------------------------
 Hash Join
   Hash Cond: (t2.v1 = ts2.v1)
   ->  Index Scan using t2_pkey on t2
         Index Cond: ((k1 >= 17180) AND (k1 < 17190))
   ->  Hash
         ->  Index Scan using ts2_pkey on ts2
               Index Cond: ((k1 >= 2180) AND (k1 < 2190))
(7 rows)

EXPLAIN (costs off) SELECT * FROM t2 JOIN ts2 ON t2.v1 = ts2.v1 WHERE t2.k1 >= (17100) AND t2.k1 < (17190) AND ts2.k1 >= (2180) AND ts2.k1 < (2400);
                         QUERY PLAN
------------------------------------------------------------
 Hash Join
   Hash Cond: (ts2.v1 = t2.v1)
   ->  Index Scan using ts2_pkey on ts2
         Index Cond: ((k1 >= 2180) AND (k1 < 2400))
   ->  Hash
         ->  Index Scan using t2_pkey on t2
               Index Cond: ((k1 >= 17100) AND (k1 < 17190))
(7 rows)

EXPLAIN (costs off) SELECT * FROM t2 JOIN ts3 ON t2.v1 = ts3.v1 WHERE t2.k1 >= (17180) AND t2.k1 < (17190) AND ts3.k1 >= (2180) AND ts3.k1 < (2190);
                         QUERY PLAN
------------------------------------------------------------
 Hash Join
   Hash Cond: (ts3.v1 = t2.v1)
   ->  Index Scan using ts3_pkey on ts3
         Index Cond: ((k1 >= 2180) AND (k1 < 2190))
   ->  Hash
         ->  Index Scan using t2_pkey on t2
               Index Cond: ((k1 >= 17180) AND (k1 < 17190))
(7 rows)

EXPLAIN (costs off) SELECT * FROM t2 JOIN ts3 ON t2.v1 = ts3.v1 WHERE t2.k1 >= (17100) AND t2.k1 < (17190) AND ts3.k1 >= (2180) AND ts3.k1 < (2400);
                         QUERY PLAN
------------------------------------------------------------
 Hash Join
   Hash Cond: (ts3.v1 = t2.v1)
   ->  Index Scan using ts3_pkey on ts3
         Index Cond: ((k1 >= 2180) AND (k1 < 2400))
   ->  Hash
         ->  Index Scan using t2_pkey on t2
               Index Cond: ((k1 >= 17100) AND (k1 < 17190))
(7 rows)

EXPLAIN (costs off) SELECT * FROM ts2 JOIN ts3 ON ts2.v1 = ts3.v1 WHERE ts2.k1 >= (17180) AND ts2.k1 < (17190) AND ts3.k1 >= (2180) AND ts3.k1 < (2190);
                        QUERY PLAN
----------------------------------------------------------
 Hash Join
   Hash Cond: (ts2.v1 = ts3.v1)
   ->  Index Scan using ts2_pkey on ts2
         Index Cond: ((k1 >= 17180) AND (k1 < 17190))
   ->  Hash
         ->  Index Scan using ts3_pkey on ts3
               Index Cond: ((k1 >= 2180) AND (k1 < 2190))
(7 rows)

EXPLAIN (costs off) SELECT * FROM ts2 JOIN ts3 ON ts2.v1 = ts3.v1 WHERE ts2.k1 >= (17100) AND ts2.k1 < (17190) AND ts3.k1 >= (2180) AND ts3.k1 < (2400);
                         QUERY PLAN
------------------------------------------------------------
 Hash Join
   Hash Cond: (ts3.v1 = ts2.v1)
   ->  Index Scan using ts3_pkey on ts3
         Index Cond: ((k1 >= 2180) AND (k1 < 2400))
   ->  Hash
         ->  Index Scan using ts2_pkey on ts2
               Index Cond: ((k1 >= 17100) AND (k1 < 17190))
(7 rows)

EXPLAIN (costs off) SELECT * FROM t1 JOIN t2 ON t1.k1 = t2.k1 WHERE t1.k1 >= (8180) AND t1.k1 < (8190) AND t2.k1 >= (8180) AND t2.k1 < (8190);
                        QUERY PLAN
----------------------------------------------------------
 Merge Join
   Merge Cond: (t1.k1 = t2.k1)
   ->  Index Scan using t1_pkey on t1
         Index Cond: ((k1 >= 8180) AND (k1 < 8190))
   ->  Materialize
         ->  Index Scan using t2_pkey on t2
               Index Cond: ((k1 >= 8180) AND (k1 < 8190))
(7 rows)

EXPLAIN (costs off) SELECT * FROM t1 JOIN t2 ON t1.k1 = t2.k1 WHERE t1.k1 >= (8100) AND t1.k1 < (8190) AND t2.k1 >= (8180) AND t2.k1 < (8400);
                        QUERY PLAN                        
----------------------------------------------------------
 Merge Join
   Merge Cond: (t2.k1 = t1.k1)
   ->  Index Scan using t2_pkey on t2
         Index Cond: ((k1 >= 8180) AND (k1 < 8400))
   ->  Materialize
         ->  Index Scan using t1_pkey on t1
               Index Cond: ((k1 >= 8100) AND (k1 < 8190))
(7 rows)

EXPLAIN (costs off) SELECT * FROM t2 JOIN ts2 ON t2.k1 = ts2.k1 WHERE t2.k1 >= (17180) AND t2.k1 < (17190) AND ts2.k1 >= (2180) AND ts2.k1 < (2190);
                        QUERY PLAN
----------------------------------------------------------
 Merge Join
   Merge Cond: (t2.k1 = ts2.k1)
   ->  Index Scan using t2_pkey on t2
         Index Cond: ((k1 >= 17180) AND (k1 < 17190))
   ->  Sort
         Sort Key: ts2.k1
         ->  Index Scan using ts2_pkey on ts2
               Index Cond: ((k1 >= 2180) AND (k1 < 2190))
(8 rows)

EXPLAIN (costs off) SELECT * FROM t2 JOIN ts2 ON t2.k1 = ts2.k1 WHERE t2.k1 >= (17100) AND t2.k1 < (17190) AND ts2.k1 >= (2180) AND ts2.k1 < (2400);
                        QUERY PLAN                        
----------------------------------------------------------
 Merge Join
   Merge Cond: (t2.k1 = ts2.k1)
   ->  Index Scan using t2_pkey on t2
         Index Cond: ((k1 >= 17100) AND (k1 < 17190))
   ->  Sort
         Sort Key: ts2.k1
         ->  Index Scan using ts2_pkey on ts2
               Index Cond: ((k1 >= 2180) AND (k1 < 2400))
(8 rows)

EXPLAIN (costs off) SELECT * FROM t2 JOIN ts3 ON t2.k1 = ts3.k1 WHERE t2.k1 >= (17180) AND t2.k1 < (17190) AND ts3.k1 >= (2180) AND ts3.k1 < (2190);
                        QUERY PLAN
----------------------------------------------------------
 Merge Join
   Merge Cond: (t2.k1 = ts3.k1)
   ->  Index Scan using t2_pkey on t2
         Index Cond: ((k1 >= 17180) AND (k1 < 17190))
   ->  Sort
         Sort Key: ts3.k1
         ->  Index Scan using ts3_pkey on ts3
               Index Cond: ((k1 >= 2180) AND (k1 < 2190))
(8 rows)

EXPLAIN (costs off) SELECT * FROM t2 JOIN ts3 ON t2.k1 = ts3.k1 WHERE t2.k1 >= (17100) AND t2.k1 < (17190) AND ts3.k1 >= (2180) AND ts3.k1 < (2400);
                                              QUERY PLAN
------------------------------------------------------------------------------------------------------
 YB Batched Nested Loop Join
   Join Filter: (t2.k1 = ts3.k1)
   ->  Index Scan using t2_pkey on t2
         Index Cond: ((k1 >= 17100) AND (k1 < 17190))
   ->  Index Scan using ts3_pkey on ts3
         Index Cond: ((k1 = ANY (ARRAY[t2.k1, $1, $2, ..., $1023])) AND (k1 >= 2180) AND (k1 < 2400))
(6 rows)

EXPLAIN (costs off) SELECT * FROM ts2 JOIN ts3 ON ts2.k1 = ts3.k1 WHERE ts2.k1 >= (17180) AND ts2.k1 < (17190) AND ts3.k1 >= (2180) AND ts3.k1 < (2190);
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 YB Batched Nested Loop Join
   Join Filter: (ts2.k1 = ts3.k1)
   ->  Index Scan using ts2_pkey on ts2
         Index Cond: ((k1 >= 17180) AND (k1 < 17190))
   ->  Index Scan using ts3_pkey on ts3
         Index Cond: ((k1 = ANY (ARRAY[ts2.k1, $1, $2, ..., $1023])) AND (k1 >= 2180) AND (k1 < 2190))
(6 rows)

EXPLAIN (costs off) SELECT * FROM ts2 JOIN ts3 ON ts2.k1 = ts3.k1 WHERE ts2.k1 >= (17100) AND ts2.k1 < (17190) AND ts3.k1 >= (2180) AND ts3.k1 < (2400);
                                              QUERY PLAN
-------------------------------------------------------------------------------------------------------
 YB Batched Nested Loop Join
   Join Filter: (ts2.k1 = ts3.k1)
   ->  Index Scan using ts2_pkey on ts2
         Index Cond: ((k1 >= 17100) AND (k1 < 17190))
   ->  Index Scan using ts3_pkey on ts3
         Index Cond: ((k1 = ANY (ARRAY[ts2.k1, $1, $2, ..., $1023])) AND (k1 >= 2180) AND (k1 < 2400))
(6 rows)

EXPLAIN (costs off) SELECT * FROM t1 JOIN t2 on t1.k1 = t2.k1 WHERE t1.k1 >= (2500) AND t1.k1 < (25100) AND t2.k1 >= (2500) AND t2.k1 < (25100);
                        QUERY PLAN                         
-----------------------------------------------------------
 Merge Join
   Merge Cond: (t1.k1 = t2.k1)
   ->  Index Scan using t1_pkey on t1
         Index Cond: ((k1 >= 2500) AND (k1 < 25100))
   ->  Materialize
         ->  Index Scan using t2_pkey on t2
               Index Cond: ((k1 >= 2500) AND (k1 < 25100))
(7 rows)

EXPLAIN (costs off) SELECT * FROM t1 JOIN t2 on t1.k1 = t2.k1 WHERE t1.k1 >= (24800) AND t1.k1 < (25100) AND t2.k1 >= (2500) AND t2.k1 < (25300);
                                              QUERY PLAN
-------------------------------------------------------------------------------------------------------
 YB Batched Nested Loop Join
   Join Filter: (t1.k1 = t2.k1)
   ->  Index Scan using t1_pkey on t1
         Index Cond: ((k1 >= 24800) AND (k1 < 25100))
   ->  Index Scan using t2_pkey on t2
         Index Cond: ((k1 = ANY (ARRAY[t1.k1, $1, $2, ..., $1023])) AND (k1 >= 2500) AND (k1 < 25300))
(6 rows)

EXPLAIN (costs off) SELECT * FROM ts2 JOIN ts3 on ts2.k1 = ts3.k1 WHERE ts2.k1 >= (300) AND ts2.k1 < (3100) AND ts3.k1 >= (300) AND ts3.k1 < (3100);
                                              QUERY PLAN
------------------------------------------------------------------------------------------------------
 YB Batched Nested Loop Join
   Join Filter: (ts2.k1 = ts3.k1)
   ->  Index Scan using ts2_pkey on ts2
         Index Cond: ((k1 >= 300) AND (k1 < 3100))
   ->  Index Scan using ts3_pkey on ts3
         Index Cond: ((k1 = ANY (ARRAY[ts2.k1, $1, $2, ..., $1023])) AND (k1 >= 300) AND (k1 < 3100))
(6 rows)

EXPLAIN (costs off) SELECT * FROM ts2 JOIN ts3 on ts2.k1 = ts3.k1 WHERE ts2.k1 >= (2800) AND ts2.k1 < (3100) AND ts3.k1 >= (300) AND ts3.k1 < (3300);
                                              QUERY PLAN
------------------------------------------------------------------------------------------------------
 YB Batched Nested Loop Join
   Join Filter: (ts2.k1 = ts3.k1)
   ->  Index Scan using ts2_pkey on ts2
         Index Cond: ((k1 >= 2800) AND (k1 < 3100))
   ->  Index Scan using ts3_pkey on ts3
         Index Cond: ((k1 = ANY (ARRAY[ts2.k1, $1, $2, ..., $1023])) AND (k1 >= 300) AND (k1 < 3300))
(6 rows)

EXPLAIN (costs off) SELECT * FROM t1 JOIN t2 ON t1.v1 = t2.v1 WHERE t1.k1 in ((810), (8180), (820));
                            QUERY PLAN
-------------------------------------------------------------------
 YB Batched Nested Loop Join
   Join Filter: (t1.v1 = t2.v1)
   ->  Index Scan using t1_pkey on t1
         Index Cond: (k1 = ANY ('{810,8180,820}'::integer[]))
   ->  Index Scan using t2_v1_k2_idx on t2
         Index Cond: (v1 = ANY (ARRAY[t1.v1, $1, $2, ..., $1023]))
(6 rows)

EXPLAIN (costs off) SELECT * FROM t1 JOIN t2 ON t1.v1 = t2.v1 WHERE t1.k1 in ((810), (8180), (820), (830), (8380), (840), (850), (8580), (860), (870), (8780), (880), (890), (8980), (900));
                                                    QUERY PLAN
------------------------------------------------------------------------------------------------------------------
 YB Batched Nested Loop Join
   Join Filter: (t1.v1 = t2.v1)
   ->  Index Scan using t1_pkey on t1
         Index Cond: (k1 = ANY ('{810,8180,820,830,8380,840,850,8580,860,870,8780,880,890,8980,900}'::integer[]))
   ->  Index Scan using t2_v1_k2_idx on t2
         Index Cond: (v1 = ANY (ARRAY[t1.v1, $1, $2, ..., $1023]))
(6 rows)

EXPLAIN (costs off) SELECT * FROM t2 JOIN ts3 ON t2.v1 = ts3.v1 WHERE t2.k1 in ((810), (8180), (820));
                             QUERY PLAN
--------------------------------------------------------------------
 Hash Join
   Hash Cond: (ts3.v1 = t2.v1)
   ->  Seq Scan on ts3
   ->  Hash
         ->  Index Scan using t2_pkey on t2
               Index Cond: (k1 = ANY ('{810,8180,820}'::integer[]))
(6 rows)

EXPLAIN (costs off) SELECT * FROM t2 JOIN ts3 ON t2.v1 = ts3.v1 WHERE t2.k1 in ((810), (8180), (820), (830), (8380), (840), (850), (8580), (860), (870), (8780), (880), (890), (8980), (900));
                                                       QUERY PLAN
------------------------------------------------------------------------------------------------------------------------
 Hash Join
   Hash Cond: (ts3.v1 = t2.v1)
   ->  Seq Scan on ts3
   ->  Hash
         ->  Index Scan using t2_pkey on t2
               Index Cond: (k1 = ANY ('{810,8180,820,830,8380,840,850,8580,860,870,8780,880,890,8980,900}'::integer[]))
(6 rows)

EXPLAIN (costs off) SELECT * FROM ts2 JOIN ts3 ON ts2.v1 = ts3.v1 WHERE ts2.k1 in ((810), (8180), (820));
                             QUERY PLAN
--------------------------------------------------------------------
 Hash Join
   Hash Cond: (ts3.v1 = ts2.v1)
   ->  Seq Scan on ts3
   ->  Hash
         ->  Index Scan using ts2_pkey on ts2
               Index Cond: (k1 = ANY ('{810,8180,820}'::integer[]))
(6 rows)

EXPLAIN (costs off) SELECT * FROM ts2 JOIN ts3 ON ts2.v1 = ts3.v1 WHERE ts2.k1 in ((810), (8180), (820), (830), (8380), (840), (850), (8580), (860), (870), (8780), (880), (890), (8980), (900));
                                                       QUERY PLAN
------------------------------------------------------------------------------------------------------------------------
 Hash Join
   Hash Cond: (ts3.v1 = ts2.v1)
   ->  Seq Scan on ts3
   ->  Hash
         ->  Index Scan using ts2_pkey on ts2
               Index Cond: (k1 = ANY ('{810,8180,820,830,8380,840,850,8580,860,870,8780,880,890,8980,900}'::integer[]))
(6 rows)

EXPLAIN (costs off) SELECT * FROM t1 LEFT JOIN t2 ON t1.v1 = t2.v1 WHERE t1.k1 in ((810), (8180), (820));
                            QUERY PLAN
-------------------------------------------------------------------
 YB Batched Nested Loop Left Join
   Join Filter: (t1.v1 = t2.v1)
   ->  Index Scan using t1_pkey on t1
         Index Cond: (k1 = ANY ('{810,8180,820}'::integer[]))
   ->  Index Scan using t2_v1_k2_idx on t2
         Index Cond: (v1 = ANY (ARRAY[t1.v1, $1, $2, ..., $1023]))
(6 rows)

EXPLAIN (costs off) SELECT * FROM t1 LEFT JOIN t2 ON t1.v1 = t2.v1 WHERE t1.k1 in ((810), (8180), (820), (830), (8380), (840), (850), (8580), (860), (870), (8780), (880), (890), (8980), (900));
                                                    QUERY PLAN
------------------------------------------------------------------------------------------------------------------
 YB Batched Nested Loop Left Join
   Join Filter: (t1.v1 = t2.v1)
   ->  Index Scan using t1_pkey on t1
         Index Cond: (k1 = ANY ('{810,8180,820,830,8380,840,850,8580,860,870,8780,880,890,8980,900}'::integer[]))
   ->  Index Scan using t2_v1_k2_idx on t2
         Index Cond: (v1 = ANY (ARRAY[t1.v1, $1, $2, ..., $1023]))
(6 rows)

EXPLAIN (costs off) SELECT * FROM t2 LEFT JOIN ts3 ON t2.v1 = ts3.v1 WHERE t2.k1 in ((810), (8180), (820));
                             QUERY PLAN
--------------------------------------------------------------------
 Hash Right Join
   Hash Cond: (ts3.v1 = t2.v1)
   ->  Seq Scan on ts3
   ->  Hash
         ->  Index Scan using t2_pkey on t2
               Index Cond: (k1 = ANY ('{810,8180,820}'::integer[]))
(6 rows)

EXPLAIN (costs off) SELECT * FROM t2 LEFT JOIN ts3 ON t2.v1 = ts3.v1 WHERE t2.k1 in ((810), (8180), (820), (830), (8380), (840), (850), (8580), (860), (870), (8780), (880), (890), (8980), (900));
                                                       QUERY PLAN
------------------------------------------------------------------------------------------------------------------------
 Hash Right Join
   Hash Cond: (ts3.v1 = t2.v1)
   ->  Seq Scan on ts3
   ->  Hash
         ->  Index Scan using t2_pkey on t2
               Index Cond: (k1 = ANY ('{810,8180,820,830,8380,840,850,8580,860,870,8780,880,890,8980,900}'::integer[]))
(6 rows)

EXPLAIN (costs off) SELECT * FROM ts2 LEFT JOIN ts3 ON ts2.v1 = ts3.v1 WHERE ts2.k1 in ((810), (8180), (820));
                             QUERY PLAN
--------------------------------------------------------------------
 Hash Right Join
   Hash Cond: (ts3.v1 = ts2.v1)
   ->  Seq Scan on ts3
   ->  Hash
         ->  Index Scan using ts2_pkey on ts2
               Index Cond: (k1 = ANY ('{810,8180,820}'::integer[]))
(6 rows)

EXPLAIN (costs off) SELECT * FROM ts2 LEFT JOIN ts3 ON ts2.v1 = ts3.v1 WHERE ts2.k1 in ((810), (8180), (820), (830), (8380), (840), (850), (8580), (860), (870), (8780), (880), (890), (8980), (900));
                                                       QUERY PLAN
------------------------------------------------------------------------------------------------------------------------
 Hash Right Join
   Hash Cond: (ts3.v1 = ts2.v1)
   ->  Seq Scan on ts3
   ->  Hash
         ->  Index Scan using ts2_pkey on ts2
               Index Cond: (k1 = ANY ('{810,8180,820,830,8380,840,850,8580,860,870,8780,880,890,8980,900}'::integer[]))
(6 rows)

EXPLAIN (costs off) SELECT * FROM t1 RIGHT JOIN t2 ON t1.v1 = t2.v1 WHERE t1.k1 in ((810), (8180), (820));
                            QUERY PLAN
-------------------------------------------------------------------
 YB Batched Nested Loop Join
   Join Filter: (t1.v1 = t2.v1)
   ->  Index Scan using t1_pkey on t1
         Index Cond: (k1 = ANY ('{810,8180,820}'::integer[]))
   ->  Index Scan using t2_v1_k2_idx on t2
         Index Cond: (v1 = ANY (ARRAY[t1.v1, $1, $2, ..., $1023]))
(6 rows)

EXPLAIN (costs off) SELECT * FROM t1 RIGHT JOIN t2 ON t1.v1 = t2.v1 WHERE t1.k1 in ((810), (8180), (820), (830), (8380), (840), (850), (8580), (860), (870), (8780), (880), (890), (8980), (900));
                                                    QUERY PLAN
------------------------------------------------------------------------------------------------------------------
 YB Batched Nested Loop Join
   Join Filter: (t1.v1 = t2.v1)
   ->  Index Scan using t1_pkey on t1
         Index Cond: (k1 = ANY ('{810,8180,820,830,8380,840,850,8580,860,870,8780,880,890,8980,900}'::integer[]))
   ->  Index Scan using t2_v1_k2_idx on t2
         Index Cond: (v1 = ANY (ARRAY[t1.v1, $1, $2, ..., $1023]))
(6 rows)

EXPLAIN (costs off) SELECT * FROM t2 RIGHT JOIN ts3 ON t2.v1 = ts3.v1 WHERE t2.k1 in ((810), (8180), (820));
                             QUERY PLAN
--------------------------------------------------------------------
 Hash Join
   Hash Cond: (ts3.v1 = t2.v1)
   ->  Seq Scan on ts3
   ->  Hash
         ->  Index Scan using t2_pkey on t2
               Index Cond: (k1 = ANY ('{810,8180,820}'::integer[]))
(6 rows)

EXPLAIN (costs off) SELECT * FROM t2 RIGHT JOIN ts3 ON t2.v1 = ts3.v1 WHERE t2.k1 in ((810), (8180), (820), (830), (8380), (840), (850), (8580), (860), (870), (8780), (880), (890), (8980), (900));
                                                       QUERY PLAN
------------------------------------------------------------------------------------------------------------------------
 Hash Join
   Hash Cond: (ts3.v1 = t2.v1)
   ->  Seq Scan on ts3
   ->  Hash
         ->  Index Scan using t2_pkey on t2
               Index Cond: (k1 = ANY ('{810,8180,820,830,8380,840,850,8580,860,870,8780,880,890,8980,900}'::integer[]))
(6 rows)

EXPLAIN (costs off) SELECT * FROM ts2 RIGHT JOIN ts3 ON ts2.v1 = ts3.v1 WHERE ts2.k1 in ((810), (8180), (820));
                             QUERY PLAN
--------------------------------------------------------------------
 Hash Join
   Hash Cond: (ts3.v1 = ts2.v1)
   ->  Seq Scan on ts3
   ->  Hash
         ->  Index Scan using ts2_pkey on ts2
               Index Cond: (k1 = ANY ('{810,8180,820}'::integer[]))
(6 rows)

EXPLAIN (costs off) SELECT * FROM ts2 RIGHT JOIN ts3 ON ts2.v1 = ts3.v1 WHERE ts2.k1 in ((810), (8180), (820), (830), (8380), (840), (850), (8580), (860), (870), (8780), (880), (890), (8980), (900));
                                                       QUERY PLAN
------------------------------------------------------------------------------------------------------------------------
 Hash Join
   Hash Cond: (ts3.v1 = ts2.v1)
   ->  Seq Scan on ts3
   ->  Hash
         ->  Index Scan using ts2_pkey on ts2
               Index Cond: (k1 = ANY ('{810,8180,820,830,8380,840,850,8580,860,870,8780,880,890,8980,900}'::integer[]))
(6 rows)

EXPLAIN (costs off) SELECT * FROM t1 FULL JOIN t2 ON t1.v1 = t2.v1 WHERE t1.k1 in ((810), (8180), (820));
                            QUERY PLAN
-------------------------------------------------------------------
 YB Batched Nested Loop Left Join
   Join Filter: (t1.v1 = t2.v1)
   ->  Index Scan using t1_pkey on t1
         Index Cond: (k1 = ANY ('{810,8180,820}'::integer[]))
   ->  Index Scan using t2_v1_k2_idx on t2
         Index Cond: (v1 = ANY (ARRAY[t1.v1, $1, $2, ..., $1023]))
(6 rows)

EXPLAIN (costs off) SELECT * FROM t1 FULL JOIN t2 ON t1.v1 = t2.v1 WHERE t1.k1 in ((810), (8180), (820), (830), (8380), (840), (850), (8580), (860), (870), (8780), (880), (890), (8980), (900));
                                                    QUERY PLAN
------------------------------------------------------------------------------------------------------------------
 YB Batched Nested Loop Left Join
   Join Filter: (t1.v1 = t2.v1)
   ->  Index Scan using t1_pkey on t1
         Index Cond: (k1 = ANY ('{810,8180,820,830,8380,840,850,8580,860,870,8780,880,890,8980,900}'::integer[]))
   ->  Index Scan using t2_v1_k2_idx on t2
         Index Cond: (v1 = ANY (ARRAY[t1.v1, $1, $2, ..., $1023]))
(6 rows)

EXPLAIN (costs off) SELECT * FROM t2 FULL JOIN ts3 ON t2.v1 = ts3.v1 WHERE t2.k1 in ((810), (8180), (820));
                             QUERY PLAN
--------------------------------------------------------------------
 Hash Right Join
   Hash Cond: (ts3.v1 = t2.v1)
   ->  Seq Scan on ts3
   ->  Hash
         ->  Index Scan using t2_pkey on t2
               Index Cond: (k1 = ANY ('{810,8180,820}'::integer[]))
(6 rows)

EXPLAIN (costs off) SELECT * FROM t2 FULL JOIN ts3 ON t2.v1 = ts3.v1 WHERE t2.k1 in ((810), (8180), (820), (830), (8380), (840), (850), (8580), (860), (870), (8780), (880), (890), (8980), (900));
                                                       QUERY PLAN
------------------------------------------------------------------------------------------------------------------------
 Hash Right Join
   Hash Cond: (ts3.v1 = t2.v1)
   ->  Seq Scan on ts3
   ->  Hash
         ->  Index Scan using t2_pkey on t2
               Index Cond: (k1 = ANY ('{810,8180,820,830,8380,840,850,8580,860,870,8780,880,890,8980,900}'::integer[]))
(6 rows)

EXPLAIN (costs off) SELECT * FROM ts2 FULL JOIN ts3 ON ts2.v1 = ts3.v1 WHERE ts2.k1 in ((810), (8180), (820));
                             QUERY PLAN
--------------------------------------------------------------------
 Hash Right Join
   Hash Cond: (ts3.v1 = ts2.v1)
   ->  Seq Scan on ts3
   ->  Hash
         ->  Index Scan using ts2_pkey on ts2
               Index Cond: (k1 = ANY ('{810,8180,820}'::integer[]))
(6 rows)

EXPLAIN (costs off) SELECT * FROM ts2 FULL JOIN ts3 ON ts2.v1 = ts3.v1 WHERE ts2.k1 in ((810), (8180), (820), (830), (8380), (840), (850), (8580), (860), (870), (8780), (880), (890), (8980),(900));
                                                       QUERY PLAN
------------------------------------------------------------------------------------------------------------------------
 Hash Right Join
   Hash Cond: (ts3.v1 = ts2.v1)
   ->  Seq Scan on ts3
   ->  Hash
         ->  Index Scan using ts2_pkey on ts2
               Index Cond: (k1 = ANY ('{810,8180,820,830,8380,840,850,8580,860,870,8780,880,890,8980,900}'::integer[]))
(6 rows)

EXPLAIN (costs off) SELECT * FROM t1 JOIN t2 ON t1.k1 = t2.k1 WHERE t1.k1 in ((810), (8180), (820));
                            QUERY PLAN
-------------------------------------------------------------------
 YB Batched Nested Loop Join
   Join Filter: (t1.k1 = t2.k1)
   ->  Index Scan using t1_pkey on t1
         Index Cond: (k1 = ANY ('{810,8180,820}'::integer[]))
   ->  Index Scan using t2_pkey on t2
         Index Cond: (k1 = ANY (ARRAY[t1.k1, $1, $2, ..., $1023]))
(6 rows)

EXPLAIN (costs off) SELECT * FROM t1 JOIN t2 ON t1.k1 = t2.k1 WHERE t1.k1 in ((810), (8180), (820), (830), (8380), (840), (850), (8580), (860), (870), (8780), (880), (890), (8980),(900));
                                                    QUERY PLAN
------------------------------------------------------------------------------------------------------------------
 YB Batched Nested Loop Join
   Join Filter: (t1.k1 = t2.k1)
   ->  Index Scan using t1_pkey on t1
         Index Cond: (k1 = ANY ('{810,8180,820,830,8380,840,850,8580,860,870,8780,880,890,8980,900}'::integer[]))
   ->  Index Scan using t2_pkey on t2
         Index Cond: (k1 = ANY (ARRAY[t1.k1, $1, $2, ..., $1023]))
(6 rows)

EXPLAIN (costs off) SELECT * FROM t2 JOIN ts3 ON t2.k1 = ts3.k1 WHERE t2.k1 in ((810), (8180), (820));
                            QUERY PLAN
-------------------------------------------------------------------
 YB Batched Nested Loop Join
   Join Filter: (t2.k1 = ts3.k1)
   ->  Index Scan using t2_pkey on t2
         Index Cond: (k1 = ANY ('{810,8180,820}'::integer[]))
   ->  Index Scan using ts3_pkey on ts3
         Index Cond: (k1 = ANY (ARRAY[t2.k1, $1, $2, ..., $1023]))
(6 rows)

EXPLAIN (costs off) SELECT * FROM t2 JOIN ts3 ON t2.k1 = ts3.k1 WHERE t2.k1 in ((810), (8180), (820), (830), (8380), (840), (850), (8580), (860), (870), (8780), (880), (890), (8980),(900));
                                                    QUERY PLAN
------------------------------------------------------------------------------------------------------------------
 YB Batched Nested Loop Join
   Join Filter: (t2.k1 = ts3.k1)
   ->  Index Scan using t2_pkey on t2
         Index Cond: (k1 = ANY ('{810,8180,820,830,8380,840,850,8580,860,870,8780,880,890,8980,900}'::integer[]))
   ->  Index Scan using ts3_pkey on ts3
         Index Cond: (k1 = ANY (ARRAY[t2.k1, $1, $2, ..., $1023]))
(6 rows)

EXPLAIN (costs off) SELECT * FROM ts2 JOIN ts3 ON ts2.k1 = ts3.k1 WHERE ts2.k1 in ((810), (8180), (820));
                             QUERY PLAN
--------------------------------------------------------------------
 YB Batched Nested Loop Join
   Join Filter: (ts2.k1 = ts3.k1)
   ->  Index Scan Backward using ts2_pkey on ts2
         Index Cond: (k1 = ANY ('{810,8180,820}'::integer[]))
   ->  Index Scan using ts3_pkey on ts3
         Index Cond: (k1 = ANY (ARRAY[ts2.k1, $1, $2, ..., $1023]))
(6 rows)

EXPLAIN (costs off) SELECT * FROM ts2 JOIN ts3 ON ts2.k1 = ts3.k1 WHERE ts2.k1 in ((810), (8180), (820), (830), (8380), (840), (850), (8580), (860), (870), (8780), (880), (890), (8980),(900));
                                                    QUERY PLAN
------------------------------------------------------------------------------------------------------------------
 YB Batched Nested Loop Join
   Join Filter: (ts2.k1 = ts3.k1)
   ->  Index Scan Backward using ts2_pkey on ts2
         Index Cond: (k1 = ANY ('{810,8180,820,830,8380,840,850,8580,860,870,8780,880,890,8980,900}'::integer[]))
   ->  Index Scan using ts3_pkey on ts3
         Index Cond: (k1 = ANY (ARRAY[ts2.k1, $1, $2, ..., $1023]))
(6 rows)

EXPLAIN (costs off) SELECT * FROM t1 LEFT JOIN t2 ON t1.k1 = t2.k1 WHERE t1.k1 in ((810), (8180), (820));
                            QUERY PLAN
-------------------------------------------------------------------
 YB Batched Nested Loop Left Join
   Join Filter: (t1.k1 = t2.k1)
   ->  Index Scan using t1_pkey on t1
         Index Cond: (k1 = ANY ('{810,8180,820}'::integer[]))
   ->  Index Scan using t2_pkey on t2
         Index Cond: (k1 = ANY (ARRAY[t1.k1, $1, $2, ..., $1023]))
(6 rows)

EXPLAIN (costs off) SELECT * FROM t1 LEFT JOIN t2 ON t1.k1 = t2.k1 WHERE t1.k1 in ((810), (8180), (820), (830), (8380), (840), (850), (8580), (860), (870), (8780), (880), (890), (8980),(900));
                                                    QUERY PLAN
------------------------------------------------------------------------------------------------------------------
 YB Batched Nested Loop Left Join
   Join Filter: (t1.k1 = t2.k1)
   ->  Index Scan using t1_pkey on t1
         Index Cond: (k1 = ANY ('{810,8180,820,830,8380,840,850,8580,860,870,8780,880,890,8980,900}'::integer[]))
   ->  Index Scan using t2_pkey on t2
         Index Cond: (k1 = ANY (ARRAY[t1.k1, $1, $2, ..., $1023]))
(6 rows)

EXPLAIN (costs off) SELECT * FROM t2 LEFT JOIN ts3 ON t2.k1 = ts3.k1 WHERE t2.k1 in ((810), (8180), (820));
                            QUERY PLAN
-------------------------------------------------------------------
 YB Batched Nested Loop Left Join
   Join Filter: (t2.k1 = ts3.k1)
   ->  Index Scan using t2_pkey on t2
         Index Cond: (k1 = ANY ('{810,8180,820}'::integer[]))
   ->  Index Scan using ts3_pkey on ts3
         Index Cond: (k1 = ANY (ARRAY[t2.k1, $1, $2, ..., $1023]))
(6 rows)

EXPLAIN (costs off) SELECT * FROM t2 LEFT JOIN ts3 ON t2.k1 = ts3.k1 WHERE t2.k1 in ((810), (8180), (820), (830), (8380), (840), (850), (8580), (860), (870), (8780), (880), (890), (8980),(900));
                                                    QUERY PLAN
------------------------------------------------------------------------------------------------------------------
 YB Batched Nested Loop Left Join
   Join Filter: (t2.k1 = ts3.k1)
   ->  Index Scan using t2_pkey on t2
         Index Cond: (k1 = ANY ('{810,8180,820,830,8380,840,850,8580,860,870,8780,880,890,8980,900}'::integer[]))
   ->  Index Scan using ts3_pkey on ts3
         Index Cond: (k1 = ANY (ARRAY[t2.k1, $1, $2, ..., $1023]))
(6 rows)

EXPLAIN (costs off) SELECT * FROM ts2 LEFT JOIN ts3 ON ts2.k1 = ts3.k1 WHERE ts2.k1 in ((810), (8180), (820));
                             QUERY PLAN
--------------------------------------------------------------------
 YB Batched Nested Loop Left Join
   Join Filter: (ts2.k1 = ts3.k1)
   ->  Index Scan Backward using ts2_pkey on ts2
         Index Cond: (k1 = ANY ('{810,8180,820}'::integer[]))
   ->  Index Scan using ts3_pkey on ts3
         Index Cond: (k1 = ANY (ARRAY[ts2.k1, $1, $2, ..., $1023]))
(6 rows)

EXPLAIN (costs off) SELECT * FROM ts2 LEFT JOIN ts3 ON ts2.k1 = ts3.k1 WHERE ts2.k1 in ((810), (8180), (820), (830), (8380), (840), (850), (8580), (860), (870), (8780), (880), (890), (8980),(900));
                                                    QUERY PLAN
------------------------------------------------------------------------------------------------------------------
 YB Batched Nested Loop Left Join
   Join Filter: (ts2.k1 = ts3.k1)
   ->  Index Scan Backward using ts2_pkey on ts2
         Index Cond: (k1 = ANY ('{810,8180,820,830,8380,840,850,8580,860,870,8780,880,890,8980,900}'::integer[]))
   ->  Index Scan using ts3_pkey on ts3
         Index Cond: (k1 = ANY (ARRAY[ts2.k1, $1, $2, ..., $1023]))
(6 rows)

EXPLAIN (costs off) SELECT * FROM t1 RIGHT JOIN t2 ON t1.k1 = t2.k1 WHERE t1.k1 in ((810), (8180), (820));
                            QUERY PLAN
-------------------------------------------------------------------
 YB Batched Nested Loop Join
   Join Filter: (t1.k1 = t2.k1)
   ->  Index Scan using t1_pkey on t1
         Index Cond: (k1 = ANY ('{810,8180,820}'::integer[]))
   ->  Index Scan using t2_pkey on t2
         Index Cond: (k1 = ANY (ARRAY[t1.k1, $1, $2, ..., $1023]))
(6 rows)

EXPLAIN (costs off) SELECT * FROM t1 RIGHT JOIN t2 ON t1.k1 = t2.k1 WHERE t1.k1 in ((810), (8180), (820), (830), (8380), (840), (850), (8580), (860), (870), (8780), (880), (890), (8980),(900));
                                                    QUERY PLAN
------------------------------------------------------------------------------------------------------------------
 YB Batched Nested Loop Join
   Join Filter: (t1.k1 = t2.k1)
   ->  Index Scan using t1_pkey on t1
         Index Cond: (k1 = ANY ('{810,8180,820,830,8380,840,850,8580,860,870,8780,880,890,8980,900}'::integer[]))
   ->  Index Scan using t2_pkey on t2
         Index Cond: (k1 = ANY (ARRAY[t1.k1, $1, $2, ..., $1023]))
(6 rows)

EXPLAIN (costs off) SELECT * FROM t2 RIGHT JOIN ts3 ON t2.k1 = ts3.k1 WHERE t2.k1 in ((810), (8180), (820));
                            QUERY PLAN
-------------------------------------------------------------------
 YB Batched Nested Loop Join
   Join Filter: (t2.k1 = ts3.k1)
   ->  Index Scan using t2_pkey on t2
         Index Cond: (k1 = ANY ('{810,8180,820}'::integer[]))
   ->  Index Scan using ts3_pkey on ts3
         Index Cond: (k1 = ANY (ARRAY[t2.k1, $1, $2, ..., $1023]))
(6 rows)

EXPLAIN (costs off) SELECT * FROM t2 RIGHT JOIN ts3 ON t2.k1 = ts3.k1 WHERE t2.k1 in ((810), (8180), (820), (830), (8380), (840), (850), (8580), (860), (870), (8780), (880), (890), (8980),(900));
                                                    QUERY PLAN
------------------------------------------------------------------------------------------------------------------
 YB Batched Nested Loop Join
   Join Filter: (t2.k1 = ts3.k1)
   ->  Index Scan using t2_pkey on t2
         Index Cond: (k1 = ANY ('{810,8180,820,830,8380,840,850,8580,860,870,8780,880,890,8980,900}'::integer[]))
   ->  Index Scan using ts3_pkey on ts3
         Index Cond: (k1 = ANY (ARRAY[t2.k1, $1, $2, ..., $1023]))
(6 rows)

EXPLAIN (costs off) SELECT * FROM ts2 RIGHT JOIN ts3 ON ts2.k1 = ts3.k1 WHERE ts2.k1 in ((810), (8180), (820));
                             QUERY PLAN
--------------------------------------------------------------------
 YB Batched Nested Loop Join
   Join Filter: (ts2.k1 = ts3.k1)
   ->  Index Scan Backward using ts2_pkey on ts2
         Index Cond: (k1 = ANY ('{810,8180,820}'::integer[]))
   ->  Index Scan using ts3_pkey on ts3
         Index Cond: (k1 = ANY (ARRAY[ts2.k1, $1, $2, ..., $1023]))
(6 rows)

EXPLAIN (costs off) SELECT * FROM ts2 RIGHT JOIN ts3 ON ts2.k1 = ts3.k1 WHERE ts2.k1 in ((810), (8180), (820), (830), (8380), (840), (850), (8580), (860), (870), (8780), (880), (890), (8980),(900));
                                                    QUERY PLAN
------------------------------------------------------------------------------------------------------------------
 YB Batched Nested Loop Join
   Join Filter: (ts2.k1 = ts3.k1)
   ->  Index Scan Backward using ts2_pkey on ts2
         Index Cond: (k1 = ANY ('{810,8180,820,830,8380,840,850,8580,860,870,8780,880,890,8980,900}'::integer[]))
   ->  Index Scan using ts3_pkey on ts3
         Index Cond: (k1 = ANY (ARRAY[ts2.k1, $1, $2, ..., $1023]))
(6 rows)

EXPLAIN (costs off) SELECT * FROM t1 FULL JOIN t2 ON t1.k1 = t2.k1 WHERE t1.k1 in ((810), (8180), (820));
                            QUERY PLAN
-------------------------------------------------------------------
 YB Batched Nested Loop Left Join
   Join Filter: (t1.k1 = t2.k1)
   ->  Index Scan using t1_pkey on t1
         Index Cond: (k1 = ANY ('{810,8180,820}'::integer[]))
   ->  Index Scan using t2_pkey on t2
         Index Cond: (k1 = ANY (ARRAY[t1.k1, $1, $2, ..., $1023]))
(6 rows)

EXPLAIN (costs off) SELECT * FROM t1 FULL JOIN t2 ON t1.k1 = t2.k1 WHERE t1.k1 in ((810), (8180), (820), (830), (8380), (840), (850), (8580), (860), (870), (8780), (880), (890), (8980),(900));
                                                    QUERY PLAN
------------------------------------------------------------------------------------------------------------------
 YB Batched Nested Loop Left Join
   Join Filter: (t1.k1 = t2.k1)
   ->  Index Scan using t1_pkey on t1
         Index Cond: (k1 = ANY ('{810,8180,820,830,8380,840,850,8580,860,870,8780,880,890,8980,900}'::integer[]))
   ->  Index Scan using t2_pkey on t2
         Index Cond: (k1 = ANY (ARRAY[t1.k1, $1, $2, ..., $1023]))
(6 rows)

EXPLAIN (costs off) SELECT * FROM t2 FULL JOIN ts3 ON t2.k1 = ts3.k1 WHERE t2.k1 in ((810), (8180), (820));
                            QUERY PLAN
-------------------------------------------------------------------
 YB Batched Nested Loop Left Join
   Join Filter: (t2.k1 = ts3.k1)
   ->  Index Scan using t2_pkey on t2
         Index Cond: (k1 = ANY ('{810,8180,820}'::integer[]))
   ->  Index Scan using ts3_pkey on ts3
         Index Cond: (k1 = ANY (ARRAY[t2.k1, $1, $2, ..., $1023]))
(6 rows)

EXPLAIN (costs off) SELECT * FROM t2 FULL JOIN ts3 ON t2.k1 = ts3.k1 WHERE t2.k1 in ((810), (8180), (820), (830), (8380), (840), (850), (8580), (860), (870), (8780), (880), (890), (8980),(900));
                                                    QUERY PLAN
------------------------------------------------------------------------------------------------------------------
 YB Batched Nested Loop Left Join
   Join Filter: (t2.k1 = ts3.k1)
   ->  Index Scan using t2_pkey on t2
         Index Cond: (k1 = ANY ('{810,8180,820,830,8380,840,850,8580,860,870,8780,880,890,8980,900}'::integer[]))
   ->  Index Scan using ts3_pkey on ts3
         Index Cond: (k1 = ANY (ARRAY[t2.k1, $1, $2, ..., $1023]))
(6 rows)

EXPLAIN (costs off) SELECT * FROM ts2 FULL JOIN ts3 ON ts2.k1 = ts3.k1 WHERE ts2.k1 in ((810), (8180), (820));
                             QUERY PLAN
--------------------------------------------------------------------
 YB Batched Nested Loop Left Join
   Join Filter: (ts2.k1 = ts3.k1)
   ->  Index Scan Backward using ts2_pkey on ts2
         Index Cond: (k1 = ANY ('{810,8180,820}'::integer[]))
   ->  Index Scan using ts3_pkey on ts3
         Index Cond: (k1 = ANY (ARRAY[ts2.k1, $1, $2, ..., $1023]))
(6 rows)

EXPLAIN (costs off) SELECT * FROM ts2 FULL JOIN ts3 ON ts2.k1 = ts3.k1 WHERE ts2.k1 in ((810), (8180), (820), (830), (8380), (840), (850), (8580), (860), (870), (8780), (880), (890), (8980),(900));
                                                    QUERY PLAN
------------------------------------------------------------------------------------------------------------------
 YB Batched Nested Loop Left Join
   Join Filter: (ts2.k1 = ts3.k1)
   ->  Index Scan Backward using ts2_pkey on ts2
         Index Cond: (k1 = ANY ('{810,8180,820,830,8380,840,850,8580,860,870,8780,880,890,8980,900}'::integer[]))
   ->  Index Scan using ts3_pkey on ts3
         Index Cond: (k1 = ANY (ARRAY[ts2.k1, $1, $2, ..., $1023]))
(6 rows)

EXPLAIN (costs off) SELECT * FROM t1 JOIN t2 ON t1.k1 = t2.k1 AND t1.k2 = t2.k2 WHERE t1.k1 > (1200) AND t1.k1 <= (1300);
                                                         QUERY PLAN
----------------------------------------------------------------------------------------------------------------------------
 YB Batched Nested Loop Join
   Join Filter: ((t1.k1 = t2.k1) AND (t1.k2 = t2.k2))
   ->  Index Scan using t1_pkey on t1
         Index Cond: ((k1 > 1200) AND (k1 <= 1300))
   ->  Index Scan using t2_pkey on t2
         Index Cond: (ROW(k1, k2) = ANY (ARRAY[ROW(t1.k1, t1.k2), ROW($1, $1025), ROW($2, $1026), ..., ROW($1023, $2047)]))
(6 rows)

EXPLAIN (costs off) SELECT * FROM t1 JOIN t2 ON t1.k1 = t2.k1 AND t1.k2 = t2.k2 WHERE t1.k1 > (1200) AND t1.k1 <= (1500);
                                                         QUERY PLAN
----------------------------------------------------------------------------------------------------------------------------
 YB Batched Nested Loop Join
   Join Filter: ((t1.k1 = t2.k1) AND (t1.k2 = t2.k2))
   ->  Index Scan using t1_pkey on t1
         Index Cond: ((k1 > 1200) AND (k1 <= 1500))
   ->  Index Scan using t2_pkey on t2
         Index Cond: (ROW(k1, k2) = ANY (ARRAY[ROW(t1.k1, t1.k2), ROW($1, $1025), ROW($2, $1026), ..., ROW($1023, $2047)]))
(6 rows)

EXPLAIN (costs off) SELECT * FROM ts2 JOIN ts3 ON ts2.k1 = ts3.k1 AND ts2.k2 = ts3.k2 WHERE ts2.k1 > (1200) AND ts2.k1 <= (1300);
                     QUERY PLAN
----------------------------------------------------
 Nested Loop
   ->  Index Scan using ts2_pkey on ts2
         Index Cond: ((k1 > 1200) AND (k1 <= 1300))
   ->  Index Scan using ts3_pkey on ts3
         Index Cond: (k1 = ts2.k1)
         Filter: (ts2.k2 = k2)
(6 rows)

EXPLAIN (costs off) SELECT * FROM ts2 JOIN ts3 ON ts2.k1 = ts3.k1 AND ts2.k2 = ts3.k2 WHERE ts2.k1 > (1200) AND ts2.k1 <= (1400);
                     QUERY PLAN
----------------------------------------------------
 Nested Loop
   ->  Index Scan using ts2_pkey on ts2
         Index Cond: ((k1 > 1200) AND (k1 <= 1400))
   ->  Index Scan using ts3_pkey on ts3
         Index Cond: (k1 = ts2.k1)
         Filter: (ts2.k2 = k2)
(6 rows)

EXPLAIN (costs off) SELECT * FROM t1 JOIN t2 ON t1.v1 = t2.v1 WHERE t1.k1 = (8180);
                            QUERY PLAN
-------------------------------------------------------------------
 YB Batched Nested Loop Join
   Join Filter: (t1.v1 = t2.v1)
   ->  Index Scan using t1_pkey on t1
         Index Cond: (k1 = 8180)
   ->  Index Scan using t2_v1_k2_idx on t2
         Index Cond: (v1 = ANY (ARRAY[t1.v1, $1, $2, ..., $1023]))
(6 rows)

EXPLAIN (costs off) SELECT * FROM t1 JOIN t2 ON t1.v1 = t2.v1 WHERE t1.k1 = (8100);
                            QUERY PLAN
-------------------------------------------------------------------
 YB Batched Nested Loop Join
   Join Filter: (t1.v1 = t2.v1)
   ->  Index Scan using t1_pkey on t1
         Index Cond: (k1 = 8100)
   ->  Index Scan using t2_v1_k2_idx on t2
         Index Cond: (v1 = ANY (ARRAY[t1.v1, $1, $2, ..., $1023]))
(6 rows)

EXPLAIN (costs off) SELECT * FROM t2 JOIN ts3 ON t2.v1 = ts3.v1 WHERE t2.k1 = (17100);
                 QUERY PLAN
--------------------------------------------
 Hash Join
   Hash Cond: (ts3.v1 = t2.v1)
   ->  Seq Scan on ts3
   ->  Hash
         ->  Index Scan using t2_pkey on t2
               Index Cond: (k1 = 17100)
(6 rows)

EXPLAIN (costs off) SELECT * FROM t2 JOIN ts3 ON t2.v1 = ts3.v1 WHERE t2.k1 = (17190);
                 QUERY PLAN
--------------------------------------------
 Hash Join
   Hash Cond: (ts3.v1 = t2.v1)
   ->  Seq Scan on ts3
   ->  Hash
         ->  Index Scan using t2_pkey on t2
               Index Cond: (k1 = 17190)
(6 rows)

EXPLAIN (costs off) SELECT * FROM ts2 JOIN ts3 ON ts2.v1 = ts3.v1 WHERE ts2.k1 = (17100);
                  QUERY PLAN
----------------------------------------------
 Hash Join
   Hash Cond: (ts3.v1 = ts2.v1)
   ->  Seq Scan on ts3
   ->  Hash
         ->  Index Scan using ts2_pkey on ts2
               Index Cond: (k1 = 17100)
(6 rows)

EXPLAIN (costs off) SELECT * FROM ts2 JOIN ts3 ON ts2.v1 = ts3.v1 WHERE ts2.k1 = (17190);
                  QUERY PLAN
----------------------------------------------
 Hash Join
   Hash Cond: (ts3.v1 = ts2.v1)
   ->  Seq Scan on ts3
   ->  Hash
         ->  Index Scan using ts2_pkey on ts2
               Index Cond: (k1 = 17190)
(6 rows)

EXPLAIN (costs off) SELECT * FROM t1 LEFT JOIN t2 ON t1.v1 = t2.v1 WHERE t1.k1 = (8180);
                            QUERY PLAN
-------------------------------------------------------------------
 YB Batched Nested Loop Left Join
   Join Filter: (t1.v1 = t2.v1)
   ->  Index Scan using t1_pkey on t1
         Index Cond: (k1 = 8180)
   ->  Index Scan using t2_v1_k2_idx on t2
         Index Cond: (v1 = ANY (ARRAY[t1.v1, $1, $2, ..., $1023]))
(6 rows)

EXPLAIN (costs off) SELECT * FROM t1 LEFT JOIN t2 ON t1.v1 = t2.v1 WHERE t1.k1 = (8100);
                            QUERY PLAN
-------------------------------------------------------------------
 YB Batched Nested Loop Left Join
   Join Filter: (t1.v1 = t2.v1)
   ->  Index Scan using t1_pkey on t1
         Index Cond: (k1 = 8100)
   ->  Index Scan using t2_v1_k2_idx on t2
         Index Cond: (v1 = ANY (ARRAY[t1.v1, $1, $2, ..., $1023]))
(6 rows)

EXPLAIN (costs off) SELECT * FROM t2 LEFT JOIN ts3 ON t2.v1 = ts3.v1 WHERE t2.k1 = (17100);
                 QUERY PLAN
--------------------------------------------
 Hash Right Join
   Hash Cond: (ts3.v1 = t2.v1)
   ->  Seq Scan on ts3
   ->  Hash
         ->  Index Scan using t2_pkey on t2
               Index Cond: (k1 = 17100)
(6 rows)

EXPLAIN (costs off) SELECT * FROM t2 LEFT JOIN ts3 ON t2.v1 = ts3.v1 WHERE t2.k1 = (17190);
                 QUERY PLAN
--------------------------------------------
 Hash Right Join
   Hash Cond: (ts3.v1 = t2.v1)
   ->  Seq Scan on ts3
   ->  Hash
         ->  Index Scan using t2_pkey on t2
               Index Cond: (k1 = 17190)
(6 rows)

EXPLAIN (costs off) SELECT * FROM ts2 LEFT JOIN ts3 ON ts2.v1 = ts3.v1 WHERE ts2.k1 = (17100);
                  QUERY PLAN
----------------------------------------------
 Hash Right Join
   Hash Cond: (ts3.v1 = ts2.v1)
   ->  Seq Scan on ts3
   ->  Hash
         ->  Index Scan using ts2_pkey on ts2
               Index Cond: (k1 = 17100)
(6 rows)

EXPLAIN (costs off) SELECT * FROM ts2 LEFT JOIN ts3 ON ts2.v1 = ts3.v1 WHERE ts2.k1 = (17190);
                  QUERY PLAN
----------------------------------------------
 Hash Right Join
   Hash Cond: (ts3.v1 = ts2.v1)
   ->  Seq Scan on ts3
   ->  Hash
         ->  Index Scan using ts2_pkey on ts2
               Index Cond: (k1 = 17190)
(6 rows)

EXPLAIN (costs off) SELECT * FROM t1 RIGHT JOIN t2 ON t1.v1 = t2.v1 WHERE t1.k1 = (8180);
                            QUERY PLAN
-------------------------------------------------------------------
 YB Batched Nested Loop Join
   Join Filter: (t1.v1 = t2.v1)
   ->  Index Scan using t1_pkey on t1
         Index Cond: (k1 = 8180)
   ->  Index Scan using t2_v1_k2_idx on t2
         Index Cond: (v1 = ANY (ARRAY[t1.v1, $1, $2, ..., $1023]))
(6 rows)

EXPLAIN (costs off) SELECT * FROM t1 RIGHT JOIN t2 ON t1.v1 = t2.v1 WHERE t1.k1 = (8100);
                            QUERY PLAN
-------------------------------------------------------------------
 YB Batched Nested Loop Join
   Join Filter: (t1.v1 = t2.v1)
   ->  Index Scan using t1_pkey on t1
         Index Cond: (k1 = 8100)
   ->  Index Scan using t2_v1_k2_idx on t2
         Index Cond: (v1 = ANY (ARRAY[t1.v1, $1, $2, ..., $1023]))
(6 rows)

EXPLAIN (costs off) SELECT * FROM t2 RIGHT JOIN ts3 ON t2.v1 = ts3.v1 WHERE t2.k1 = (17100);
                 QUERY PLAN
--------------------------------------------
 Hash Join
   Hash Cond: (ts3.v1 = t2.v1)
   ->  Seq Scan on ts3
   ->  Hash
         ->  Index Scan using t2_pkey on t2
               Index Cond: (k1 = 17100)
(6 rows)

EXPLAIN (costs off) SELECT * FROM t2 RIGHT JOIN ts3 ON t2.v1 = ts3.v1 WHERE t2.k1 = (17190);
                 QUERY PLAN
--------------------------------------------
 Hash Join
   Hash Cond: (ts3.v1 = t2.v1)
   ->  Seq Scan on ts3
   ->  Hash
         ->  Index Scan using t2_pkey on t2
               Index Cond: (k1 = 17190)
(6 rows)

EXPLAIN (costs off) SELECT * FROM ts2 RIGHT JOIN ts3 ON ts2.v1 = ts3.v1 WHERE ts2.k1 = (17100);
                  QUERY PLAN
----------------------------------------------
 Hash Join
   Hash Cond: (ts3.v1 = ts2.v1)
   ->  Seq Scan on ts3
   ->  Hash
         ->  Index Scan using ts2_pkey on ts2
               Index Cond: (k1 = 17100)
(6 rows)

EXPLAIN (costs off) SELECT * FROM ts2 RIGHT JOIN ts3 ON ts2.v1 = ts3.v1 WHERE ts2.k1 = (17190);
                  QUERY PLAN
----------------------------------------------
 Hash Join
   Hash Cond: (ts3.v1 = ts2.v1)
   ->  Seq Scan on ts3
   ->  Hash
         ->  Index Scan using ts2_pkey on ts2
               Index Cond: (k1 = 17190)
(6 rows)

EXPLAIN (costs off) SELECT * FROM t1 FULL JOIN t2 ON t1.v1 = t2.v1 WHERE t1.k1 = (8180);
                            QUERY PLAN
-------------------------------------------------------------------
 YB Batched Nested Loop Left Join
   Join Filter: (t1.v1 = t2.v1)
   ->  Index Scan using t1_pkey on t1
         Index Cond: (k1 = 8180)
   ->  Index Scan using t2_v1_k2_idx on t2
         Index Cond: (v1 = ANY (ARRAY[t1.v1, $1, $2, ..., $1023]))
(6 rows)

EXPLAIN (costs off) SELECT * FROM t1 FULL JOIN t2 ON t1.v1 = t2.v1 WHERE t1.k1 = (810);
                            QUERY PLAN
-------------------------------------------------------------------
 YB Batched Nested Loop Left Join
   Join Filter: (t1.v1 = t2.v1)
   ->  Index Scan using t1_pkey on t1
         Index Cond: (k1 = 810)
   ->  Index Scan using t2_v1_k2_idx on t2
         Index Cond: (v1 = ANY (ARRAY[t1.v1, $1, $2, ..., $1023]))
(6 rows)

EXPLAIN (costs off) SELECT * FROM t2 FULL JOIN ts3 ON t2.v1 = ts3.v1 WHERE t2.k1 = (17100);
                 QUERY PLAN
--------------------------------------------
 Hash Right Join
   Hash Cond: (ts3.v1 = t2.v1)
   ->  Seq Scan on ts3
   ->  Hash
         ->  Index Scan using t2_pkey on t2
               Index Cond: (k1 = 17100)
(6 rows)

EXPLAIN (costs off) SELECT * FROM t2 FULL JOIN ts3 ON t2.v1 = ts3.v1 WHERE t2.k1 = (17190);
                 QUERY PLAN
--------------------------------------------
 Hash Right Join
   Hash Cond: (ts3.v1 = t2.v1)
   ->  Seq Scan on ts3
   ->  Hash
         ->  Index Scan using t2_pkey on t2
               Index Cond: (k1 = 17190)
(6 rows)

EXPLAIN (costs off) SELECT * FROM ts2 FULL JOIN ts3 ON ts2.v1 = ts3.v1 WHERE ts2.k1 = (17100);
                  QUERY PLAN
----------------------------------------------
 Hash Right Join
   Hash Cond: (ts3.v1 = ts2.v1)
   ->  Seq Scan on ts3
   ->  Hash
         ->  Index Scan using ts2_pkey on ts2
               Index Cond: (k1 = 17100)
(6 rows)

EXPLAIN (costs off) SELECT * FROM ts2 FULL JOIN ts3 ON ts2.v1 = ts3.v1 WHERE ts2.k1 = (17190);
                  QUERY PLAN
----------------------------------------------
 Hash Right Join
   Hash Cond: (ts3.v1 = ts2.v1)
   ->  Seq Scan on ts3
   ->  Hash
         ->  Index Scan using ts2_pkey on ts2
               Index Cond: (k1 = 17190)
(6 rows)

EXPLAIN (costs off) SELECT * FROM t1 JOIN t2 ON t1.k1 = t2.k1 WHERE t1.k1 = (8180);
              QUERY PLAN
--------------------------------------
 Nested Loop
   ->  Index Scan using t1_pkey on t1
         Index Cond: (k1 = 8180)
   ->  Index Scan using t2_pkey on t2
         Index Cond: (k1 = 8180)
(5 rows)

EXPLAIN (costs off) SELECT * FROM t1 JOIN t2 ON t1.k1 = t2.k1 WHERE t1.k1 = (8100);
              QUERY PLAN
--------------------------------------
 Nested Loop
   ->  Index Scan using t1_pkey on t1
         Index Cond: (k1 = 8100)
   ->  Index Scan using t2_pkey on t2
         Index Cond: (k1 = 8100)
(5 rows)

EXPLAIN (costs off) SELECT * FROM t2 JOIN ts3 ON t2.k1 = ts3.k1 WHERE t2.k1 = (17100);
               QUERY PLAN
----------------------------------------
 Nested Loop
   ->  Index Scan using t2_pkey on t2
         Index Cond: (k1 = 17100)
   ->  Index Scan using ts3_pkey on ts3
         Index Cond: (k1 = 17100)
(5 rows)

EXPLAIN (costs off) SELECT * FROM t2 JOIN ts3 ON t2.k1 = ts3.k1 WHERE t2.k1 = (17190);
               QUERY PLAN
----------------------------------------
 Nested Loop
   ->  Index Scan using t2_pkey on t2
         Index Cond: (k1 = 17190)
   ->  Index Scan using ts3_pkey on ts3
         Index Cond: (k1 = 17190)
(5 rows)

EXPLAIN (costs off) SELECT * FROM ts2 JOIN ts3 ON ts2.k1 = ts3.k1 WHERE ts2.k1 = (17100);
               QUERY PLAN
----------------------------------------
 Nested Loop
   ->  Index Scan using ts2_pkey on ts2
         Index Cond: (k1 = 17100)
   ->  Index Scan using ts3_pkey on ts3
         Index Cond: (k1 = 17100)
(5 rows)

EXPLAIN (costs off) SELECT * FROM ts2 JOIN ts3 ON ts2.k1 = ts3.k1 WHERE ts2.k1 = (17190);
               QUERY PLAN
----------------------------------------
 Nested Loop
   ->  Index Scan using ts2_pkey on ts2
         Index Cond: (k1 = 17190)
   ->  Index Scan using ts3_pkey on ts3
         Index Cond: (k1 = 17190)
(5 rows)

EXPLAIN (costs off) SELECT * FROM t1 LEFT JOIN t2 ON t1.k1 = t2.k1 WHERE t1.k1 = (8180);
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 YB Batched Nested Loop Left Join
   Join Filter: (t1.k1 = t2.k1)
   ->  Index Scan using t1_pkey on t1
         Index Cond: (k1 = 8180)
   ->  Index Scan using t2_pkey on t2
         Index Cond: ((k1 = ANY (ARRAY[t1.k1, $1, $2, ..., $1023])) AND (k1 = 8180))
(6 rows)

EXPLAIN (costs off) SELECT * FROM t1 LEFT JOIN t2 ON t1.k1 = t2.k1 WHERE t1.k1 = (8100);
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 YB Batched Nested Loop Left Join
   Join Filter: (t1.k1 = t2.k1)
   ->  Index Scan using t1_pkey on t1
         Index Cond: (k1 = 8100)
   ->  Index Scan using t2_pkey on t2
         Index Cond: ((k1 = ANY (ARRAY[t1.k1, $1, $2, ..., $1023])) AND (k1 = 8100))
(6 rows)

EXPLAIN (costs off) SELECT * FROM t2 LEFT JOIN ts3 ON t2.k1 = ts3.k1 WHERE t2.k1 = (17100);
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 YB Batched Nested Loop Left Join
   Join Filter: (t2.k1 = ts3.k1)
   ->  Index Scan using t2_pkey on t2
         Index Cond: (k1 = 17100)
   ->  Index Scan using ts3_pkey on ts3
         Index Cond: ((k1 = ANY (ARRAY[t2.k1, $1, $2, ..., $1023])) AND (k1 = 17100))
(6 rows)

EXPLAIN (costs off) SELECT * FROM t2 LEFT JOIN ts3 ON t2.k1 = ts3.k1 WHERE t2.k1 = (17190);
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 YB Batched Nested Loop Left Join
   Join Filter: (t2.k1 = ts3.k1)
   ->  Index Scan using t2_pkey on t2
         Index Cond: (k1 = 17190)
   ->  Index Scan using ts3_pkey on ts3
         Index Cond: ((k1 = ANY (ARRAY[t2.k1, $1, $2, ..., $1023])) AND (k1 = 17190))
(6 rows)

EXPLAIN (costs off) SELECT * FROM ts2 LEFT JOIN ts3 ON ts2.k1 = ts3.k1 WHERE ts2.k1 = (17100);
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 YB Batched Nested Loop Left Join
   Join Filter: (ts2.k1 = ts3.k1)
   ->  Index Scan using ts2_pkey on ts2
         Index Cond: (k1 = 17100)
   ->  Index Scan using ts3_pkey on ts3
         Index Cond: ((k1 = ANY (ARRAY[ts2.k1, $1, $2, ..., $1023])) AND (k1 = 17100))
(6 rows)
  
EXPLAIN (costs off) SELECT * FROM ts2 LEFT JOIN ts3 ON ts2.k1 = ts3.k1 WHERE ts2.k1 = (17190);
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 YB Batched Nested Loop Left Join
   Join Filter: (ts2.k1 = ts3.k1)
   ->  Index Scan using ts2_pkey on ts2
         Index Cond: (k1 = 17190)
   ->  Index Scan using ts3_pkey on ts3
         Index Cond: ((k1 = ANY (ARRAY[ts2.k1, $1, $2, ..., $1023])) AND (k1 = 17190))
(6 rows)

EXPLAIN (costs off) SELECT * FROM t1 RIGHT JOIN t2 ON t1.k1 = t2.k1 WHERE t1.k1 = (8180);
              QUERY PLAN
--------------------------------------
 Nested Loop
   ->  Index Scan using t1_pkey on t1
         Index Cond: (k1 = 8180)
   ->  Index Scan using t2_pkey on t2
         Index Cond: (k1 = 8180)
(5 rows)

EXPLAIN (costs off) SELECT * FROM t1 RIGHT JOIN t2 ON t1.k1 = t2.k1 WHERE t1.k1 = (8100);
              QUERY PLAN
--------------------------------------
 Nested Loop
   ->  Index Scan using t1_pkey on t1
         Index Cond: (k1 = 8100)
   ->  Index Scan using t2_pkey on t2
         Index Cond: (k1 = 8100)
(5 rows)

EXPLAIN (costs off) SELECT * FROM t2 RIGHT JOIN ts3 ON t2.k1 = ts3.k1 WHERE t2.k1 = (17100);
               QUERY PLAN
----------------------------------------
 Nested Loop
   ->  Index Scan using t2_pkey on t2
         Index Cond: (k1 = 17100)
   ->  Index Scan using ts3_pkey on ts3
         Index Cond: (k1 = 17100)
(5 rows)

EXPLAIN (costs off) SELECT * FROM t2 RIGHT JOIN ts3 ON t2.k1 = ts3.k1 WHERE t2.k1 = (17190);
               QUERY PLAN
----------------------------------------
 Nested Loop
   ->  Index Scan using t2_pkey on t2
         Index Cond: (k1 = 17190)
   ->  Index Scan using ts3_pkey on ts3
         Index Cond: (k1 = 17190)
(5 rows)

EXPLAIN (costs off) SELECT * FROM ts2 RIGHT JOIN ts3 ON ts2.k1 = ts3.k1 WHERE ts2.k1 = (17100);
               QUERY PLAN
----------------------------------------
 Nested Loop
   ->  Index Scan using ts2_pkey on ts2
         Index Cond: (k1 = 17100)
   ->  Index Scan using ts3_pkey on ts3
         Index Cond: (k1 = 17100)
(5 rows)

EXPLAIN (costs off) SELECT * FROM ts2 RIGHT JOIN ts3 ON ts2.k1 = ts3.k1 WHERE ts2.k1 = (17190);
               QUERY PLAN
----------------------------------------
 Nested Loop
   ->  Index Scan using ts2_pkey on ts2
         Index Cond: (k1 = 17190)
   ->  Index Scan using ts3_pkey on ts3
         Index Cond: (k1 = 17190)
(5 rows)

EXPLAIN (costs off) SELECT * FROM t1 FULL JOIN t2 ON t1.k1 = t2.k1 WHERE t1.k1 = (8180);
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 YB Batched Nested Loop Left Join
   Join Filter: (t1.k1 = t2.k1)
   ->  Index Scan using t1_pkey on t1
         Index Cond: (k1 = 8180)
   ->  Index Scan using t2_pkey on t2
         Index Cond: ((k1 = ANY (ARRAY[t1.k1, $1, $2, ..., $1023])) AND (k1 = 8180))
(6 rows)
  
EXPLAIN (costs off) SELECT * FROM t1 FULL JOIN t2 ON t1.k1 = t2.k1 WHERE t1.k1 = (8100);
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 YB Batched Nested Loop Left Join
   Join Filter: (t1.k1 = t2.k1)
   ->  Index Scan using t1_pkey on t1
         Index Cond: (k1 = 8100)
   ->  Index Scan using t2_pkey on t2
         Index Cond: ((k1 = ANY (ARRAY[t1.k1, $1, $2, ..., $1023])) AND (k1 = 8100))
(6 rows)
  
EXPLAIN (costs off) SELECT * FROM t2 FULL JOIN ts3 ON t2.k1 = ts3.k1 WHERE t2.k1 = (17100);
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 YB Batched Nested Loop Left Join
   Join Filter: (t2.k1 = ts3.k1)
   ->  Index Scan using t2_pkey on t2
         Index Cond: (k1 = 17100)
   ->  Index Scan using ts3_pkey on ts3
         Index Cond: ((k1 = ANY (ARRAY[t2.k1, $1, $2, ..., $1023])) AND (k1 = 17100))
(6 rows)
  
EXPLAIN (costs off) SELECT * FROM t2 FULL JOIN ts3 ON t2.k1 = ts3.k1 WHERE t2.k1 = (17190);
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 YB Batched Nested Loop Left Join
   Join Filter: (t2.k1 = ts3.k1)
   ->  Index Scan using t2_pkey on t2
         Index Cond: (k1 = 17190)
   ->  Index Scan using ts3_pkey on ts3
         Index Cond: ((k1 = ANY (ARRAY[t2.k1, $1, $2, ..., $1023])) AND (k1 = 17190))
(6 rows)
  
EXPLAIN (costs off) SELECT * FROM ts2 FULL JOIN ts3 ON ts2.k1 = ts3.k1 WHERE ts2.k1 = (17100);
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 YB Batched Nested Loop Left Join
   Join Filter: (ts2.k1 = ts3.k1)
   ->  Index Scan using ts2_pkey on ts2
         Index Cond: (k1 = 17100)
   ->  Index Scan using ts3_pkey on ts3
         Index Cond: ((k1 = ANY (ARRAY[ts2.k1, $1, $2, ..., $1023])) AND (k1 = 17100))
(6 rows)
  
EXPLAIN (costs off) SELECT * FROM ts2 FULL JOIN ts3 ON ts2.k1 = ts3.k1 WHERE ts2.k1 = (17190);
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 YB Batched Nested Loop Left Join
   Join Filter: (ts2.k1 = ts3.k1)
   ->  Index Scan using ts2_pkey on ts2
         Index Cond: (k1 = 17190)
   ->  Index Scan using ts3_pkey on ts3
         Index Cond: ((k1 = ANY (ARRAY[ts2.k1, $1, $2, ..., $1023])) AND (k1 = 17190))
(6 rows)

EXPLAIN (costs off) SELECT t1.k1, t1.k2, t1.v1, t1.v2 FROM t1 ORDER BY t1.k1, t1.v1 LIMIT 100000;
         QUERY PLAN
----------------------------
 Limit
   ->  Sort
         Sort Key: k1, v1
         ->  Seq Scan on t1
(4 rows)

EXPLAIN (costs off) SELECT t1.k1, t1.k2, t1.v1, t1.v2 FROM t1 ORDER BY t1.k1, t1.v1 LIMIT 1000000;
         QUERY PLAN
----------------------------
 Limit
   ->  Sort
         Sort Key: k1, v1
         ->  Seq Scan on t1
(4 rows)

EXPLAIN (costs off) SELECT t2.k1, t2.k2, t2.v1, t2.v2 FROM t2 ORDER BY t2.k1, t2.v1 LIMIT 100000;
         QUERY PLAN
----------------------------
 Limit
   ->  Sort
         Sort Key: k1, v1
         ->  Seq Scan on t2
(4 rows)

EXPLAIN (costs off) SELECT t2.k1, t2.k2, t2.v1, t2.v2 FROM t2 ORDER BY t2.k1, t2.v1 LIMIT 1000000;
         QUERY PLAN
----------------------------
 Limit
   ->  Sort
         Sort Key: k1, v1
         ->  Seq Scan on t2
(4 rows)

EXPLAIN (costs off) SELECT t3.k1, t3.k2, t3.v1, t3.v2 FROM t3 ORDER BY t3.k1, t3.v1 LIMIT 100000;
         QUERY PLAN
----------------------------
 Limit
   ->  Sort
         Sort Key: k1, v1
         ->  Seq Scan on t3
(4 rows)

EXPLAIN (costs off) SELECT t3.k1, t3.k2, t3.v1, t3.v2 FROM t3 ORDER BY t3.k1, t3.v1 LIMIT 1000000;
         QUERY PLAN
----------------------------
 Limit
   ->  Sort
         Sort Key: k1, v1
         ->  Seq Scan on t3
(4 rows)

EXPLAIN (costs off) SELECT ts2.k1, ts2.k2, ts2.v1, ts2.v2 FROM ts2 ORDER BY ts2.k1, ts2.v1 LIMIT 100000;
         QUERY PLAN
-----------------------------
 Limit
   ->  Sort
         Sort Key: k1, v1
         ->  Seq Scan on ts2
(4 rows)

EXPLAIN (costs off) SELECT ts2.k1, ts2.k2, ts2.v1, ts2.v2 FROM ts2 ORDER BY ts2.k1, ts2.v1 LIMIT 1000000;
         QUERY PLAN
-----------------------------
 Limit
   ->  Sort
         Sort Key: k1, v1
         ->  Seq Scan on ts2
(4 rows)

EXPLAIN (costs off) SELECT ts3.k1, ts3.k2, ts3.v1, ts3.v2 FROM ts3 ORDER BY ts3.k1, ts3.v1 LIMIT 100000;
         QUERY PLAN
-----------------------------
 Limit
   ->  Sort
         Sort Key: k1, v1
         ->  Seq Scan on ts3
(4 rows)

EXPLAIN (costs off) SELECT ts3.k1, ts3.k2, ts3.v1, ts3.v2 FROM ts3 ORDER BY ts3.k1, ts3.v1 LIMIT 1000000;
         QUERY PLAN
-----------------------------
 Limit
   ->  Sort
         Sort Key: k1, v1
         ->  Seq Scan on ts3
(4 rows)

EXPLAIN (costs off) SELECT t1.k1, t1.k2, t1.v1, t1.v2 FROM t1 ORDER BY t1.k1, t1.v2 LIMIT 100000;
         QUERY PLAN
----------------------------
 Limit
   ->  Sort
         Sort Key: k1, v2
         ->  Seq Scan on t1
(4 rows)

EXPLAIN (costs off) SELECT t1.k1, t1.k2, t1.v1, t1.v2 FROM t1 ORDER BY t1.k1, t1.v2 LIMIT 1000000;
         QUERY PLAN
----------------------------
 Limit
   ->  Sort
         Sort Key: k1, v2
         ->  Seq Scan on t1
(4 rows)

EXPLAIN (costs off) SELECT t2.k1, t2.k2, t2.v1, t2.v2 FROM t2 ORDER BY t2.k1, t2.v2 LIMIT 100000;
         QUERY PLAN
----------------------------
 Limit
   ->  Sort
         Sort Key: k1, v2
         ->  Seq Scan on t2
(4 rows)

EXPLAIN (costs off) SELECT t2.k1, t2.k2, t2.v1, t2.v2 FROM t2 ORDER BY t2.k1, t2.v2 LIMIT 1000000;
         QUERY PLAN
----------------------------
 Limit
   ->  Sort
         Sort Key: k1, v2
         ->  Seq Scan on t2
(4 rows)

EXPLAIN (costs off) SELECT t3.k1, t3.k2, t3.v1, t3.v2 FROM t3 ORDER BY t3.k1, t3.v2 LIMIT 100000;
         QUERY PLAN
----------------------------
 Limit
   ->  Sort
         Sort Key: k1, v2
         ->  Seq Scan on t3
(4 rows)

EXPLAIN (costs off) SELECT t3.k1, t3.k2, t3.v1, t3.v2 FROM t3 ORDER BY t3.k1, t3.v2 LIMIT 1000000;
         QUERY PLAN
----------------------------
 Limit
   ->  Sort
         Sort Key: k1, v2
         ->  Seq Scan on t3
(4 rows)

EXPLAIN (costs off) SELECT ts2.k1, ts2.k2, ts2.v1, ts2.v2 FROM ts2 ORDER BY ts2.k1, ts2.v2 LIMIT 100000;
         QUERY PLAN
-----------------------------
 Limit
   ->  Sort
         Sort Key: k1, v2
         ->  Seq Scan on ts2
(4 rows)

EXPLAIN (costs off) SELECT ts2.k1, ts2.k2, ts2.v1, ts2.v2 FROM ts2 ORDER BY ts2.k1, ts2.v2 LIMIT 1000000;
         QUERY PLAN
-----------------------------
 Limit
   ->  Sort
         Sort Key: k1, v2
         ->  Seq Scan on ts2
(4 rows)

EXPLAIN (costs off) SELECT ts3.k1, ts3.k2, ts3.v1, ts3.v2 FROM ts3 ORDER BY ts3.k1, ts3.v2 LIMIT 100000;
         QUERY PLAN
-----------------------------
 Limit
   ->  Sort
         Sort Key: k1, v2
         ->  Seq Scan on ts3
(4 rows)

EXPLAIN (costs off) SELECT ts3.k1, ts3.k2, ts3.v1, ts3.v2 FROM ts3 ORDER BY ts3.k1, ts3.v2 LIMIT 1000000;
         QUERY PLAN
-----------------------------
 Limit
   ->  Sort
         Sort Key: k1, v2
         ->  Seq Scan on ts3
(4 rows)

EXPLAIN (costs off) SELECT t / 100 FROM generate_series(1, 1000000) AS t ORDER BY  t % 100;
                QUERY PLAN
------------------------------------------
 Sort
   Sort Key: ((t % 100))
   ->  Function Scan on generate_series t
(3 rows)

EXPLAIN (costs off) SELECT SUM(t % 100), count(t / 100) FROM generate_series(1, 1000000) AS t;
                QUERY PLAN
------------------------------------------
 Aggregate
   ->  Function Scan on generate_series t
(2 rows)

EXPLAIN (costs off) SELECT |/ t, 'foo ' || t, now() FROM generate_series(1, 1000000) AS t;
             QUERY PLAN
------------------------------------
 Function Scan on generate_series t
(1 row)

EXPLAIN (costs off) SELECT * FROM t1 WHERE v1 > (20000) ORDER BY v1 ASC LIMIT 100000;
                QUERY PLAN
-------------------------------------------
 Limit
   ->  Sort
         Sort Key: v1
         ->  Seq Scan on t1
               Remote Filter: (v1 > 20000)
(5 rows)

EXPLAIN (costs off) SELECT * FROM t1 WHERE v1 > (20000) ORDER BY v1 ASC LIMIT 1000000;
                QUERY PLAN
-------------------------------------------
 Limit
   ->  Sort
         Sort Key: v1
         ->  Seq Scan on t1
               Remote Filter: (v1 > 20000)
(5 rows)

EXPLAIN (costs off) SELECT * FROM t2 WHERE v1 > (20000) ORDER BY v1 ASC LIMIT 100000;
                QUERY PLAN
-------------------------------------------
 Limit
   ->  Sort
         Sort Key: v1
         ->  Seq Scan on t2
               Remote Filter: (v1 > 20000)
(5 rows)

EXPLAIN (costs off) SELECT * FROM t2 WHERE v1 > (20000) ORDER BY v1 ASC LIMIT 1000000;
                QUERY PLAN
-------------------------------------------
 Limit
   ->  Sort
         Sort Key: v1
         ->  Seq Scan on t2
               Remote Filter: (v1 > 20000)
(5 rows)

EXPLAIN (costs off) SELECT * FROM ts2 WHERE v1 > (20000) ORDER BY v1 ASC LIMIT 100000;
                QUERY PLAN
-------------------------------------------
 Limit
   ->  Sort
         Sort Key: v1
         ->  Seq Scan on ts2
               Remote Filter: (v1 > 20000)
(5 rows)

EXPLAIN (costs off) SELECT * FROM ts2 WHERE v1 > (20000) ORDER BY v1 ASC LIMIT 1000000;
                QUERY PLAN
-------------------------------------------
 Limit
   ->  Sort
         Sort Key: v1
         ->  Seq Scan on ts2
               Remote Filter: (v1 > 20000)
(5 rows)

EXPLAIN (costs off) SELECT * FROM ts3 WHERE v1 > (20000) ORDER BY v1 ASC LIMIT 100000;
                QUERY PLAN
-------------------------------------------
 Limit
   ->  Sort
         Sort Key: v1
         ->  Seq Scan on ts3
               Remote Filter: (v1 > 20000)
(5 rows)

EXPLAIN (costs off) SELECT * FROM ts3 WHERE v1 > (20000) ORDER BY v1 ASC LIMIT 1000000;
                QUERY PLAN
-------------------------------------------
 Limit
   ->  Sort
         Sort Key: v1
         ->  Seq Scan on ts3
               Remote Filter: (v1 > 20000)
(5 rows)

EXPLAIN (costs off) SELECT v1,k2 FROM t1 WHERE v1 > (20000) ORDER BY v1 ASC LIMIT 100000;
                   QUERY PLAN
------------------------------------------------
 Limit
   ->  Index Only Scan using t1_v1_k2_idx on t1
         Index Cond: (v1 > 20000)
(3 rows)

EXPLAIN (costs off) SELECT v1,k2 FROM t1 WHERE v1 > (20000) ORDER BY v1 ASC LIMIT 1000000;
                   QUERY PLAN
------------------------------------------------
 Limit
   ->  Index Only Scan using t1_v1_k2_idx on t1
         Index Cond: (v1 > 20000)
(3 rows)

EXPLAIN (costs off) SELECT v1,k2 FROM t2 WHERE v1 > (20000) ORDER BY v1 ASC LIMIT 100000;
                   QUERY PLAN
------------------------------------------------
 Limit
   ->  Index Only Scan using t2_v1_k2_idx on t2
         Index Cond: (v1 > 20000)
(3 rows)

EXPLAIN (costs off) SELECT v1,k2 FROM t2 WHERE v1 > (20000) ORDER BY v1 ASC LIMIT 1000000;
                   QUERY PLAN
------------------------------------------------
 Limit
   ->  Index Only Scan using t2_v1_k2_idx on t2
         Index Cond: (v1 > 20000)
(3 rows)

EXPLAIN (costs off) SELECT v1,k2 FROM ts2 WHERE v1 > (20000) ORDER BY v1 ASC LIMIT 100000;
                QUERY PLAN
-------------------------------------------
 Limit
   ->  Sort
         Sort Key: v1
         ->  Seq Scan on ts2
               Remote Filter: (v1 > 20000)
(5 rows)

EXPLAIN (costs off) SELECT v1,k2 FROM ts2 WHERE v1 > (20000) ORDER BY v1 ASC LIMIT 1000000;
                QUERY PLAN
-------------------------------------------
 Limit
   ->  Sort
         Sort Key: v1
         ->  Seq Scan on ts2
               Remote Filter: (v1 > 20000)
(5 rows)

EXPLAIN (costs off) SELECT v1,k2 FROM ts3 WHERE v1 > (20000) ORDER BY v1 ASC LIMIT 100000;
                QUERY PLAN
-------------------------------------------
 Limit
   ->  Sort
         Sort Key: v1
         ->  Seq Scan on ts3
               Remote Filter: (v1 > 20000)
(5 rows)

EXPLAIN (costs off) SELECT v1,k2 FROM ts3 WHERE v1 > (20000) ORDER BY v1 ASC LIMIT 1000000;
                QUERY PLAN
-------------------------------------------
 Limit
   ->  Sort
         Sort Key: v1
         ->  Seq Scan on ts3
               Remote Filter: (v1 > 20000)
(5 rows)

EXPLAIN (costs off) SELECT * FROM t1 LIMIT 100000;
      QUERY PLAN
----------------------
 Limit
   ->  Seq Scan on t1
(2 rows)

EXPLAIN (costs off) SELECT * FROM t1 LIMIT 1000000;
      QUERY PLAN
----------------------
 Limit
   ->  Seq Scan on t1
(2 rows)

EXPLAIN (costs off) SELECT * FROM t2 LIMIT 100000;
      QUERY PLAN
----------------------
 Limit
   ->  Seq Scan on t2
(2 rows)

EXPLAIN (costs off) SELECT * FROM t2 LIMIT 1000000;
      QUERY PLAN
----------------------
 Limit
   ->  Seq Scan on t2
(2 rows)

EXPLAIN (costs off) SELECT * FROM t3 LIMIT 100000;
      QUERY PLAN
----------------------
 Limit
   ->  Seq Scan on t3
(2 rows)

EXPLAIN (costs off) SELECT * FROM t3 LIMIT 1000000;
      QUERY PLAN
----------------------
 Limit
   ->  Seq Scan on t3
(2 rows)

EXPLAIN (costs off) SELECT * FROM ts2 LIMIT 100000;
      QUERY PLAN
-----------------------
 Limit
   ->  Seq Scan on ts2
(2 rows)

EXPLAIN (costs off) SELECT * FROM ts2 LIMIT 1000000;
      QUERY PLAN
-----------------------
 Limit
   ->  Seq Scan on ts2
(2 rows)

EXPLAIN (costs off) SELECT * FROM ts3 LIMIT 100000;
      QUERY PLAN
-----------------------
 Limit
   ->  Seq Scan on ts3
(2 rows)

EXPLAIN (costs off) SELECT * FROM ts3 LIMIT 1000000;
      QUERY PLAN
-----------------------
 Limit
   ->  Seq Scan on ts3
(2 rows)

EXPLAIN (costs off) SELECT k1,k2 FROM t1 WHERE k1 = (4231)  AND k2 = ('k2-042');
                      QUERY PLAN
-------------------------------------------------------
 Index Scan using t1_pkey on t1
   Index Cond: ((k1 = 4231) AND (k2 = 'k2-042'::text))
(2 rows)

EXPLAIN (costs off) SELECT * FROM t1 WHERE v1 = (4231)  AND k2 = ('k2-042');
                      QUERY PLAN
-------------------------------------------------------
 Index Scan using t1_v1_k2_idx on t1
   Index Cond: ((v1 = 4231) AND (k2 = 'k2-042'::text))
(2 rows)

EXPLAIN (costs off) SELECT k1,k2 FROM t2 WHERE k1 = (4231)  AND k2 = ('k2-042');
                      QUERY PLAN
-------------------------------------------------------
 Index Scan using t2_pkey on t2
   Index Cond: ((k1 = 4231) AND (k2 = 'k2-042'::text))
(2 rows)

EXPLAIN (costs off) SELECT * FROM t2 WHERE v1 = (4231)  AND k2 = ('k2-042');
                      QUERY PLAN
-------------------------------------------------------
 Index Scan using t2_v1_k2_idx on t2
   Index Cond: ((v1 = 4231) AND (k2 = 'k2-042'::text))
(2 rows)

EXPLAIN (costs off) SELECT k1,k2 FROM t3 WHERE k1 = (4231)  AND k2 = ('k2-042');
                      QUERY PLAN
-------------------------------------------------------
 Index Scan using t3_pkey on t3
   Index Cond: ((k1 = 4231) AND (k2 = 'k2-042'::text))
(2 rows)

EXPLAIN (costs off) SELECT * FROM t3 WHERE v1 = (4231)  AND k2 = ('k2-042');
                      QUERY PLAN
-------------------------------------------------------
 Index Scan using t3_v1_k2_idx on t3
   Index Cond: ((v1 = 4231) AND (k2 = 'k2-042'::text))
(2 rows)

EXPLAIN (costs off) SELECT k1,k2 FROM ts2 WHERE k1 = (4231)  AND k2 = ('k2-042');
                      QUERY PLAN
-------------------------------------------------------
 Index Scan using ts2_pkey on ts2
   Index Cond: ((k1 = 4231) AND (k2 = 'k2-042'::text))
(2 rows)

EXPLAIN (costs off) SELECT * FROM ts2 WHERE v1 = (4231)  AND k2 = ('k2-042');
             QUERY PLAN
-------------------------------------
 Index Scan using ts2_pkey on ts2
   Index Cond: (k2 = 'k2-042'::text)
   Remote Filter: (v1 = 4231)
(3 rows)

EXPLAIN (costs off) SELECT k1,k2 FROM ts3 WHERE k1 = (4231)  AND k2 = ('k2-042');
               QUERY PLAN
----------------------------------------
 Index Scan using ts3_pkey on ts3
   Index Cond: (k1 = 4231)
   Remote Filter: (k2 = 'k2-042'::text)
(3 rows)

EXPLAIN (costs off) SELECT * FROM ts3 WHERE v1 = (4231)  AND k2 = ('k2-042');
                        QUERY PLAN
----------------------------------------------------------
 Seq Scan on ts3
   Remote Filter: ((v1 = 4231) AND (k2 = 'k2-042'::text))
(2 rows)

DROP TABLE t1 CASCADE;
DROP TABLE t2 CASCADE;
DROP TABLE t3 CASCADE;
DROP TABLE ts2 CASCADE;
DROP TABLE ts3 CASCADE;
