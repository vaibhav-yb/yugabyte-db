// Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.
//
syntax = "proto2";

package yb.docdb;

import "yb/common/common.proto";
import "yb/common/transaction.proto";
import "yb/util/opid.proto";

option java_package = "org.yb.docdb";

message KeyValuePairPB {
  optional bytes key = 1;
  optional bytes value = 2;
  optional fixed64 external_hybrid_time = 3;
  // For external intent writes, the transaction metadata associated with the key value pair.
  optional TransactionMetadataPB transaction = 4;
}

message ApplyExternalTransactionPB {
  optional bytes transaction_id = 1;
  optional fixed64 commit_hybrid_time = 2;
}

message TableSchemaVersionPB {
  optional bytes table_id = 1;
  optional uint32 schema_version = 2;
}

// A set of key/value pairs to be written into RocksDB.
message KeyValueWriteBatchPB {
  repeated KeyValuePairPB write_pairs = 1;
  optional TransactionMetadataPB transaction = 2;
  optional SubTransactionMetadataPB subtransaction = 8;
  optional bool DEPRECATED_may_have_metadata = 3;
  // Used by serializable isolation transactions and row locking statements to store read intents.
  // In case of read-modify-write operation both read_pairs and write_pairs could present.
  repeated KeyValuePairPB read_pairs = 5;
  // Even though there can be multiple write_pairs we have only one row_mark_type/ wait_policy since
  // currently we don't batch read RPCs from YSQL (which are the only ones that can set these 2
  // fields). And hence, only a singular value is sufficient.
  optional RowMarkType row_mark_type = 6;
  optional WaitPolicy wait_policy = 10;
  repeated ApplyExternalTransactionPB apply_external_transactions = 7;

  optional int64 ttl = 9;

  // Table schema version used by this write batch.
  // We could have writes to multiple cotables in a single write batch.
  repeated TableSchemaVersionPB table_schema_version = 11;

  optional bool enable_replicate_transaction_status_table = 12;
}

message ConsensusFrontierPB {
  optional OpIdPB op_id = 1;
  optional fixed64 hybrid_time = 2;
  optional fixed64 history_cutoff = 3;
  optional fixed64 hybrid_time_filter = 4;
  optional fixed64 max_value_level_ttl_expiration_time = 5;
  repeated TableSchemaVersionPB table_schema_version = 6;
}

message ApplyTransactionStatePB {
  // Apply should be continued from this key in reverse index.
  optional bytes key = 1;

  // Write id for first continued record.
  optional uint32 write_id = 2;

  // Transaction commit hybrid time.
  optional fixed64 commit_ht = 3;

  // Set of aborted subtransactions.
  optional AbortedSubTransactionSetPB aborted = 4;
}

message ColumnPackingPB {
  optional uint32 id = 1;
  optional uint64 num_varlen_columns_before = 2;
  optional uint64 offset_after_prev_varlen_column = 3;
  optional uint64 size = 4;
  optional bool nullable = 5;
}

message SchemaPackingPB {
  optional uint32 schema_version = 1;
  repeated ColumnPackingPB columns = 2;

  // Columns that present in schema but don't participate in packing.
  repeated uint32 skipped_column_ids = 3;
}
